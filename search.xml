<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis笔记</title>
      <link href="/2023/12/22/Redis/"/>
      <url>/2023/12/22/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="一、认识Redis"><a href="#一、认识Redis" class="headerlink" title="一、认识Redis"></a>一、认识Redis</h2><h3 id="非关系型与关系型"><a href="#非关系型与关系型" class="headerlink" title="非关系型与关系型"></a>非关系型与关系型</h3><p>基于内存的键值对(KV)数据库</p><p>对查询要求高的场景：Redis</p><p>安全与一致性：关系型数据库</p><p><img src="/%5Cimg%5Cimage-20231219214644539.png" alt="image-20231219214644539"></p><h3 id="非关系型的特征："><a href="#非关系型的特征：" class="headerlink" title="非关系型的特征："></a>非关系型的特征：</h3><p>低延迟速度快的重点是：基于内存</p><p><img src="/%5Cimg%5Cimage-20231219215424941.png" alt="image-20231219215424941"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为Redis7.0官网没有windos，所以找了半天用了github上一位大佬的</p><p><a href="https://github.com/zkteco-home/redis-windows/releases">Releases · zkteco-home&#x2F;redis-windows (github.com)</a></p><p>安装后直接运行redis-server.exe就行</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>设置</p><p>Key（name）Value(Zed)</p><p><img src="/%5Cimg%5Cimage-20231220004242286.png" alt="image-20231220004242286"></p><h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><p>分为两种：基本类型和特殊类型</p><p><img src="/%5Cimg%5Cimage-20231220093503525.png" alt="image-20231220093503525"></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>KEYS、DEL、EXISTS、EXPIRE、TTL。</p><p><img src="/%5Cimg%5Cimage-20231220105946157.png" alt="image-20231220105946157"></p><h3 id="个人觉得会常用的命令"><a href="#个人觉得会常用的命令" class="headerlink" title="个人觉得会常用的命令"></a>个人觉得会常用的命令</h3><p>数据类型差别在于数据结构</p><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MSET key1 key2 ....批量增加/修改</span><br><span class="line">MGET key1 key2 .... 批量查询</span><br><span class="line">SET key1 value1 新增/修改</span><br><span class="line">SETNX key1 value1 新增（没有key才增，有就无视这条语句）</span><br><span class="line">SETEX key1 10 value1 新增带有效期的</span><br><span class="line">SET lock thread1 NX EX 10添加锁，NX是互斥，EX是设置的超时时间</span><br><span class="line">   </span><br><span class="line">EXPIRE key1 10设置key1的有效期(单位是秒)</span><br><span class="line">SETEX 10设置key的有效期 </span><br><span class="line">TTL key1查看剩余有效期</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h4><p><img src="/%5Cimg%5Cimage-20231220113912745.png" alt="image-20231220113912745"></p><h4 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h4><p><img src="/%5Cimg%5Cimage-20231220140026573.png" alt="image-20231220140026573"></p><h4 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h4><p><img src="/%5Cimg%5Cimage-20231220140157191.png" alt="image-20231220140157191"></p><h4 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h4><p><img src="/%5Cimg%5Cimage-20231220140615936.png" alt="image-20231220140615936"></p><h2 id="二、Java中操作Redis"><a href="#二、Java中操作Redis" class="headerlink" title="二、Java中操作Redis"></a>二、Java中操作Redis</h2><p>三种：Jedis、SpringDataRedis、</p><h4 id="导入依赖（SpringDataRedis）"><a href="#导入依赖（SpringDataRedis）" class="headerlink" title="导入依赖（SpringDataRedis）"></a>导入依赖（SpringDataRedis）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置yml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: <span class="number">8</span>   #最大连接</span><br><span class="line">        max-idle: <span class="number">8</span>     #最大空闲连接</span><br><span class="line">        min-idle: <span class="number">0</span>     #最小空闲连接</span><br><span class="line">        max-wait: -1ms  #连接等待时间</span><br></pre></td></tr></table></figure><h4 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h4><p><img src="/%5Cimg%5Cimage-20231220230518824.png" alt="image-20231220230518824"></p><h4 id="序列化（两种方式）"><a href="#序列化（两种方式）" class="headerlink" title="序列化（两种方式）"></a>序列化（两种方式）</h4><p><img src="/%5Cimg%5Cimage-20231220232546444.png" alt="image-20231220232546444"></p><h5 id="自动序列化"><a href="#自动序列化" class="headerlink" title="自动序列化"></a>自动序列化</h5><p>使用序列化工具类</p><p>优点：方便使用，提升开发效率</p><p>缺点：占用内存较大，因为返回的json字符串中有字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqh.test_springredis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -----类注释信息-----</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @作者：Luo Qi Hang</span></span><br><span class="line"><span class="comment"> * @类名：RedisConfig</span></span><br><span class="line"><span class="comment"> * @时间：2023/12/20 23:44</span></span><br><span class="line"><span class="comment"> * @类注释:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写我们自己的配置redisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JSON序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jsonRedisSerializer=<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        ObjectMapper objectMapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer=<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//key和hash的key都采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//value和hash的value都采用jackson的序列化方式</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="手动序列化"><a href="#手动序列化" class="headerlink" title="手动序列化"></a>手动序列化</h5><p>优点：json中没有字节码，节省内存空间</p><p>缺点：麻烦，每次存数据的时候都需要序列化，读取也是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*      //方法注释信息....</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Author</span>：Luo Qi Hang</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Date</span>：2023/12/21 10:15</span></span><br><span class="line"><span class="comment">*@方法注释:手动序列化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">manualSerialization</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lqh&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    <span class="comment">//手动序列化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;User&quot;</span>,json);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">user1</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">    <span class="comment">//手动反序列化</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> objectMapper.readValue(user1, User.class);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、实战"><a href="#三、实战" class="headerlink" title="三、实战"></a>三、实战</h2><p>黑马点评</p><h4 id="拦截之前先想有什么需要拦截："><a href="#拦截之前先想有什么需要拦截：" class="headerlink" title="拦截之前先想有什么需要拦截："></a>拦截之前先想有什么需要拦截：</h4><p>需要<strong>权限管理</strong>或者对<strong>用户进行校验</strong>的都需要拦截。 </p><h4 id="集群服务器，session不共享的问题："><a href="#集群服务器，session不共享的问题：" class="headerlink" title="集群服务器，session不共享的问题："></a>集群服务器，session不共享的问题：</h4><p>session拷贝（浪费内存空间;而且数据通信之间会有 延迟，导致数据不一致）。</p><h4 id="通过Redis缓存提升查询的效率"><a href="#通过Redis缓存提升查询的效率" class="headerlink" title="通过Redis缓存提升查询的效率"></a>通过Redis缓存提升查询的效率</h4><p>前端数据传递到Redis缓存中，判定有没有击中（缓存中有没有指定的数据），没有击中就进而去数据库中查询数据，找到了就写入到Redis缓存中，没找到就返回404。</p><p>这有一个问题的衍生，那就是如何保证数据的一致性。数据库中删掉或者更新的数据，redis缓存中怎么保证一致。</p><h4 id="缓存更新策略（保证一致性）"><a href="#缓存更新策略（保证一致性）" class="headerlink" title="缓存更新策略（保证一致性）"></a>缓存更新策略（保证一致性）</h4><p><img src="/%5Cimg%5Cimage-20231223145441530.png" alt="image-20231223145441530"></p><h5 id="主动更新"><a href="#主动更新" class="headerlink" title="主动更新"></a>主动更新</h5><p><img src="/%5Cimg%5Cimage-20231223150454622.png" alt="image-20231223150454622"></p><p><img src="/%5Cimg%5Cimage-20231223152612105.png" alt="image-20231223152612105"></p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>用户不断请求不存在的数据。</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p><img src="/%5Cimg%5Cimage-20231223164911577.png" alt="image-20231223164911577"></p><p>常用的是：</p><p><strong>空对象</strong>与<strong>布隆过滤器</strong></p><p>空对象会造成额外的内存消耗，</p><p>Redis中的布隆过滤器底层是<strong>一个大型位数组（二进制数组）+多个无偏hash函数。</strong></p><p><strong>布隆过滤器占用内存少的原因</strong>：</p><p>当要判断数据是否存在的时候，并不是把数据存到布隆过滤器中，而是将数据库中的数据通过某一种哈希算法计算出哈希值，将哈希值转为二进制位存到byte数组中，然后我们判断数据是否存在的时候，其实就是判断数组中对应位置是0或者是1。</p><p>布隆过滤器中不存在的数据一定不存在，但存在的数据不一定存在。所以还是可能会缓存穿透。</p><p><img src="/%5Cimg%5Cimage-20231223162043953.png" alt="image-20231223162043953"></p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>就是Redis服务死了，或者大量的缓存同时失效。导致大量请求直接查询到数据库。</p><h5 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h5><p><img src="/%5Cimg%5Cimage-20231223170239492.png" alt="image-20231223170239492"></p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>就是热点Key在某一时段被高并发访问（或者突然过期），在此段时间中大量请求直接访问到数据库。热点Key的重建时间还较长的情况下。</p><p>死锁：A线程与B线程互相索求资源，而A索求的资源被B锁住了，B索求的A资源被A锁住了。导致永久等待也就成了死锁。</p><h5 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h5><p>互斥锁和逻辑过期</p><p><img src="/%5Cimg%5Cimage-20231223183036926.png" alt="image-20231223183036926"></p><h4 id="封装Redis工具类"><a href="#封装Redis工具类" class="headerlink" title="封装Redis工具类"></a>封装Redis工具类</h4><p>逻辑过期解决缓存击穿的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.存在，写入redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用方法（传递的参数）:缓存的K，数据id，数据类型，查询方法，过期时间，时间单位（这里设置的是秒）</p><p><img src="/%5Cimg%5Cimage-20231224103807952.png" alt="image-20231224103807952"></p><h4 id="Redis实现全局唯一ID"><a href="#Redis实现全局唯一ID" class="headerlink" title="Redis实现全局唯一ID"></a>Redis实现全局唯一ID</h4><p>（优惠券秒杀下单，个人理解是抢购）</p><p>Redis自增ID策略：</p><p>每天一个Key的意义在于便于统计订单</p><p>ID：<strong>时间戳</strong>+<strong>计数器</strong></p><p><img src="/%5Cimg%5Cimage-20231224135042899.png" alt="image-20231224135042899"></p><h4 id="解决库存超卖问题"><a href="#解决库存超卖问题" class="headerlink" title="解决库存超卖问题"></a>解决库存超卖问题</h4><p>(个人理解是多线程操作导致并发安全问题)</p><p><img src="/%5Cimg%5Cimage-20231224152615996.png" alt="image-20231224152615996"></p><p>使用乐观锁：</p><p>CAS法</p><p>在商品秒杀中判定库存是否大于0，可以解决成功率低的缺点。</p><p><img src="/%5Cimg%5Cimage-20231224152839839.png" alt="image-20231224152839839"></p><h4 id="一人一单并发安全问题"><a href="#一人一单并发安全问题" class="headerlink" title="一人一单并发安全问题"></a>一人一单并发安全问题</h4><p>一个用户只能买一件商品（茅台）</p><p>synchronized只能保证单个JVM内部的多个线程的互斥。</p><p>直接用synchronized的话，在多个JVM（多个服务器）存在的情况下，会导致锁不住的情况（因为JVM内部有个锁监视器，他只能监视同一个JVM中的锁，而不是在同一个JVM上的锁就自然锁不住了）。</p><p><img src="/%5Cimg%5Cimage-20231224170730148.png" alt="image-20231224170730148"></p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>为了解决上述问题：引入了分布式锁</p><h5 id="分布式锁的实现："><a href="#分布式锁的实现：" class="headerlink" title="分布式锁的实现："></a>分布式锁的实现：</h5><p><img src="/%5Cimg%5Cimage-20231224172026308.png" alt="image-20231224172026308"></p><h6 id="释放锁误删："><a href="#释放锁误删：" class="headerlink" title="释放锁误删："></a>释放锁误删：</h6><p>通过判断<strong>使用锁的线程</strong>和<strong>释放锁的线程</strong>是否一致解决误删问题。</p><p>上述方法还是有误删的可能性（没有保证原子性）。</p><h6 id="Lua脚本（第二种方式解决误删）"><a href="#Lua脚本（第二种方式解决误删）" class="headerlink" title="Lua脚本（第二种方式解决误删）"></a>Lua脚本（第二种方式解决误删）</h6><p>在一个脚本中编写多条Redis语句，确保多条语句的执行时的原子性。</p><p><img src="/%5Cimg%5Cimage-20231225101554466.png" alt="image-20231225101554466"></p><h5 id="通过Lua脚本实现分布式锁"><a href="#通过Lua脚本实现分布式锁" class="headerlink" title="通过Lua脚本实现分布式锁"></a><strong>通过Lua脚本实现分布式锁</strong></h5><p><img src="/%5Cimg%5Cimage-20231225105059975.png" alt="image-20231225105059975"></p><h5 id="Redisson-面试重点"><a href="#Redisson-面试重点" class="headerlink" title="Redisson(面试重点)"></a>Redisson(面试重点)</h5><p><img src="/%5Cimg%5Cimage-20231225132727205.png" alt="image-20231225132727205"></p><p><em>可重入</em>：同一个线程多次获取同一个锁。</p><p><em>可重试</em>：获取锁失败时，可以通过阻塞重试再获取锁。</p><p><em>超时释放</em>：避免死锁的方式之一，但业务执行周期长，也会导致锁释放。</p><p><em>主从一致性</em>（读写分离模式）：</p><h6 id="可重入锁的实现原理："><a href="#可重入锁的实现原理：" class="headerlink" title="可重入锁的实现原理："></a><strong>可重入锁的实现原理：</strong></h6><p>简短一点就是，通过hash结构记录线程id和重入次数。</p><ul><li><strong>获取锁：</strong></li></ul><p>先判断锁是否存在，不存在就创建锁并添加锁标识。</p><p>存在就判断锁标识是不是自己，是的话就锁计数+1，不是自己就获取锁失败。</p><ul><li><strong>释放锁：</strong></li></ul><p>判断锁是不是自己，是就锁计数-1，不是就释放失败（表示当前线程不是需要释放锁的线程）</p><p>释放锁可以通过锁计数是否为0来释放。</p><h6 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a><strong>代码实现：</strong></h6><p><img src="/%5Cimg%5Cimage-20231225145547762.png" alt="image-20231225145547762"></p><p><strong>可重试的实现原理：</strong></p><p>利用信号量和PubSub功能实现等待、唤醒、获取锁失败的重试机制。</p><p><strong>超时续约：</strong></p><p>利用看门狗（watchDog），每隔一段时间(releaseTime&#x2F;3)，重置超时时间</p><h5 id="Redisson的使用"><a href="#Redisson的使用" class="headerlink" title="Redisson的使用"></a><strong>Redisson的使用</strong></h5><ul><li>导入依赖：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--redisson--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.13.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>配置Redisson客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="comment">//配置的单节点地址，还可以添加集群地址config.useClusterServers()</span></span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建RedissonClient对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实际运用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">voucherId</span> <span class="operator">=</span> voucherOrder.getVoucherId();</span><br><span class="line">    <span class="comment">// 创建锁对象</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">    <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock();</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">        <span class="comment">// 获取锁失败，直接返回失败或者重试</span></span><br><span class="line">        log.error(<span class="string">&quot;不允许重复下单！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经购买过了</span></span><br><span class="line">            log.error(<span class="string">&quot;不允许重复下单！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            log.error(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.创建订单</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        redisLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主从一致性问题（读写分离）"><a href="#主从一致性问题（读写分离）" class="headerlink" title="主从一致性问题（读写分离）"></a>主从一致性问题（读写分离）</h5><p>通过联锁（联锁就是多个独立的锁）</p><h5 id="分布式锁的各种区别"><a href="#分布式锁的各种区别" class="headerlink" title="分布式锁的各种区别"></a>分布式锁的各种区别</h5><p><img src="/%5Cimg%5Cimage-20231225170820709.png" alt="image-20231225170820709"></p><h4 id="异步秒杀业务"><a href="#异步秒杀业务" class="headerlink" title="异步秒杀业务"></a>异步秒杀业务</h4><p>Lua脚本是..连接（Java中是+号）</p><h4 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h4><p>消息队列（消息代理）：存储和管理消息。</p><p>生产者：发送消息到消息队列。</p><p>消费者：从消息队列获取消息并处理消息。</p><h5 id="Redis提供三种不同方式来实现消息队列："><a href="#Redis提供三种不同方式来实现消息队列：" class="headerlink" title="Redis提供三种不同方式来实现消息队列："></a>Redis提供三种不同方式来实现消息队列：</h5><h6 id="list结构："><a href="#list结构：" class="headerlink" title="list结构："></a>list结构：</h6><p>模拟消息队列。</p><p><img src="/%5Cimg%5Cimage-20231225203649237.png" alt="image-20231225203649237"></p><h6 id="PubSub："><a href="#PubSub：" class="headerlink" title="PubSub："></a>PubSub：</h6><p>点对点消息模型。</p><p><img src="/%5Cimg%5Cimage-20231225204159573.png" alt="image-20231225204159573"></p><p><img src="/%5Cimg%5Cimage-20231225204554451.png" alt="image-20231225204554451"></p><h6 id="Stream："><a href="#Stream：" class="headerlink" title="Stream："></a>Stream：</h6><p>较完善的消息队列模型。</p><p>XADD：创建消息队列</p><p><img src="/%5Cimg%5Cimage-20231225210402298.png" alt="image-20231225210402298"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建名为users的队列，并向其中发送一个消息，内容是&#123;name=jack,age=<span class="number">21</span>&#125;,并使用Redis自动生成ID</span><br><span class="line">XADD users * name jack age <span class="number">21</span></span><br></pre></td></tr></table></figure><p>XREAD：读取消息队列</p><p><img src="/%5Cimg%5Cimage-20231225211504413.png" alt="image-20231225211504413"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">读取s1队列，每次读取<span class="number">1</span>条，从第<span class="number">0</span>条（也就是第一条，和数组一样）开始</span><br><span class="line">XREAD COUNT <span class="number">1</span> STREAMS s1 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>XREAD特点</p><ul><li>消息可回溯</li><li>一个消息可被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险。</li></ul><h4 id="Stream详解"><a href="#Stream详解" class="headerlink" title="Stream详解"></a>Stream详解</h4><p>消费者组：三个特点</p><ul><li>消息分流：分流给不同消费者，加快消息处理速度。</li><li>消息标示：确保每一个消息都被消费</li><li>消息确认：pending状态→存入pending-list→XACK处理消息→从pending-list移除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2023/12/20/Mybatis+MyBatisPlus/"/>
      <url>/2023/12/20/Mybatis+MyBatisPlus/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="（一）框架概念"><a href="#（一）框架概念" class="headerlink" title="（一）框架概念"></a>（一）框架概念</h3><p>框架，就是软件的半成品。完成了软件开发中通用的操作。</p><p>目的是<strong>简化开发人员在开发中的步骤</strong>，以提升开发效率。</p><h3 id="（二）常用框架"><a href="#（二）常用框架" class="headerlink" title="（二）常用框架"></a>（二）常用框架</h3><p> <img src="/%5Cimg%5Cimage-20231029195417281.png" alt="image-20231029195417281"></p><h3 id="（三）Mybatis"><a href="#（三）Mybatis" class="headerlink" title="（三）Mybatis"></a>（三）Mybatis</h3><p>映射：<strong>对象的属性</strong>与<strong>数据表列</strong>的关系</p><p><img src="/%5Cimg%5Cimage-20231029204846359.png" alt="image-20231029204846359"></p><h2 id="二、实践"><a href="#二、实践" class="headerlink" title="二、实践"></a>二、实践</h2><h3 id="（一）框架部署"><a href="#（一）框架部署" class="headerlink" title="（一）框架部署"></a>（一）框架部署</h3><h4 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//数据库  </span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">8.0</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"><span class="comment">//Mybatis</span></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">3.5</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;   </span><br><span class="line">  <span class="comment">// web依赖</span></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">2.0</span>&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、mybatis配置文件"><a href="#2、mybatis配置文件" class="headerlink" title="2、mybatis配置文件"></a>2、mybatis配置文件</h4><p><img src="/%5Cimg%5Cimage-20231029221021118.png" alt="image-20231029221021118"></p><h4 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h4><p>1.箭头指向的就是配置文件夹</p><p>2.mappers是映射文件存放的位置</p><p>通用连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3307/student?characterEncoding=utf-8</span><br><span class="line">username=root</span><br><span class="line">password=0000</span><br><span class="line">$&#123;driver&#125;</span><br><span class="line">$&#123;url&#125;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">$&#123;password&#125;</span><br></pre></td></tr></table></figure><h4 id="（1）mybatis配置"><a href="#（1）mybatis配置" class="headerlink" title="（1）mybatis配置"></a>（1）mybatis配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;!--                JDBC 驱动--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;!--                url数据库的 JDBC URL地址。--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=<span class="string">&quot;asia.xiaojiang.mybatis03.dao.UserMapper&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">            </span><br><span class="line"><span class="comment">//下面是有解释版本的，出自csdn</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 默认使用的环境 ID（比如：<span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>）</span><br><span class="line">    也就是说我们可以配置多套&lt;environment&gt;环境--&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">   每个 environment 元素定义的环境 ID</span><br><span class="line">   --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            transactionManager 事务管理器</span><br><span class="line">            type的值有JDBC和MANAGED</span><br><span class="line">                JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</span><br><span class="line">        --&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            &lt;!--</span><br><span class="line">              dataSourcedataSource 数据源 dbcp c3p0 druid</span><br><span class="line">              type=<span class="string">&quot;[UNPOOLED|POOLED|JNDI]&quot;</span></span><br><span class="line">              POOLED意思有连接池的连接</span><br><span class="line">              UNPOOLED意思没有连接池的连接</span><br><span class="line">              --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">&lt;!--                JDBC 驱动--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;!--                url数据库的 JDBC URL地址。--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--            defaultTransactionIsolationLevel – 默认的连接事务隔离级别。&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">&lt;!--            &lt;property name=<span class="string">&quot;defaultTransactionIsolationLevel&quot;</span> value=<span class="string">&quot;&quot;</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--            defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">&lt;!--            &lt;property name=<span class="string">&quot;efaultNetworkTimeout&quot;</span> value=<span class="string">&quot;&quot;</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="line">&lt;!--        &lt;mapper resource=<span class="string">&quot;asia/xiaojiang/mybatis03/dao/UserMapper.xml&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;!-- 使用完全限定资源定位符（URL）</span><br><span class="line">        不推荐使用</span><br><span class="line">        &lt;mapper url=<span class="string">&quot;E:\JetBrains\mybatis学习\Mybatis-study\Mybatis-03\src\main\java\asia\xiaojiang\mybatis03\dao\UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用映射器接口实现类的完全限定类名</span><br><span class="line">         使用注意点：</span><br><span class="line">            接口和其配置文件必须同名， 必须在同一个包下</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;mapper class=<span class="string">&quot;asia.xiaojiang.mybatis03.dao.UserMapper&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 将包内的映射器接口实现全部注册为映射器</span><br><span class="line">        使用包扫描注意点：</span><br><span class="line">            接口和其配置文件必须同名， 必须在同一个包下</span><br><span class="line">        --&gt;</span><br><span class="line">&lt;!--        &lt;<span class="keyword">package</span> name=<span class="string">&quot;asia.xiaojiang.mybatis03.dao&quot;</span>/&gt;--&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）创建映射文件（mapper）"><a href="#（2）创建映射文件（mapper）" class="headerlink" title="（2）创建映射文件（mapper）"></a>（2）创建映射文件（mapper）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;!--相当于接口的实现类--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>注：Mybatis 加载 Mapper配置的四种方式-CSDN博客](<a href="https://blog.csdn.net/bestcxx/article/details/72966768">https://blog.csdn.net/bestcxx/article/details/72966768</a>)</p><h4 id="3、mybatis使用"><a href="#3、mybatis使用" class="headerlink" title="3、mybatis使用"></a>3、mybatis使用</h4><p>（1）创建单元测试</p><p>在类名后alt+insert生成测试类</p><p>目录在test&#x2F;java包中（图中绿色的文件夹）</p><p><img src="/%5Cimg%5Cimage-20231030085046958.png" alt="image-20231030085046958"></p><h4 id="4、代码块"><a href="#4、代码块" class="headerlink" title="4、代码块"></a>4、代码块</h4><h5 id="（1）查询语句块"><a href="#（1）查询语句块" class="headerlink" title="（1）查询语句块"></a>（1）查询语句块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;Customize&quot;</span> type=<span class="string">&quot;com.lqh.pojo.Student&quot;</span>&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;stu_num&quot;</span> property=<span class="string">&quot;stuNum&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;stu_name&quot;</span> property=<span class="string">&quot;stuName&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;stu_gender&quot;</span> property=<span class="string">&quot;stuGender&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;stu_age&quot;</span> property=<span class="string">&quot;stuAge&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">        &lt;select id=<span class="string">&quot;listStudent&quot;</span> resultMap=<span class="string">&quot;Customize&quot;</span>&gt;</span><br><span class="line">            select sid, stu_num,stu_name,stu_gender,stu_age</span><br><span class="line">            from tb_students</span><br><span class="line">        &lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="5、创建会话工具类"><a href="#5、创建会话工具类" class="headerlink" title="5、创建会话工具类"></a>5、创建会话工具类</h4><p>以及自动事务管理提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqh.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -----类注释信息-----</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @作者：Luo Qi Hang</span></span><br><span class="line"><span class="comment"> * @类名：MyBatisUtil</span></span><br><span class="line"><span class="comment"> * @时间：2023/10/30 22:58</span></span><br><span class="line"><span class="comment"> * @注释:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local= <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            factory = builder.build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    目的是为了自动提交事务</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> isAutocommit)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession==<span class="literal">null</span>)&#123;</span><br><span class="line">            sqlSession = factory.openSession(isAutocommit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">T</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(c);</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6、属性配置"><a href="#6、属性配置" class="headerlink" title="6、属性配置"></a>6、属性配置</h4><p>严格按照以下顺序来配置，不然报错</p><p><img src="/%5Cimg%5Cimage-20231031163906424.png" alt="image-20231031163906424"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--导入数据库配置 --&gt;</span><br><span class="line">    &lt;properties resource=<span class="string">&quot;JDBC.properties&quot;</span>&gt;&lt;/properties&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">    &lt;!--二级缓存     --&gt;</span><br><span class="line">        &lt;setting name=<span class="string">&quot;cacheEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;!--延迟加载（懒加载）     --&gt;</span><br><span class="line">    &lt;setting name=<span class="string">&quot;lazyLoadingEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;!--    取别名的标签 （替换掉的是映射文件（mapper）中resultMap中的名字）--&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=<span class="string">&quot;com.lqh.pojo.Student&quot;</span> alias=<span class="string">&quot;Student&quot;</span>&gt;&lt;/typeAlias&gt;</span><br><span class="line">        &lt;typeAlias type=<span class="string">&quot;com.lqh.pojo.Book&quot;</span> alias=<span class="string">&quot;Book&quot;</span>&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">            &lt;!--用于配置数据库管理方式            --&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;!--                JDBC 驱动--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;mysql_driver&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;!--                url数据库的 JDBC URL地址。--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;mysql_url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;mysql_username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;mysql_password&#125;&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">&quot;mappers/StudentMapper.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="7、映射文件的含义"><a href="#7、映射文件的含义" class="headerlink" title="7、映射文件的含义"></a>7、映射文件的含义</h4><p><img src="/%5Cimg%5Cimage-20231031173054637.png" alt="image-20231031173054637"></p><h4 id="8、两种目录结构"><a href="#8、两种目录结构" class="headerlink" title="8、两种目录结构"></a>8、两种目录结构</h4><table><thead><tr><th><img src="https://img-blog.csdnimg.cn/20200502234956986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlYWxsbGxiag==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></th><th><img src="/%5Cimg%5Cimage-20231102134339532.png" alt="image-20231102134339532"></th></tr></thead></table><h3 id="（二）关系映射"><a href="#（二）关系映射" class="headerlink" title="（二）关系映射"></a>（二）关系映射</h3><p>1、一对一</p><p>2、一对多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    stus对象是List集合，需要使用collection标签--&gt;</span><br><span class="line">&lt;!--        ofType属性声明集合中元素的类型--&gt;</span><br><span class="line">&lt;collection property=&quot;stus&quot; ofType=&quot;Student&quot;&gt;</span><br><span class="line">    &lt;result column=&quot;sid&quot; property=&quot;sid&quot;/&gt;</span><br><span class="line">    &lt;result column=&quot;sname&quot; property=&quot;sname&quot;/&gt;</span><br><span class="line">    &lt;result column=&quot;sage&quot; property=&quot;sage&quot;/&gt;</span><br><span class="line">    &lt;result column=&quot;scid&quot; property=&quot;scid&quot;/&gt;</span><br><span class="line">&lt;/collection&gt;</span><br></pre></td></tr></table></figure><h3 id="（三）动态SQL"><a href="#（三）动态SQL" class="headerlink" title="（三）动态SQL"></a>（三）动态SQL</h3><h5 id="1、两种方式"><a href="#1、两种方式" class="headerlink" title="1、两种方式"></a>1、两种方式</h5><p>HashMap或者定义实体类</p><p><img src="/%5Cimg%5Cimage-20231118191227189.png" alt="image-20231118191227189"></p><h5 id="2、标签的使用"><a href="#2、标签的使用" class="headerlink" title="2、标签的使用"></a>2、标签的使用</h5><p>if、where(当内部条件成立时添加where)、trim（大多用来排序）、foreach(遍历)</p><p>if标签</p><p><img src="/%5Cimg%5Cimage-20231118200117446.png" alt="image-20231118200117446"></p><p><strong>标签的属性</strong></p><h5 id="3、-和-的差别"><a href="#3、-和-的差别" class="headerlink" title="3、#和$的差别"></a>3、#和$的差别</h5><p><img src="/%5Cimg%5Cimage-20231118214544097.png" alt="image-20231118214544097"></p><h3 id="（四）缓存机制"><a href="#（四）缓存机制" class="headerlink" title="（四）缓存机制"></a>（四）缓存机制</h3><p><img src="/%5Cimg%5Cimage-20231119145830636.png" alt="image-20231119145830636"></p><h5 id="1、一级缓存"><a href="#1、一级缓存" class="headerlink" title="1、一级缓存"></a>1、一级缓存</h5><p><img src="/%5Cimg%5Cimage-20231119160110574.png" alt="image-20231119160110574"></p><h5 id="2、一级缓存存在的问题："><a href="#2、一级缓存存在的问题：" class="headerlink" title="2、一级缓存存在的问题："></a>2、一级缓存存在的问题：</h5><p><img src="/%5Cimg%5Cimage-20231119192230965.png" alt="image-20231119192230965"></p><p>修改&#x2F;删除之后查询还是变动之前的值，这是因为sqlsession对象在创建时使用了单例模式，导致先查询是一个线程，再修改是一个线程，所以修改操作不会导致缓存失效。就出现了问题</p><h5 id="3、二级缓存"><a href="#3、二级缓存" class="headerlink" title="3、二级缓存"></a>3、二级缓存</h5><p><strong>面试重点：</strong></p><p><img src="/%5Cimg%5Cimage-20231119194736354.png" alt="image-20231119194736354"></p><h5 id="4、延迟加载"><a href="#4、延迟加载" class="headerlink" title="4、延迟加载"></a>4、延迟加载</h5><p><img src="/%5Cimg%5Cimage-20231119210654515.png" alt="image-20231119210654515"></p><h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><p><a href="https://blog.csdn.net/zmbwcx/article/details/134018657">MyBatisPlus的使用【详细】-CSDN博客</a></p><h2 id="一、初步"><a href="#一、初步" class="headerlink" title="一、初步"></a>一、初步</h2><p>注：只适合单表的CRUD</p><p>不需要编写mapper.xml文件</p><p><img src="/%5Cimg%5Cimage-20231212151644961.png" alt="image-20231212151644961"></p><p>2、只需要在Mapper接口继承BaseMapper<T></p><h2 id="二、实践-1"><a href="#二、实践-1" class="headerlink" title="二、实践"></a>二、实践</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h4><p>类名要与数据表相对应,不对应就用注解声明</p><p><img src="/%5Cimg%5Cimage-20231212153227821.png" alt="image-20231212153227821"></p><h4 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h4><h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><p><img src="/%5Cimg%5Cimage-20231212153858290.png" alt="image-20231212153858290"></p><h3 id="使用注解的场景"><a href="#使用注解的场景" class="headerlink" title="使用注解的场景"></a>使用注解的场景</h3><p><img src="/%5Cimg%5Cimage-20231212154405925.png" alt="image-20231212154405925"></p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p><strong>注解的优先级大于全局配置</strong></p><p><img src="/%5Cimg%5Cimage-20231212154716571.png" alt="image-20231212154716571"></p><h3 id="条件构造器（Where）"><a href="#条件构造器（Where）" class="headerlink" title="条件构造器（Where）"></a>条件构造器（Where）</h3><p><img src="/%5Cimg%5Cimage-20231212162224080.png" alt="image-20231212162224080"></p><p>1、QueryWrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较运算符</span></span><br><span class="line"><span class="comment">lt：less than 小于</span></span><br><span class="line"><span class="comment">le：less than or equal to 小于等于</span></span><br><span class="line"><span class="comment">eq：equal to 等于</span></span><br><span class="line"><span class="comment">ne：not equal to 不等于</span></span><br><span class="line"><span class="comment">ge：greater than or equal to 大于等于</span></span><br><span class="line"><span class="comment">gt：greater than 大于 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        条件构造器，设定条件，数据需要是数据库中的字段</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">                .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;balance&quot;</span>,<span class="number">1000</span>);<span class="comment">//首行有解释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        条件查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>2、LambdaQueryWrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        数据是通过反射获取的，类中的属性 </span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .select(User::getId,User::getUsername,User::getInfo,User::getBalance)</span><br><span class="line">                .like(User::getUsername,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">                .ge(User::getBalance,<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//        条件查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h3><p><img src="/%5Cimg%5Cimage-20231212195421646.png" alt="image-20231212195421646"></p><h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p><img src="/%5Cimg%5Cimage-20231212203735578.png" alt="image-20231212203735578"></p><h3 id="开发接口"><a href="#开发接口" class="headerlink" title="开发接口"></a>开发接口</h3><p><img src="/%5Cimg%5Cimage-20231212205259082.png" alt="image-20231212205259082"></p><h3 id="Lambda方法"><a href="#Lambda方法" class="headerlink" title="Lambda方法"></a>Lambda方法</h3><p>常用于复杂的SQL语句</p><p>执行流程：</p><p>1.重写实现类中的方法</p><p><img src="/%5Cimg%5Cimage-20231213094443083.png" alt="image-20231213094443083"></p><p><img src="/%5Cimg%5Cimage-20231213094415850.png" alt="image-20231213094415850"></p><p>2.在需要的地直接调用该实现类方法即可</p><p>3.为解决数据并行的问题，添加了一个乐观锁</p><p>乐观锁：在提交数据之前，比较其一致性。（防止在一次事务中对同个记录操作多次）</p><ol><li><strong>乐观锁</strong>：<ul><li><strong>基本概念</strong>：乐观锁假设多个事务在大多数时间不会彼此冲突，因此它允许多个事务同时进行读写操作。在事务提交时，才会检查是否发生了冲突。</li><li><strong>实现方式</strong>：通常通过版本号或时间戳实现。在读取数据时，会同时获取这个版本号。在更新时，会检查版本号是否发生变化。如果没有变化，则更新成功；如果变化了，表明其他事务已经修改了数据，当前事务通常会回滚。</li><li><strong>应用场景</strong>：适用于读操作多、写操作少的环境。</li></ul></li><li><strong>悲观锁</strong>：<ul><li><strong>基本概念</strong>：悲观锁假设多个事务之间很可能发生冲突，因此在数据处理过程中，会先锁定数据，避免其他事务进行读写操作。</li><li><strong>实现方式</strong>：数据库的行锁或表锁等。当一个事务在对某一数据行进行操作时，会对这行数据加锁，其他事务必须等待这个锁释放后才能进行操作。</li><li><strong>应用场景</strong>：适用于写操作多、读写冲突概率高的环境。</li></ul></li></ol><p>总结来说，乐观锁适用于读多写少的场景，它通过在事务提交时检查冲突来减少锁的使用；而悲观锁适用于写操作较多的场景，它通过提前锁定数据避免冲突。两者的选择依赖于具体应用的业务特点和数据访问模式。</p><h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><p>由MySQL提供</p><ol><li>在.yml或.properties配置文件中的数据库地址后面添加</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewriteBatchedStatements=<span class="literal">true</span></span><br><span class="line">url: jdbc:mysql:<span class="comment">//localhost:3307/test_mybatisplus?serverTimeZone=GMT%2B8&amp;rewriteBatchedStatements=true</span></span><br></pre></td></tr></table></figure><p>实例</p><p><img src="/%5Cimg%5Cimage-20231213103526279.png" alt="image-20231213103526279"></p><h2 id="三、额外功能"><a href="#三、额外功能" class="headerlink" title="三、额外功能"></a>三、额外功能</h2><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><p>IDEA插件中的</p><p><img src="/%5Cimg%5Cimage-20231212212340681.png" alt="image-20231212212340681"></p><p>使用方式</p><p><img src="/%5Cimg%5Cimage-20231212213051636.png" alt="image-20231212213051636"></p><h3 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h3><p><a href="https://blog.csdn.net/zmbwcx/article/details/134018657">MyBatisPlus的使用【详细】-CSDN博客</a></p><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p><img src="/%5Cimg%5Cimage-20231213111109694.png" alt="image-20231213111109694"></p><p>缺点：</p><p><img src="/%5Cimg%5Cimage-20231213111411689.png" alt="image-20231213111411689"></p><h3 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h3><p>目的是为了见名知意。</p><p><img src="/%5Cimg%5Cimage-20231213113036287.png" alt="image-20231213113036287"></p><h3 id="JSON处理器"><a href="#JSON处理器" class="headerlink" title="JSON处理器"></a>JSON处理器</h3><p>只需将json数据的 属性声明为json类型就行了</p><p><img src="/%5Cimg%5Cimage-20231213124226043.png" alt="image-20231213124226043"></p><h3 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h3><p>分页插件（可以用实体类指定排序的字段）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术笔记</title>
      <link href="/2023/12/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/12/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h1><p>学了什么：局部变量的作用域、数组的初始化、数组的增删改查、数组的扩容、数组的排序（冒泡）java.util,Arrays工具类。</p><p>类 。</p><p>对象</p><p>待学：数组拷贝（Arraycopy）</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>使用前必须初始化，作用域内不能重名</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组也是一种数据类型</p><p>默认值:  37.40</p><p>float：0.0</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><h5 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 变量名称 = new 数据类型 [长度]</span><br></pre></td></tr></table></figure><h5 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 变量名 = new 数据类型 [] &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="静态初始化省略格式"><a href="#静态初始化省略格式" class="headerlink" title="静态初始化省略格式"></a>静态初始化省略格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 变量名 = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>属性没有括号()</p><p>方法才有括号()</p><p>.length  求数组长度</p><p>数组长度定义后不可变</p><h4 id="模块化思维"><a href="#模块化思维" class="headerlink" title="模块化思维"></a>模块化思维</h4><p>自顶向下，逐步求精</p><h4 id="增强for循环（遍历）"><a href="#增强for循环（遍历）" class="headerlink" title="增强for循环（遍历）"></a>增强for循环（遍历）</h4><h4 id="栈，堆，常量池"><a href="#栈，堆，常量池" class="headerlink" title="栈，堆，常量池"></a>栈，堆，常量池</h4><p>栈：先进后出，所有方法都会进栈</p><p>堆：先入先出，实例化对象进堆。 </p><p>常量池：</p><h4 id="排序法"><a href="#排序法" class="headerlink" title="排序法"></a>排序法</h4><p>冒泡</p><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>注：需要有序数组才能查找</p><p>(-(point) - 1).</p><p>&#x3D;&#x3D;和equals</p><p>&#x3D;&#x3D;:比较两个对象的地址是否相同</p><p>equals():比较当前对象的值是否和另一字符串一致</p><p>equalsignorecase()：比较2个字符串是否一致，不管大小写；</p><h4 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h4><p>contains(): 属于</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>​容器类</p><p>​作为成员变量使用</p><p>​线程安全，但性能第二。          </p><p>increase()</p><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>​作为局部变量使用</p><p>​线程不安全，但性能最高<br>性能：  String&lt;StringBuffer&lt;StringBuilder</p><h1 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h1><p>9.25开始设置private访问控制修饰符</p><p>本周学习了：类和对象、封装、构造方法、this、showinfo（个人理解就是toString）、方法重载、对象数组、图书管理系统、<strong>官方说法：for（初始表达式，条件表达式，增量表达式）</strong>、对象内存、static、继承、多态</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>属性：名词，描述,蓝图。</p><p>行为： 动词，所做的事。</p><p><strong>类是一个抽象化的</strong>东西，可以视作一个模版</p><p>对象是具体实例化的。</p><p>高内聚：高度的相关性（单一职责）</p><p>低耦合:    抽象，高灵活。</p><p>类中变量叫成员变量（全局变量）</p><p>由类创建具体化的叫做对象。</p><p>一个类可以创建多个对象。</p><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><p>类、对象（实例）、方法、消息（方法调用）、封装、继承、多态</p><h6 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h6><p>隐藏类的实现细节。</p><p>访问控制修饰符（公共的public、私有的private、受保护的protected、无）</p><p>该隐藏隐藏 （private访问控制修饰符）</p><p>该暴露暴露 （set和get方法）</p><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p>减少代码冗余。</p><h6 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h6><p>同一个行为有不同的结果。</p><p>类型格式:</p><p>父类数据类型 变量名&#x3D; new 子类; （这种调用不到子类重写的方法）</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>1.默认情况编译器会赠送一个<strong>无参构造方法</strong></p><p>2.当用户<strong>自定义了构造方法</strong>后，编译器就不会送构造方法了。</p><p>3.构造方法名必须和类同名</p><p>4.没有返回值类型，包括void。</p><p>5.构造方法不能单独调用，需要用this（this必须位于第一行）eg:com.stx.training.oop_Demo2</p><p>6.子类显式调用第一句必须是调用父类的构造方法，如果父类具有无参构造方法，那就是隐式调用(可以省略super)。</p><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>两个要点：</p><p>1.方法的名称相同</p><p>2.参数个数不同 or 参数类型不同</p><h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>子类覆盖父类的方法。</p><h4 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h4><p>静态和类相关 （每个对象都有的行为，共享的）</p><p>非静态是和对象相关</p><p>方法区：类加载信息、常量池、静态域</p><p>静态和非静态区分开</p><h1 id="第六周"><a href="#第六周" class="headerlink" title="第六周"></a>第六周</h1><p>学到的东西：多态详解、Object类、异常、数据库的初步了解、DBeaver、SQL语句</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><strong>单一职责</strong></p><p>​ER图：</p><p>​每个实体集转化为一张表</p><p>​多值属性（爱好）和实体的主标识属性（学号）组合转化为一张表</p><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p><a href="https://zhuanlan.zhihu.com/p/590135927">Mysql - 什么是三大范式（通俗详解） - 知乎 (zhihu.com)</a></p><h4 id="第一范式（1NF）："><a href="#第一范式（1NF）：" class="headerlink" title="第一范式（1NF）："></a>第一范式（1NF）：</h4><p>​表中字段的数据，不可以再拆分。</p><h4 id="第二范式（2NF）："><a href="#第二范式（2NF）：" class="headerlink" title="第二范式（2NF）："></a>第二范式（2NF）：</h4><p>​不存在非关键字段对任一候选关键字段的部分函数依赖。</p><h4 id="第三范式（3NF）："><a href="#第三范式（3NF）：" class="headerlink" title="第三范式（3NF）："></a>第三范式（3NF）：</h4><p>​没有非关键字段传递依赖主键</p><p>​非关键字段只依赖于主键</p><h3 id="Orecal"><a href="#Orecal" class="headerlink" title="Orecal"></a>Orecal</h3><p>XE：简洁版</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h1 id="书写顺序SFWGHO"><a href="#书写顺序SFWGHO" class="headerlink" title="书写顺序SFWGHO"></a>书写顺序SFWGHO</h1><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE tablespace stx_25</span><br><span class="line">datafile &#x27;E:\hc\Oracle\dbf\stx.dbf&#x27;</span><br><span class="line">SIZE 128m</span><br><span class="line">autoextend ON</span><br><span class="line">NEXT 16m;</span><br></pre></td></tr></table></figure><h5 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER lqh//用户名</span><br><span class="line">IDENTIFIED BY 0000//密码</span><br><span class="line">DEFAULT tablespace stx_25;</span><br><span class="line">授权超级管理员</span><br><span class="line">GRANT dba TO lqh  </span><br></pre></td></tr></table></figure><h5 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3.创建表"></a>3.创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">stu_id varchar2(<span class="number">32</span>),</span><br><span class="line">stu_name varchar2(<span class="number">16</span>),</span><br><span class="line">college varchar2(<span class="number">128</span>),</span><br><span class="line">major varchar2(<span class="number">128</span>),</span><br><span class="line">mentor varchar2(<span class="number">16</span>),</span><br><span class="line">province varchar2(<span class="number">64</span>),</span><br><span class="line">score NUMBER</span><br><span class="line">)</span><br><span class="line">tablespace stx_25;</span><br></pre></td></tr></table></figure><h5 id="4-插入数据"><a href="#4-插入数据" class="headerlink" title="4.插入数据"></a>4.插入数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,列<span class="number">2</span>) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h5 id="5-修改数据"><a href="#5-修改数据" class="headerlink" title="5.修改数据"></a>5.修改数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 </span><br><span class="line"><span class="keyword">SET</span> 列<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>，列<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure><h5 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure><h5 id="7-联表查询"><a href="#7-联表查询" class="headerlink" title="7.联表查询"></a>7.联表查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT stu_name,colg_name</span><br><span class="line">FROM t_student stu,t_college colg</span><br><span class="line">WHERE stu.COLLEGE = colg.colg_code;</span><br></pre></td></tr></table></figure><h1 id="第七周"><a href="#第七周" class="headerlink" title="第七周"></a>第七周</h1><p>学了的东西：联表查询、内连接、JDBC</p><h2 id="（一）、数据库"><a href="#（一）、数据库" class="headerlink" title="（一）、数据库"></a>（一）、数据库</h2><p>联表查询</p><p>内连接、外连接。</p><p>DML（Data Manipulation Language：数据操作语言）:增删改</p><p>DQL（Data Query Language：数据查询语言）：查</p><h2 id="（二）、JDBC"><a href="#（二）、JDBC" class="headerlink" title="（二）、JDBC"></a>（二）、JDBC</h2><p>多态</p><h4 id="1、4个步骤"><a href="#1、4个步骤" class="headerlink" title="1、4个步骤"></a>1、4个步骤</h4><p>DriverManager: 加载数据库驱动（java3之后就可不用了，默认就加载好的）</p><p>Connection:连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@localhost:1521:xe&quot;</span>, <span class="string">&quot;用户名&quot;</span>, <span class="string">&quot;密码&quot;</span>);</span><br></pre></td></tr></table></figure><p>Statement:执行对象（开发中并不会用，有SQL注入的风险）</p><p>PrepareStatement:安全的执行对象</p><p>ResultSet:接收执行结果集</p><h4 id="2、字符串连接"><a href="#2、字符串连接" class="headerlink" title="2、字符串连接"></a>2、字符串连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        字符串连接方法：三种</span><br><span class="line">            * */</span><br><span class="line">            //1.第一种：字符串连接</span><br><span class="line">//            String sql = &quot;select * from goods where name like &#x27;&quot;+&quot;%&quot; + goodsName + &quot;%&quot;+&quot;&#x27;&quot;;</span><br><span class="line">            //2.第二种：concat连接函数</span><br><span class="line">//            String sql = &quot;select * from goods where name like CONCAT(&#x27;%&#x27;,?,&#x27;%&#x27;)&quot;;</span><br><span class="line">//            PreparedStatement statement = conn.prepareStatement(sql);</span><br><span class="line">//            statement.setString(1,goodsName);</span><br><span class="line">            //3.第三种:字符串格式化</span><br><span class="line">            String sql = &quot;select * from goods where name like &#x27;%%s%&#x27;&quot;;</span><br><span class="line">            String s = String.format(sql, goodsName);</span><br></pre></td></tr></table></figure><p>分层思想：</p><p>1.用户输入</p><p>2.业务逻辑</p><p>3.数据存储（DAO）：对数据库增删改查</p><table><thead><tr><th>工具</th><th>名</th><th></th></tr></thead><tbody><tr><td><strong>ER</strong></td><td>实体集</td><td>实体</td></tr><tr><td><strong>数据库</strong></td><td>表</td><td>行</td></tr><tr><td><strong>Java</strong></td><td>类</td><td>对象</td></tr></tbody></table><p>DAO(数据分析层)</p><p>周三：</p><h1 id="项目一："><a href="#项目一：" class="headerlink" title="项目一："></a>项目一：</h1><p>​可以不用加多的功能，更多注意细化，从客户角度出发，思考客户会怎么使用，找漏洞。</p><p>​类的单一职责划分应该更清晰细化</p><h1 id="职位："><a href="#职位：" class="headerlink" title="职位："></a>职位：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">测试</span><br><span class="line">   对业务熟悉之后</span><br><span class="line">   编写脚本实现自动化 </span><br><span class="line">      1.性能测试（模拟多个用户）</span><br><span class="line">      2.自动化测试</span><br><span class="line">      3.测试+开发</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Double System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用代码</title>
      <link href="/2023/12/12/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/12/12/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Windos"><a href="#Windos" class="headerlink" title="Windos"></a>Windos</h1><h2 id="运行窗口"><a href="#运行窗口" class="headerlink" title="运行窗口"></a>运行窗口</h2><p>sysdm.cpl查看系统属性（环境配置）</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc delete mysql 卸载mysql服务</span><br><span class="line">mysqld -install安装mysql服务器</span><br></pre></td></tr></table></figure><h1 id="BE"><a href="#BE" class="headerlink" title="BE"></a>BE</h1><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus数据库，启动！</span><br><span class="line"></span><br><span class="line">select  instance_name from v$instance;查看实例名</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.containsKey(); //检查 hashMap 中是否存在指定的 key 对应的映射关系</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="pom-xml常用依赖"><a href="#pom-xml常用依赖" class="headerlink" title="pom.xml常用依赖"></a>pom.xml常用依赖</h3><h4 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">8.0</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;   </span><br></pre></td></tr></table></figure><h4 id="2-mybatis"><a href="#2-mybatis" class="headerlink" title="2.mybatis"></a>2.mybatis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">3.5</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="3-lombok"><a href="#3-lombok" class="headerlink" title="3.lombok"></a>3.lombok</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.18</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="整合依赖（自用）"><a href="#整合依赖（自用）" class="headerlink" title="整合依赖（自用）"></a>整合依赖（自用）</h3><h4 id="1-SpringMVC"><a href="#1-SpringMVC" class="headerlink" title="1.SpringMVC"></a>1.SpringMVC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">       &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">       &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">       &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">       &lt;spring.version&gt;<span class="number">5.2</span><span class="number">.23</span>.RELEASE&lt;/spring.version&gt;</span><br><span class="line">   &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.18</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">2.14</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">2.4</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.4</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="2-Spring和MyBatis"><a href="#2-Spring和MyBatis" class="headerlink" title="2.Spring和MyBatis"></a>2.Spring和MyBatis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!--MyBatis的依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">8.0</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.5</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.0</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;!--Spring和SpringMVC的依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--SpringMVC的部分依赖--&gt; </span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.18</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.14</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.4</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.4</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">&lt;!--mybatis和spring建立的桥梁--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.0</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;!--德鲁伊依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.18</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.13</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h1 id="FE"><a href="#FE" class="headerlink" title="FE"></a>FE</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>‘<p>‘ :段落元素</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java模板 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BE问题汇总</title>
      <link href="/2023/12/10/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2023/12/10/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><p>笔试：</p><p>​多线程，锁，String的比较，注解</p><p>​</p><h2 id="0-操作系统"><a href="#0-操作系统" class="headerlink" title="0.操作系统"></a>0.操作系统</h2><h3 id="1-windows"><a href="#1-windows" class="headerlink" title="(1).windows"></a>(1).windows</h3><h4 id="问题1：端口被占用"><a href="#问题1：端口被占用" class="headerlink" title="问题1：端口被占用"></a>问题1：端口被占用</h4><p>解决办法：</p><p><a href="https://blog.csdn.net/qiankui/article/details/104749803">Windows关闭指定端口命令_停止30000接口-CSDN博客</a></p><h2 id="1-Java"><a href="#1-Java" class="headerlink" title="1.Java"></a>1.Java</h2><p>cmd测试环境变量没有输出，原因在于path没有配置jdk路径</p><h3 id="没有熟悉的点："><a href="#没有熟悉的点：" class="headerlink" title="没有熟悉的点："></a>没有熟悉的点：</h3><p>反射，泛型，Arraylist</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>设置field.set方法时：参数传入错误，原因在于第一个形参传错类型。</p><p>eg:Study_18_FanShe.Demo2_Field</p><h4 id="问题1：非法参数"><a href="#问题1：非法参数" class="headerlink" title="问题1：非法参数"></a>问题1：非法参数</h4><p>IllegalArgumentException</p><p>原因在于：导入的是Teacher类，而save方法中我传入的student对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;盖伦&quot;</span>, <span class="number">23</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">180</span>, <span class="string">&quot;转圈&quot;</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teachar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;菲奥娜&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        save(student);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取变量名的值对象方法 (需要更改传递进来的对象)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Class S=Class.forName(<span class="string">&quot;Study_18_FanShe.HeiMaPro.FanShe.Savainfo.Teacher&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj);</span><br></pre></td></tr></table></figure><p>解决方法：将传入的对象改为同类（Teachar）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;盖伦&quot;</span>, <span class="number">23</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">180</span>, <span class="string">&quot;转圈&quot;</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teachar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;菲奥娜&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        save(teachar);<span class="comment">//改错的地方</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取变量名的值对象方法 (需要更改传递进来的对象)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Class S=Class.forName(<span class="string">&quot;Study_18_FanShe.HeiMaPro.FanShe.Savainfo.Teacher&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj);</span><br></pre></td></tr></table></figure><h2 id="2-Oracle"><a href="#2-Oracle" class="headerlink" title="2.Oracle"></a>2.Oracle</h2><h4 id="问题1-用户名-x2F-密码忘记了"><a href="#问题1-用户名-x2F-密码忘记了" class="headerlink" title="问题1:用户名&#x2F;密码忘记了"></a>问题1:用户名&#x2F;密码忘记了</h4><p>解决方法：使用超级用户 修改密码&#x2F;查看用户名</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">登录超级用户:sysdba</span><br><span class="line">sqlplus / as sysdba </span><br><span class="line">查看当前所有用户名称</span><br><span class="line">select username from dba_users</span><br><span class="line">解除锁定 </span><br><span class="line">alter user 用户名 account unlock; </span><br><span class="line">修改密码</span><br><span class="line">alter user 用户名  identified by 修改后的密码; </span><br></pre></td></tr></table></figure><h4 id="问题2：端口被占用"><a href="#问题2：端口被占用" class="headerlink" title="问题2：端口被占用"></a>问题2：端口被占用</h4><p>解决方法：更改端口名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查询当前端口：</span><br><span class="line">select dbms_xdb.gethttpport() from dual;</span><br><span class="line"></span><br><span class="line">-- 设置新端口：</span><br><span class="line">exec dbms_xdb.sethttpport(9999); -- 将新端口设为9999</span><br><span class="line"></span><br><span class="line">-- 设置后重启OracleXETNSListener、OracleServiceXE服务</span><br></pre></td></tr></table></figure><h2 id="3-JDBC"><a href="#3-JDBC" class="headerlink" title="3.JDBC"></a>3.JDBC</h2><h4 id="问题1：insert语法错误"><a href="#问题1：insert语法错误" class="headerlink" title="问题1：insert语法错误"></a>问题1：insert语法错误</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql=&quot;insert into tb_brand (brand_name,company_name,ordered, description,status) ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.sql.SQLException: Parameter index out of range (1 &gt; number of parameters</span><br></pre></td></tr></table></figure><p>原因：索引越界，因为SQL语法输入错误</p><p>改正：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql=&quot;insert into tb_brand (brand_name,company_name,ordered, description,status) values (?,?,?,?,?)&quot;;</span><br></pre></td></tr></table></figure><h4 id="问题2：update-语法错误"><a href="#问题2：update-语法错误" class="headerlink" title="问题2：update 语法错误"></a>问题2：update 语法错误</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;update tb_brand set brand_name=?, company_name=?, ordered = ?, description = ?, status = ? ,where id= ? &quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near </span><br></pre></td></tr></table></figure><p>原因：where前有逗号， 导致将where识别为字段名</p><p>改正：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;update tb_brand set brand_name=?, company_name=?, ordered = ?, description = ?, status = ? where id= ? &quot;;</span><br></pre></td></tr></table></figure><h4 id="问题3：Druid连接池时错误"><a href="#问题3：Druid连接池时错误" class="headerlink" title="问题3：Druid连接池时错误"></a>问题3：Druid连接池时错误</h4><p><strong>严重错误</strong></p><p>实现通用查询失败。</p><p>解决方法：</p><p>待定</p><h2 id="4-Tomcat"><a href="#4-Tomcat" class="headerlink" title="4.Tomcat"></a>4.Tomcat</h2><h4 id="问题1：登录问题"><a href="#问题1：登录问题" class="headerlink" title="问题1：登录问题"></a>问题1：登录问题</h4><p>登录localhost:8080时登录不了</p><p>因为Oracle和Tomcat的端口冲突</p><p>只需把Oracle或者Tomcat端口改了就行</p><h4 id="问题2：版本问题"><a href="#问题2：版本问题" class="headerlink" title="问题2：版本问题"></a>问题2：版本问题</h4><p>关于idea2023.2版本之后的添加框架支持找不到</p><p>选中文件夹后双击shift搜索</p><p><img src="/%5Cimg%5Cimage-20231007102421517.png" alt="image-20231007102421517"></p><p>如果没有web选项，那一定是你没删除干净之前的web。</p><p><img src="/%5Cimg%5Cimage-20231007102521827.png" alt="image-20231007102521827"></p><p>只需要把web相关的都删除即可。（使用F4快捷键打开项目结构）</p><p><img src="/%5Cimg%5Cimage-20231007102633217.png" alt="image-20231007102633217"></p><h4 id="问题3：Druid出现异常"><a href="#问题3：Druid出现异常" class="headerlink" title="问题3：Druid出现异常"></a>问题3：Druid出现异常</h4><p>在运行Druid连接对象池时。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.ServletException: Servlet执行抛出一个异常</span><br><span class="line">java.lang.NoClassDefFoundError: com/alibaba/druid/pool/DruidDataSource</span><br><span class="line">java.lang.ClassNotFoundException: com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure><p>问题原因：没有将Druid的jar包放入Tomcat的lib文件夹，导致Tomcat找不到文件。</p><p>解决办法：将Druid的jar包放入Tomcat的lib目录下，成功执行</p><p>注意事项：项目中添加了什么jar包，Tomcat就也要添加相应的jar包。不然报错。</p><p><img src="/%5Cimg%5Cimage-20231015130614717.png" alt="image-20231015130614717"></p><h2 id="5-Ajax"><a href="#5-Ajax" class="headerlink" title="5.Ajax"></a>5.Ajax</h2><h4 id="问题1：接收数据问题"><a href="#问题1：接收数据问题" class="headerlink" title="问题1：接收数据问题"></a>问题1：接收数据问题</h4><p>接收用户请求时获取不到值</p><p>​<img src="/%5Cimg%5Cimage-20231016215642412.png" alt="image-20231016215642412"></p><p>原因在于：连接路径错误</p><p><img src="/%5Cimg%5Cimage-20231016215724643.png" alt="image-20231016215724643"></p><p>解决办法：在编辑配置中直接复制路径</p><p><img src="/%5Cimg%5Cimage-20231016215753960.png" alt="image-20231016215753960"></p><h4 id="问题2：AJAX没有调用"><a href="#问题2：AJAX没有调用" class="headerlink" title="问题2：AJAX没有调用"></a>问题2：AJAX没有调用</h4><p>从前端传值到控制器时传递失败</p><p><img src="/%5Cimg%5Cimage-20231127141407467.png" alt="image-20231127141407467"></p><p>原因在于：JS代码是在DOM完全加载前运行的，而ID选择器没有找到元素来绑定点击事件。</p><p>解决办法：在文档加载后再绑定事件，通常这通过将代码放入 <code>$(document).ready()</code> 中完成。</p><p><img src="/%5Cimg%5Cimage-20231127141620411.png" alt="image-20231127141620411"></p><h2 id="6-Maven"><a href="#6-Maven" class="headerlink" title="6.Maven"></a>6.Maven</h2><h4 id="问题1：下载问题"><a href="#问题1：下载问题" class="headerlink" title="问题1：下载问题"></a>问题1：下载问题</h4><p>在新建项目时卡下载</p><p><img src="/%5Cimg%5Cimage-20231028204033265.png" alt="image-20231028204033265"></p><p>原因在于：</p><p>设置的路径没有生效，因为每次新建项目，之前设置的就又失效了</p><p><img src="/%5Cimg%5Cimage-20231028204142355.png" alt="image-20231028204142355"></p><p>解决办法：</p><p>直接全局设置</p><p><img src="/%5Cimg%5Cimage-20231028204332689.png" alt="image-20231028204332689"></p><h4 id="问题2：连接问题"><a href="#问题2：连接问题" class="headerlink" title="问题2：连接问题"></a>问题2：连接问题</h4><p>测试案例时出现No suitable driver</p><p><img src="/%5Cimg%5Cimage-20231029095530442.png" alt="image-20231029095530442"></p><p>原因在于：数据库的配置文件错误或者路径放错（c3p0-config.xml）</p><p><img src="/%5Cimg%5Cimage-20231029095712101.png" alt="image-20231029095712101"></p><p>解决办法：</p><p>将配置文件移至resources（<strong>用maven构建 项目时，resources 目录就是默认的classpath</strong>）</p><p><img src="/%5Cimg%5Cimage-20231029095756885.png" alt="image-20231029095756885"></p><p>成功运行</p><p><img src="/%5Cimg%5Cimage-20231029095813895.png" alt="image-20231029095813895"></p><h2 id="7-Mybatis"><a href="#7-Mybatis" class="headerlink" title="7.Mybatis"></a>7.Mybatis</h2><h4 id="问题1：执行sql语句出错"><a href="#问题1：执行sql语句出错" class="headerlink" title="问题1：执行sql语句出错"></a>问题1：执行sql语句出错</h4><p>org.apache.ibatis.builder.BuilderException: A mapper element may only specify a url, resource or class, but not more than one.</p><p><img src="/%5Cimg%5Cimage-20231030101713960.png" alt="image-20231030101713960"></p><p>原因：加载xml文件错误，这里使用了两种方式加载；导致找不到该使用哪个xml</p><p><img src="/%5Cimg%5Cimage-20231030101758140.png" alt="image-20231030101758140"></p><p>解决办法：删除其中一种方式之后成功运行</p><p><img src="/%5Cimg%5Cimage-20231030101933981.png" alt="image-20231030101933981"></p><h4 id="问题2：xml文件错误"><a href="#问题2：xml文件错误" class="headerlink" title="问题2：xml文件错误"></a>问题2：xml文件错误</h4><p>BuilderException: Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias ‘com.github.pagehelper.PageInterceptor’.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.github.pagehelper.PageInterceptor<img src="/%5Cimg%5Cimage-20231107185424269.png" alt="image-20231107185424269"></p><p>原因：和上面一样，也是mapper配置错误</p><p><img src="/%5Cimg%5Cimage-20231107185527885.png" alt="image-20231107185527885"></p><p>解决办法：更改为当前使用的实体类</p><p><img src="/%5Cimg%5Cimage-20231107185625671.png" alt="image-20231107185625671"></p><h4 id="问题3：找不到定义的字段"><a href="#问题3：找不到定义的字段" class="headerlink" title="问题3：找不到定义的字段"></a>问题3：找不到定义的字段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter &#x27;userName&#x27; not found. Available parameters are [arg3, arg2, param5, arg4, arg1, arg0, param3, param4, param1, param2]</span><br></pre></td></tr></table></figure><p>原因在于：</p><p>mybatis执行DML语句只能传入对象</p><p><img src="/%5Cimg%5Cimage-20231108112149240.png" alt="image-20231108112149240"></p><p>解决办法：</p><p>传入参数改为对象</p><p><img src="/%5Cimg%5Cimage-20231108112240979.png" alt="image-20231108112240979"></p><h4 id="问题4：ORM映射找不到实体类"><a href="#问题4：ORM映射找不到实体类" class="headerlink" title="问题4：ORM映射找不到实体类"></a>问题4：ORM映射找不到实体类</h4><p>Type interface com.tjcu.dao.UserDao is not known to the MapperRegistry.</p><p>原因在于：</p><p>在mapperORM中找不到实体类路径</p><p><img src="/%5Cimg%5Cimage-20231108153324728.png" alt="image-20231108153324728"></p><p><img src="/%5Cimg%5Cimage-20231108153417129.png" alt="image-20231108153417129"></p><p>解决办法：</p><p>在mybatis配置文件中添加实体类路径就可以了。</p><p><img src="/%5Cimg%5Cimage-20231108153448224.png" alt="image-20231108153448224"></p><p>问题5：查询结果只输出一半</p><p><img src="/%5Cimg%5Cimage-20231112104647655.png" alt="image-20231112104647655"></p><p>原因：没有对应的字段名，mybatis不知道存到哪个实体类属性里面</p><p>因为数据库的字段名和Java的不一样，导致只能找到一半</p><p><img src="/%5Cimg%5Cimage-20231112111028576.png" alt="image-20231112111028576"><img src="/%5Cimg%5Cimage-20231112111035462.png" alt="image-20231112111035462"></p><p>解决方法：添加ORM对应关系</p><p><img src="/%5Cimg%5Cimage-20231112110741701.png" alt="image-20231112110741701"></p><h4 id="问题5：xml配置错误"><a href="#问题5：xml配置错误" class="headerlink" title="问题5：xml配置错误"></a>问题5：xml配置错误</h4><p>莫名其妙<configuration>标签爆红</p><p><img src="/%5Cimg%5Cimage-20231113223211183.png" alt="image-20231113223211183"></p><p>原因在于：mybatis-config中要按照严格的顺序来排序，否则mybatis在解析XML时会报错。</p><p>解决办法：</p><p><img src="/%5Cimg%5Cimage-20231113223539930.png" alt="image-20231113223539930"></p><p><img src="/%5Cimg%5Cimage-20231113223628167.png" alt="image-20231113223628167"></p><h2 id="8-SpringMVC"><a href="#8-SpringMVC" class="headerlink" title="8.SpringMVC"></a>8.SpringMVC</h2><h4 id="问题1：静态资源获取失败"><a href="#问题1：静态资源获取失败" class="headerlink" title="问题1：静态资源获取失败"></a>问题1：静态资源获取失败</h4><p>在目录结构与MVC的配置文件没有问题</p><p><img src="/%5Cimg%5Cimage-20231126103831794.png" alt="image-20231126103831794"></p><p>原因：服务器找不到css文件路径（上下文缺失）</p><p><img src="/%5Cimg%5Cimage-20231126104135145.png" alt="image-20231126104135145"></p><p><img src="/%5Cimg%5Cimage-20231126103745039.png" alt="image-20231126103745039"></p><p>解决办法：</p><p>添加父路径（上下文路径）就ok啦</p><p>注:GPT给出的回答是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在Web应用中，尤其是使用Spring框架或类似Java后端技术时，服务器通常会拒绝处理包含`..`这样的相对路径元素的请求，因为这可能导致路径遍历攻击，即允许攻击者访问服务器上本不应该公开访问的文件。</span><br><span class="line">    （待解决的问题：不使用父路径怎么弄）</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231126103927197.png" alt="image-20231126103927197"></p><h4 id="问题2：中文乱码（未解决）"><a href="#问题2：中文乱码（未解决）" class="headerlink" title="问题2：中文乱码（未解决）"></a>问题2：中文乱码（未解决）</h4><h4 id="问题3：工件配置失败"><a href="#问题3：工件配置失败" class="headerlink" title="问题3：工件配置失败"></a>问题3：工件配置失败</h4><p>原因：创建Maven项目时没有指定<packaging>war</packaging></p><p>也就是打包方式</p><p><img src="/%5Cimg%5Cimage-20231129010827967.png" alt="image-20231129010827967"></p><p>解决办法：</p><p>在pom.xml中加上</p><p><packaging>war</packaging></p><p>（用于部署的）即可。</p><h4 id="问题4：找不到Servlet方法"><a href="#问题4：找不到Servlet方法" class="headerlink" title="问题4：找不到Servlet方法"></a>问题4：找不到Servlet方法</h4><p>找不到request.getServletContext()方法问题</p><p><img src="/%5Cimg%5Cimage-20231129162928604.png" alt="image-20231129162928604"></p><p>原因在于：Maven导入依赖版本过低</p><p><img src="/%5Cimg%5Cimage-20231129163003872.png" alt="image-20231129163003872"></p><p>上面的servlet-api资源中的HttpServletRequest对象中并没有getServletContext()方法</p><p>解决办法：将servlet-api依赖换成javax-servlet-api</p><p><img src="/%5Cimg%5Cimage-20231129163038603.png" alt="image-20231129163038603"></p><p><img src="/%5Cimg%5Cimage-20231129163108689.png" alt="image-20231129163108689"></p>]]></content>
      
      
      <categories>
          
          <category> 问题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置文件模板</title>
      <link href="/2023/12/08/%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/12/08/%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="1、log4j"><a href="#1、log4j" class="headerlink" title="1、log4j"></a>1、log4j</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#声明日志的输出级别以及输出方式</span><br><span class="line">log4j.rootLogger=DEBUG,stdout</span><br><span class="line">#MyBatis Logging .configuration. . .</span><br><span class="line">log4j.logger.org.mybatis.example.BlogMapper=TRACE</span><br><span class="line">#ConsoLe output. . .</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">#定义打印格式    %t threadname  %5p level   %msg info</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[%t] %5p - %msg \:%n%m</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203218239.png" alt="image-20231130203218239"></p><h2 id="2、mapper"><a href="#2、mapper" class="headerlink" title="2、mapper"></a>2、mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span><br><span class="line"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203238394.png" alt="image-20231130203238394"></p><h2 id="3、mybatis-config"><a href="#3、mybatis-config" class="headerlink" title="3、mybatis-config"></a>3、mybatis-config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;!--                JDBC 驱动--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;!--                url数据库的 JDBC URL地址。--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=<span class="string">&quot;asia.xiaojiang.mybatis03.dao.UserMapper&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203253948.png" alt="image-20231130203253948"></p><h2 id="4、Spring-Aop"><a href="#4、Spring-Aop" class="headerlink" title="4、Spring-Aop"></a>4、Spring-Aop</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203341374.png" alt="image-20231130203341374"></p><h2 id="5、Spring-AoP-annotation"><a href="#5、Spring-AoP-annotation" class="headerlink" title="5、Spring-AoP-annotation"></a>5、Spring-AoP-annotation</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--    声明使用注解配置    --&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.lqh&quot;</span>/&gt;</span><br><span class="line">&lt;!--基于注解配置的AOP代理--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203412186.png" alt="image-20231130203412186"></p><h2 id="6、Spring-IoC"><a href="#6、Spring-IoC" class="headerlink" title="6、Spring-IoC"></a>6、Spring-IoC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0 &quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203433374.png" alt="image-20231130203433374"></p><h2 id="7、Spring-servlet"><a href="#7、Spring-servlet" class="headerlink" title="7、Spring-servlet"></a>7、Spring-servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:mvc=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--    声明使用注解配置    --&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.lqh&quot;</span>/&gt;</span><br><span class="line">    &lt;!--声明MVC使用注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231130203459831.png" alt="image-20231130203459831"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java模板 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记</title>
      <link href="/2023/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2数据库"><a href="#2数据库" class="headerlink" title="2数据库"></a>2数据库</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h4 id="3种数据库"><a href="#3种数据库" class="headerlink" title="3种数据库"></a>3种数据库</h4><p>​MySQL(免费): 关系型数据库管理系统，免费（互联网公司主流）</p><p>​Redis(基于内存):基于内存，读写快，后期课程学习。</p><p>​Oracle(收费)：安全，性能高，但是收费。</p><h4 id="CRUD：增删改查"><a href="#CRUD：增删改查" class="headerlink" title="CRUD：增删改查"></a>CRUD：增删改查</h4><p>掌握语言：DML、<strong>DQL</strong>(重点)</p><h2 id="面试要点"><a href="#面试要点" class="headerlink" title="面试要点"></a>面试要点</h2><h3 id="不使用外键的原因"><a href="#不使用外键的原因" class="headerlink" title="不使用外键的原因"></a>不使用外键的原因</h3><p><img src="/%5Cimg%5Cimage-20230929110836501.png" alt="image-20230929110836501"></p><h3 id="in和exists的区别"><a href="#in和exists的区别" class="headerlink" title="in和exists的区别"></a>in和exists的区别</h3><p><img src="/%5Cimg%5Cimage-20230929115107873.png" alt="image-20230929115107873"></p><h2 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h2><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>括号内均是所对应的java类型</p><p>varchar（String）：灵活长度，用多少是多少，最大范围255</p><p>char(String)：固定255长度</p><p>bigint(long):长整型</p><p>smallint(Short):短整型</p><p>tinytin(boolean):布尔</p><p>datetime(Date、Java8是LocalDateTime)：日期</p><p>decimal（Bigdecimal）:金钱类</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>primary key：主键（一张表只有一个唯一的主键）</p><p>unique [key]：一张表可以有多个unique （唯一索引：每条记录的值都必须是唯一的）</p><p>主键和unique的差别在于：unique的值可以为null，而主键不能为null</p><p>not null：不能出现null值</p><p>default：默认值</p><p><strong>foreign key（物理外键）</strong>：实际工作使用逻辑外键</p><p>​1.cascade：在父表上 update &#x2F; delete记录时，同步 update &#x2F; delete掉子表的匹配记录<br>​2.No action：如果子表中有匹配的记录, 则不允许对父表对应候选键进行update &#x2F; delete操作<br>​3.Restrict：同 no action, 都是立即检查外键约束<br>​4.set null：在父表上 update &#x2F; delete记录时，将子表上匹配记录的列设为 null要注意子表的外键列不能为 not null<br>5.default：父表有变更时, 子表将外键列设置成一个默认的值但Innodb不能识别</p><p>auto_increment：自动增长</p><p>截断表（清空序列号和数据）和清空表(清空数据)</p><h4 id="DML："><a href="#DML：" class="headerlink" title="DML："></a>DML：</h4><p>对表中数据进行增删改。</p><h5 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h5><p>INSERT INTO LQH.PHONE<br>(NUMBERING, BRAND, “type”, COLORS, PRICE, CPU, PECULIARITY)<br>VALUES(‘’, ‘’, ‘’, ‘’, 0, ‘’, ‘’);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">插入一行</span><br><span class="line">INSERT INTO usertable (name,password) //usertable是表名 ，括号内是字段名</span><br><span class="line">VALUES(&#x27;Zero&#x27;,321654);//括号内是记录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">插入多行</span><br><span class="line">INSERT INTO `usertable` (`name`,`password`) </span><br><span class="line">VALUES(&#x27;Zero&#x27;,321654),</span><br><span class="line">(&#x27;storm&#x27;,0987),</span><br><span class="line">(&#x27;Roxy&#x27;,123456);</span><br></pre></td></tr></table></figure><h5 id="改："><a href="#改：" class="headerlink" title="改："></a>改：</h5><p>UPDATE 表名 SET 需要改的字段 WHERE 条件</p><p><img src="/%5Cimg%5Cimage-20230926165034934.png" alt="image-20230926165034934"></p><p><img src="/%5Cimg%5Cimage-20230926165100055.png" alt="image-20230926165100055"></p><h5 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h5><p><img src="/%5Cimgimage-20230926165322093.png" alt="image-20230926165322093"></p><h6 id="截断："><a href="#截断：" class="headerlink" title="截断："></a>截断：</h6><p>TRUNCATE 表名；</p><p><img src="/%5Cimgimage-20230926165431899.png" alt="image-20230926165431899"></p><p>注：如果此列是自增或默认约束，那可以不写</p><h4 id="DQL："><a href="#DQL：" class="headerlink" title="DQL："></a>DQL：</h4><h5 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h5><p><img src="/%5Cimgimage-20230927101545799.png" alt="image-20230927101545799"></p><h6 id="where-条件表达式"><a href="#where-条件表达式" class="headerlink" title="where 条件表达式"></a>where 条件表达式</h6><p><img src="/%5Cimgimage-20230927102438554.png" alt="image-20230927102438554"></p><h5 id="多表查询（也叫设计的三大范式）"><a href="#多表查询（也叫设计的三大范式）" class="headerlink" title="多表查询（也叫设计的三大范式）"></a>多表查询（也叫设计的三大范式）</h5><p>一对一:如一个人只有一张身份证，一张身份证对应一个人</p><p>一对多:一个人有多件衣服。</p><p>多对多:多个老师对应多个学生。</p><p>​通常需要一个中间表当成关系表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM usertable as u,tb_brand as t</span><br><span class="line">WHERE u.id = t.id </span><br></pre></td></tr></table></figure><h5 id="查询关系："><a href="#查询关系：" class="headerlink" title="查询关系："></a>查询关系：</h5><h6 id="合并结果集"><a href="#合并结果集" class="headerlink" title="合并结果集:"></a>合并结果集:</h6><p> union：合并结果去除重复记录</p><p>union all：合并结果不去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE city_id&gt;=64 </span><br><span class="line">UNION </span><br><span class="line">SELECT * FROM city WHERE city_id=64;</span><br></pre></td></tr></table></figure><h6 id="子查询："><a href="#子查询：" class="headerlink" title="子查询："></a>子查询：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM city </span><br><span class="line">WHERE city_id=(SELECT city_id FROM city WHERE province=&#x27;上海&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM city </span><br><span class="line">WHERE city_id= ANY(SELECT city_id FROM city WHERE map_area=&#x27;北方&#x27; OR map_area=&#x27;南方&#x27;);</span><br></pre></td></tr></table></figure><p>ANY：任意一个匹配 (||运算符)</p><p>ALL：全部都得匹配（&amp;&amp;运算符）</p><h6 id="IN和EXISTS："><a href="#IN和EXISTS：" class="headerlink" title="IN和EXISTS："></a>IN和EXISTS：</h6><p>IN先内层查询（括号里的就是内层）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM city </span><br><span class="line">WHERE city_id in (SELECT city_id from user WHERE real_name LIKE &#x27;张%&#x27;)</span><br></pre></td></tr></table></figure><p>EXISTS先外层查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM city c</span><br><span class="line">WHERE EXISTS (SELECT city_id from user u WHERE real_name LIKE &#x27;张%&#x27; AND c.city_id=u.city_id);</span><br></pre></td></tr></table></figure><p>原则：判断谁的查询结果集小就用哪个关键字（IN和EXISTS）。</p><h5 id="LIKE关键字"><a href="#LIKE关键字" class="headerlink" title="LIKE关键字"></a>LIKE关键字</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE real_name LIKE &#x27;法%&#x27;;  </span><br></pre></td></tr></table></figure><p>通配符：</p><p>%：匹配任意多个字符</p><p>*：所有</p><p>“_” 下划线通配符:表示只能匹配单个字符,不能多也不能少,就是一个字符</p><h5 id="字段控制查询："><a href="#字段控制查询：" class="headerlink" title="字段控制查询："></a>字段控制查询：</h5><h6 id="distinct"><a href="#distinct" class="headerlink" title="distinct :"></a>distinct :</h6><p>去掉重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct 列名 from 表名</span><br></pre></td></tr></table></figure><h6 id="IFNULL"><a href="#IFNULL" class="headerlink" title="IFNULL:"></a>IFNULL:</h6><p>判断id是否为空，为空就返回0;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `status`+IFNULL(id,0)id as num,brand_name FROM tb_brand ;</span><br></pre></td></tr></table></figure><h6 id="FLOOR："><a href="#FLOOR：" class="headerlink" title="FLOOR："></a>FLOOR：</h6><p>取整数</p><h6 id="RAND："><a href="#RAND：" class="headerlink" title="RAND："></a>RAND：</h6><p>随机数</p><p><img src="/%5Cimgimage-20230927125913891.png" alt="image-20230927125913891"></p><h6 id="CONCAT-WS-："><a href="#CONCAT-WS-：" class="headerlink" title="CONCAT_WS ："></a>CONCAT_WS ：</h6><p>字符串连接</p><h6 id="REPLACE："><a href="#REPLACE：" class="headerlink" title="REPLACE："></a>REPLACE：</h6><p>替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 字段名=REPLACE(brand_name,&#x27;需要替换的值&#x27;,&#x27;更新后的值&#x27;);</span><br></pre></td></tr></table></figure><h6 id="IN："><a href="#IN：" class="headerlink" title="IN："></a>IN：</h6><p>批量查询<img src="/%5Cimgimage-20230929114554527.png" alt="image-20230929114554527"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名 WHERE 列名 IN (`列名值`1,`列名值2`,`列名值`3)</span><br></pre></td></tr></table></figure><p>LIMIT:</p><p>分页查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM city </span><br><span class="line">WHERE map_area=&#x27;北方&#x27; OR map_area=&#x27;南方&#x27;</span><br><span class="line">LIMIT 3;</span><br></pre></td></tr></table></figure><h6 id="FIND-IN-SET："><a href="#FIND-IN-SET：" class="headerlink" title="FIND_IN_SET："></a>FIND_IN_SET：</h6><p>注：S2必须得用逗号分隔的字符串，不然查询失效</p><p><img src="/%5Cimgimage-20230927130546193.png" alt="image-20230927130546193"></p><h6 id="ORDER-BY-："><a href="#ORDER-BY-：" class="headerlink" title="ORDER BY ："></a>ORDER BY ：</h6><p>排序（默认是ASC（升序）,DESC是降序）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb_brand ORDER BY ordered;</span><br></pre></td></tr></table></figure><h6 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY :"></a>GROUP BY :</h6><p>SELECT的字段名和GROUP BY   一 一对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT brand_name,ordered </span><br><span class="line">FROM tb_brand</span><br><span class="line">GROUP BY brand_name,ordered;</span><br></pre></td></tr></table></figure><h6 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING :"></a>HAVING :</h6><p>相当于while，但只能在分组（GROUP BY）之后使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT brand_name,ordered,SUM(money)</span><br><span class="line">FROM tb_brand</span><br><span class="line">GROUP BY brand_name,ordered</span><br><span class="line">HAVING SUM(money)&gt;=888;</span><br></pre></td></tr></table></figure><h6 id="GROUP-CONCAT"><a href="#GROUP-CONCAT" class="headerlink" title="GROUP_CONCAT:"></a>GROUP_CONCAT:</h6><p>分组连接</p><p>GROUP_CONCAT(字段名 排序 排序的字段名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GROUP_CONCAT(price ORDER BY price DESC)</span><br></pre></td></tr></table></figure><h6 id="SUBSTRING-INDEX："><a href="#SUBSTRING-INDEX：" class="headerlink" title="SUBSTRING_INDEX："></a>SUBSTRING_INDEX：</h6><p>截取</p><p>SUBSTRING_INDEX(字符串,截取字符,截取几个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTRING_INDEX(GROUP_CONCAT(price ORDER BY price DESC),&#x27;,&#x27;,1)</span><br></pre></td></tr></table></figure><h6 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN:"></a>JOIN:</h6><p>链接查询：会产生笛卡儿积（就是 ：表1记录 X 表2记录 &#x3D; 总记录数）</p><p><img src="/%5Cimgimage-20230928162947203.png" alt="image-20230928162947203"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT  字段名 </span><br><span class="line">FROM 表名 JOIN 表名 </span><br><span class="line">ON 条件  #加上条件的目的是消除笛卡尔积</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT u.*,t.*</span><br><span class="line">FROM usertable as u JOIN tb_brand as t</span><br><span class="line">ON u.id = t.id;</span><br></pre></td></tr></table></figure><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数:"></a>聚合函数:</h5><h6 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h6><p>注：</p><p>COUNT(主键) ：准确的行数结果，性能<strong>最高</strong>。</p><p>COUNT(1)：准确的行数结果，性能<strong>其次</strong>。</p><p>COUNT(非主键): <strong>不会统计为null</strong>的行，性能倒数。</p><p>COUNT（*）：准确的行数，性能最低；但如果只有一个字段，最优</p><p>性能：COUNT(主键) <strong>&gt;</strong> COUNT(1) <strong>&gt;</strong> COUNT(非主键) <strong>&gt;</strong> COUNT（*）</p><p>SUM()、MIN()、MAX()、AVG()</p><h4 id="VIEW视图"><a href="#VIEW视图" class="headerlink" title="VIEW视图"></a>VIEW视图</h4><p>封装起来的语句</p><p>就是通过之前查询算出来的，一张临时的表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 视图名</span><br></pre></td></tr></table></figure><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>是预先编译好的SQL语句的封装。预先存储在MySQL服务器上，需要用的时候由客户端向服务器端发送调用命令就可以执行。</p><p>缺点：可移植性差、调试困难、版本管理困难、不适合高并发</p><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p>更新操作会触发其他相应的操作。如主键，删除父表ID 子表也会删除相应的ID</p><h3 id="结业作业"><a href="#结业作业" class="headerlink" title="结业作业:"></a>结业作业:</h3><p>1、根据商品模糊的商品类型名称，查询出满足条件商品。提示现根据模糊查询得到满足条件的商品类 型id,再根据商品类型id查询出商品。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM goods </span><br><span class="line">WHERE goods_type_id </span><br><span class="line">IN (SELECT goods_type_id  FROM goods_type WHERE type_name LIKE &#x27;%热%&#x27;);</span><br></pre></td></tr></table></figure><p>2、商品表中查询出每个店铺销量最高的1个商品，还要只取前20行数据。 提示：有难度，商品表goods g1 的条件是商品id等于 根据店铺分组查询出每个店铺最高的商品id,作 为条件关联。</p><p> 3、按照商品类型，找出每种类型current_price最高的商品，跟第2题类似。</p><h1 id="JDBC（一套标准接口）"><a href="#JDBC（一套标准接口）" class="headerlink" title="JDBC（一套标准接口）"></a>JDBC（一套标准接口）</h1><p>操作关系型数据库的一套API</p><p>是为了操作所有关系数据库的语言（只需要换类库就可以使用另一套数据库系统）</p><h2 id="一、使用JDBC的流程："><a href="#一、使用JDBC的流程：" class="headerlink" title="一、使用JDBC的流程："></a>一、使用JDBC的流程：</h2><p><img src="/%5Cimgimage-20230923181551146.png" alt="image-20230923181551146"></p><p>注：第一条因为版本问题可以省略了</p><h2 id="二、API"><a href="#二、API" class="headerlink" title="二、API"></a>二、API</h2><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><p><img src="/%5Cimgimage-20230923183957912.png" alt="image-20230923183957912"></p><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>eg：com.jdbc.entry_Demo2</p><p>如果不开启事务，遇到异常的话数据会错误。</p><p><img src="/%5Cimgimage-20230923190541651.png" alt="image-20230923190541651"></p><h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><p>eg：Demo3</p><p><img src="/%5Cimgimage-20230923190906749.png" alt="image-20230923190906749"></p><h5 id="3种SQL语句类型"><a href="#3种SQL语句类型" class="headerlink" title="3种SQL语句类型"></a>3种SQL语句类型</h5><p>DML：对<strong>数据</strong>的<strong>增删改</strong>操作</p><p>DDL：对<strong>表</strong>和库的<strong>增删改查</strong>操作</p><p>DQL：执行<strong>查询</strong>语句</p><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><h6 id="预防SQL注入"><a href="#预防SQL注入" class="headerlink" title="预防SQL注入"></a>预防SQL注入</h6><p><img src="/%5Cimgimage-20230924154109438.png" alt="image-20230924154109438"></p><p>密码：’ or ‘1’&#x3D;’1’</p><p>‘’ ‘ or ‘1’&#x3D;’1’</p><p>利用运算符的优先级来SQL注入</p><h6 id="反制SQL注入"><a href="#反制SQL注入" class="headerlink" title="反制SQL注入"></a>反制SQL注入</h6><p><img src="/%5Cimgimage-20230924193154719.png" alt="image-20230924193154719"></p><h6 id="预编译SQL"><a href="#预编译SQL" class="headerlink" title="预编译SQL"></a>预编译SQL</h6><p>性能更高</p><p>预编译开启：useServerPrepStmts&#x3D;true</p><p>还需配置文件，我这就不弄了，懒；教程在<a href="https://www.bilibili.com/video/BV1s3411K7jH?p=8&spm_id_from=pageDriver&vd_source=b23d340757129e93ed508f0c74230b97">08-JDBC-API详解-PreparedStatement-原理_哔哩哔哩_bilibili</a></p><p>04:15</p><h2 id="三、数据库链接池"><a href="#三、数据库链接池" class="headerlink" title="三、数据库链接池"></a>三、数据库链接池</h2><p>是个容器、负责<strong>分配、管理数据库连接</strong></p><h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><p><img src="/%5Cimgimage-20230924212058097.png" alt="image-20230924212058097"></p><p><img src="/%5Cimgimage-20230924215400542.png" alt="image-20230924215400542"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2023/11/11/SpringMVC/"/>
      <url>/2023/11/11/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="一、MVC简介"><a href="#一、MVC简介" class="headerlink" title="一、MVC简介"></a>一、MVC简介</h2><p>是一个Web框架</p><h3 id="1、流程图"><a href="#1、流程图" class="headerlink" title="1、流程图"></a>1、流程图</h3><p><img src="/%5Cimg%5Cimage-20231125170531972.png" alt="image-20231125170531972"></p><p> <img src="/%5Cimg%5Cimage-20231125170711725.png" alt="image-20231125170711725"></p><h3 id="2、概述及优势"><a href="#2、概述及优势" class="headerlink" title="2、概述及优势"></a>2、概述及优势</h3><p><img src="/%5Cimg%5Cimage-20231125172608620.png" alt="image-20231125172608620"></p><h2 id="二、框架部署"><a href="#二、框架部署" class="headerlink" title="二、框架部署"></a>二、框架部署</h2><h3 id="1、maven的配置"><a href="#1、maven的配置" class="headerlink" title="1、maven的配置"></a>1、maven的配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;spring.version&gt;<span class="number">5.2</span><span class="number">.23</span>.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2、创建SpringMVC的XML文件"><a href="#2、创建SpringMVC的XML文件" class="headerlink" title="2、创建SpringMVC的XML文件"></a>2、创建SpringMVC的XML文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:mvc=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--    声明使用注解配置    --&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.lqh&quot;</span>/&gt;</span><br><span class="line">    &lt;!--声明MVC使用注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="3、在Web中配置MVC的前端控制器"><a href="#3、在Web中配置MVC的前端控制器" class="headerlink" title="3、在Web中配置MVC的前端控制器"></a>3、在Web中配置MVC的前端控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">&lt;!--        由MVC提供的前端控制器--&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;!--       初始化时加载MVC--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:spring-servlet.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">&lt;!--        设置加载优先级（数值越小越高）--&gt;</span><br><span class="line">        &lt;load-on-startup&gt;<span class="number">1</span>&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">&lt;!--        --&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">&lt;!--        拦截所有请求--&gt;</span><br><span class="line">        &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">    &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/web-app&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、框架使用"><a href="#三、框架使用" class="headerlink" title="三、框架使用"></a>三、框架使用</h2><h3 id="1、创建控制器及测试"><a href="#1、创建控制器及测试" class="headerlink" title="1、创建控制器及测试"></a>1、创建控制器及测试</h3><p><img src="/%5Cimg%5Cimage-20231125220439228.png" alt="image-20231125220439228"></p><p><img src="/%5Cimg%5Cimage-20231125220510525.png" alt="image-20231125220510525"></p><h3 id="2、静态资源配置"><a href="#2、静态资源配置" class="headerlink" title="2、静态资源配置"></a>2、静态资源配置</h3><p><strong>spring-servlet.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    指定静态资源放行--&gt;   </span><br><span class="line">&lt;mvc:resources mapping=<span class="string">&quot;/css/**&quot;</span> location=<span class="string">&quot;/css/&quot;</span>/&gt;</span><br><span class="line">    &lt;mvc:resources mapping=<span class="string">&quot;/pages/**&quot;</span> location=<span class="string">&quot;/pages/&quot;</span>/&gt;</span><br><span class="line">    &lt;mvc:resources mapping=<span class="string">&quot;/js/**&quot;</span> location=<span class="string">&quot;/js/&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="3、前端与后端交互"><a href="#3、前端与后端交互" class="headerlink" title="3、前端与后端交互"></a>3、前端与后端交互</h3><h4 id="（1）前端提交数据"><a href="#（1）前端提交数据" class="headerlink" title="（1）前端提交数据"></a>（1）前端提交数据</h4><h5 id="1-1-表单提交"><a href="#1-1-表单提交" class="headerlink" title="1.1 表单提交"></a>1.1 表单提交</h5><p><img src="/%5Cimg%5Cimage-20231127095953083.png" alt="image-20231127095953083"></p><h5 id="1-2-超链接提交"><a href="#1-2-超链接提交" class="headerlink" title="1.2 超链接提交"></a>1.2 <strong>超链接提交</strong></h5><p><img src="/%5Cimg%5Cimage-20231127095851697.png" alt="image-20231127095851697"></p><h5 id="1-3-AJAX提交"><a href="#1-3-AJAX提交" class="headerlink" title="1.3 AJAX提交"></a>1.3 <strong>AJAX提交</strong></h5><p>请求头、请求体、请求行都可以用来提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">       $(<span class="string">&quot;#btn1&quot;</span>).click(function ()&#123;</span><br><span class="line">           <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">           obj.bookName=<span class="string">&quot;张三自传&quot;</span>;</span><br><span class="line">           obj.bookAuthor=<span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">           obj.bookPrice=<span class="number">22.9</span>;</span><br><span class="line">           <span class="keyword">var</span> s=JSON.stringify(obj);  <span class="comment">//将obj转换为JSON格式</span></span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:<span class="string">&quot;book/update&quot;</span>,</span><br><span class="line">               type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">               headers:&#123; </span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//因为js对象不能直接传递，需要转换为json字符串</span></span><br><span class="line">               contentType:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">               data:s,</span><br><span class="line"></span><br><span class="line">               success:function (res)&#123;</span><br><span class="line">                   console.log(res);</span><br><span class="line">               &#125;,</span><br><span class="line">               error: function(xhr, status, error) &#123;</span><br><span class="line">                   console.log(<span class="string">&quot;AJAX 请求失败: &quot;</span>, status, error);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           console.log(<span class="string">&quot;函数尾部了&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h4 id="（2）控制器接收数据"><a href="#（2）控制器接收数据" class="headerlink" title="（2）控制器接收数据"></a>（2）控制器接收数据</h4><h5 id="2-1-请求行传值"><a href="#2-1-请求行传值" class="headerlink" title="2.1 请求行传值"></a>2.1 请求行传值</h5><p>（可以不加注解@RequstParam)</p><p>(只需要传递的值名字和控制层接收名字相同)</p><p><em>表单提交</em></p><p><em>URL提交</em></p><p><em>$.ajax请求的url传值</em></p><p><em>$.post()&#x2F;$.get()中的{}传值</em> </p><h5 id="2-2-请求头传值"><a href="#2-2-请求头传值" class="headerlink" title="2.2 请求头传值"></a>2.2 请求头传值</h5><p><strong>（必须加注解@RequstHeader)</strong></p><p><em>ajax封装请求头数据</em></p><p>token是头中的值</p><p><img src="/%5Cimg%5Cimage-20231127105346838.png" alt="image-20231127105346838"></p><p><img src="/%5Cimg%5Cimage-20231127130140542.png" alt="image-20231127130140542"></p><h5 id="2-3-请求体传值"><a href="#2-3-请求体传值" class="headerlink" title="2.3 请求体传值"></a>2.3 请求体传值</h5><p>*ajax封装请求体数据</p><h6 id="注：需要导入jackson依赖"><a href="#注：需要导入jackson依赖" class="headerlink" title="注：需要导入jackson依赖"></a>注：需要导入jackson依赖</h6><p>pom.xml配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//    RequestBody将JSON格式数据转换为java对象，依赖于jackson包</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.14.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">       $(<span class="string">&quot;#btn1&quot;</span>).click(function ()&#123;</span><br><span class="line">           <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">           obj.bookName=<span class="string">&quot;张三自传&quot;</span>;</span><br><span class="line">           obj.bookAuthor=<span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">           obj.bookPrice=<span class="number">22.9</span>;</span><br><span class="line">           <span class="keyword">var</span> s=JSON.stringify(obj);  <span class="comment">//将obj转换为JSON格式</span></span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:<span class="string">&quot;book/update&quot;</span>,</span><br><span class="line">               type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">               headers:&#123; </span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//因为js对象不能直接传递，需要转换为json字符串</span></span><br><span class="line">               contentType:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">               data:s,</span><br><span class="line"></span><br><span class="line">               success:function (res)&#123;</span><br><span class="line">                   console.log(res);</span><br><span class="line">               &#125;,</span><br><span class="line">               error: function(xhr, status, error) &#123;</span><br><span class="line">                   console.log(<span class="string">&quot;AJAX 请求失败: &quot;</span>, status, error);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           console.log(<span class="string">&quot;函数尾部了&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>后端接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> book book)</span>&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（3）控制器响应同步请求"><a href="#（3）控制器响应同步请求" class="headerlink" title="（3）控制器响应同步请求"></a>（3）控制器响应同步请求</h4><p>请求跳转和重定向：</p><p><img src="/%5Cimg%5Cimage-20231127205659904.png" alt="image-20231127205659904"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">add</span><span class="params">(String bookName, String bookAuthor, <span class="type">double</span> bookPrice)</span>&#123;</span><br><span class="line">        <span class="type">book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">book</span>(<span class="number">0</span>, bookName, bookAuthor, bookPrice);</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>+book);</span><br><span class="line"><span class="comment">//        这个是转发</span></span><br><span class="line"><span class="comment">//        return new ModelAndView(&quot;/tips.jsp&quot;);</span></span><br><span class="line"><span class="comment">//        这个是重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;redirect:/tips.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（4）控制器响应异步请求"><a href="#（4）控制器响应异步请求" class="headerlink" title="（4）控制器响应异步请求"></a>（4）控制器响应异步请求</h4><p>注：需要在前端指定接收类型为json</p><p><img src="/%5Cimg%5Cimage-20231127212515478.png" alt="image-20231127212515478"></p><h5 id="4-1-第一种方法：Response输出流进行响应"><a href="#4-1-第一种方法：Response输出流进行响应" class="headerlink" title="4.1 第一种方法：Response输出流进行响应"></a>4.1 第一种方法：Response输出流进行响应</h5><p><img src="/%5Cimg%5Cimage-20231127212241055.png" alt="image-20231127212241055"></p><h5 id="4-2-第二种方法：在控制器方法中返回响应的对象"><a href="#4-2-第二种方法：在控制器方法中返回响应的对象" class="headerlink" title="4.2 第二种方法：在控制器方法中返回响应的对象"></a>4.2 第二种方法：在控制器方法中返回响应的对象</h5><p><img src="/%5Cimg%5Cimage-20231127214222444.png" alt="image-20231127214222444"></p><h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/Test&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;book&gt; <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">       ArrayList&lt;book&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="number">0</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;张三&quot;</span>,<span class="number">22.9</span>));</span><br><span class="line">       list.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="number">1</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;图&quot;</span>,<span class="number">88.9</span>));</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="（5）控制器响应同步请求传递数据"><a href="#（5）控制器响应同步请求传递数据" class="headerlink" title="（5）控制器响应同步请求传递数据"></a>（5）控制器响应同步请求传递数据</h4><p><img src="/%5Cimg%5Cimage-20231128002159611.png" alt="image-20231128002159611"></p><p><img src="/%5Cimg%5Cimage-20231128002507212.png" alt="image-20231128002507212"></p><h4 id="（6）解决中文乱码问题"><a href="#（6）解决中文乱码问题" class="headerlink" title="（6）解决中文乱码问题"></a>（6）解决中文乱码问题</h4><h5 id="6-1-前端页面"><a href="#6-1-前端页面" class="headerlink" title="6.1 前端页面"></a>6.1 前端页面</h5><h6 id="JSP："><a href="#JSP：" class="headerlink" title="JSP："></a>JSP：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h6 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="6-2-服务器编码"><a href="#6-2-服务器编码" class="headerlink" title="6.2 服务器编码"></a>6.2 服务器编码</h5><p>tomcat&#x2F;conf&#x2F;server.xml文件夹（解决请求行的乱码问题）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8888&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">             connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">             redirectPort=<span class="string">&quot;8443&quot;</span></span><br><span class="line">             maxParameterCount=<span class="string">&quot;1000&quot;</span></span><br><span class="line">             URIEncoding=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">             /&gt;</span><br></pre></td></tr></table></figure><h5 id="6-3-设置SpringMVC的编码方式"><a href="#6-3-设置SpringMVC的编码方式" class="headerlink" title="6.3 设置SpringMVC的编码方式"></a>6.3 设置SpringMVC的编码方式</h5><p>拦截器设置(web.xml)</p><p><img src="/%5Cimg%5Cimage-20231128003925319.png" alt="image-20231128003925319"></p><h2 id="四、SpringMVC的请求处理流程"><a href="#四、SpringMVC的请求处理流程" class="headerlink" title="四、SpringMVC的请求处理流程"></a>四、SpringMVC的请求处理流程</h2><h3 id="1、请求处理流程"><a href="#1、请求处理流程" class="headerlink" title="1、请求处理流程"></a>1、请求处理流程</h3><p><img src="/%5Cimg%5Cimage-20231128095311127.png" alt="image-20231128095311127"></p><h3 id="2、SpringMVC核心组件"><a href="#2、SpringMVC核心组件" class="headerlink" title="2、SpringMVC核心组件"></a>2、SpringMVC核心组件</h3><p><img src="/%5Cimg%5Cimage-20231128151824264.png" alt="image-20231128151824264"></p><h3 id="3、处理器映射器"><a href="#3、处理器映射器" class="headerlink" title="3、处理器映射器"></a>3、处理器映射器</h3><p><img src="/%5Cimg%5Cimage-20231128152957918.png" alt="image-20231128152957918"></p><p><img src="/%5Cimg%5Cimage-20231128154149849.png" alt="image-20231128154149849"></p><p><strong>访问的路径不同</strong>，第一种（Bean）是通过类名访问；第二种（Simple）是通过配置文件中的key访问</p><h3 id="4、视图解析器"><a href="#4、视图解析器" class="headerlink" title="4、视图解析器"></a>4、视图解析器</h3><p><img src="/%5Cimg%5Cimage-20231128160738529.png" alt="image-20231128160738529"></p><p><img src="/%5Cimg%5Cimage-20231128161908842.png" alt="image-20231128161908842"></p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>这是第二种方法：直接使用UrlBasedViewResolver（上面那种方式）的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    &lt;bean id=<span class="string">&quot;viewResolver&quot;</span> class=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="line">&lt;!--    前缀--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/&quot;</span>/&gt;</span><br><span class="line">&lt;!--    后缀--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>设置前缀和后缀（节省开发时间）</p><h3 id="5、自定义日期转换器（未完成）"><a href="#5、自定义日期转换器（未完成）" class="headerlink" title="5、自定义日期转换器（未完成）"></a>5、自定义日期转换器（未完成）</h3><p><img src="/%5Cimg%5Cimage-20231128164743670.png" alt="image-20231128164743670"></p><h4 id="Spring-config"><a href="#Spring-config" class="headerlink" title="Spring-config"></a>Spring-config</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--声明MVC使用注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=<span class="string">&quot;converterFactory&quot;</span>/&gt;</span><br><span class="line">&lt;!--                这个包是转换格式工厂--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;converterFactory&quot;</span> class=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;converters&quot;</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">&lt;!--                可以设置多个转换器--&gt;</span><br><span class="line">                 &lt;bean class=<span class="string">&quot;com.lqh.utils.MyDateConverter&quot;</span>/&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="转换器工具类"><a href="#转换器工具类" class="headerlink" title="转换器工具类"></a>转换器工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将字符串转为Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateConverter</span>  <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"><span class="comment">//    指定格式</span></span><br><span class="line">    SimpleDateFormat sdf=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            解析字符串为Date格式</span></span><br><span class="line">            date=sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、框架部署总结"><a href="#6、框架部署总结" class="headerlink" title="6、框架部署总结"></a>6、框架部署总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建Maven工程</span><br><span class="line">记得pom.xml中添加&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">在pom.xml导入SpringMVC所需要的依赖（Spring: core，context，aspects，jdbd，test，web,webmvc,jackson）</span><br><span class="line">创建spring-servlet.xml配置文件</span><br><span class="line">配置spring-servlet的静态资源处理策略</span><br><span class="line">创建web模块</span><br><span class="line">在web.xml配置SpringMVC的前端控制器</span><br><span class="line">在web.xml配置SpringMVC的编码过滤器</span><br></pre></td></tr></table></figure><h3 id="7、文件上传"><a href="#7、文件上传" class="headerlink" title="7、文件上传"></a>7、文件上传</h3><h4 id="前端提交文件"><a href="#前端提交文件" class="headerlink" title="前端提交文件"></a>前端提交文件</h4><p><img src="/%5Cimg%5Cimage-20231129143256409.png" alt="image-20231129143256409"></p><h4 id="控制器层接收文件"><a href="#控制器层接收文件" class="headerlink" title="控制器层接收文件"></a>控制器层接收文件</h4><p>（1）SpringMVC处理上传文件需要借助于CommonsMultipartResolver文件解析器</p><ul><li>导入依赖<strong>commons-io、commons-fileupload</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>配置spring-servlet.xml文件解析器，指定上传文件配置（大小问题，编码问题）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    &lt;bean id=<span class="string">&quot;multipartResolver&quot;</span> class=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br><span class="line">&lt;!--       设置文件上传大小上限--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxUploadSize&quot;</span> value=<span class="string">&quot;10240000&quot;</span>/&gt;</span><br><span class="line">&lt;!--        设置缓冲大小--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxInMemorySize&quot;</span> value=<span class="string">&quot;102400&quot;</span>/&gt;</span><br><span class="line">&lt;!--        设置编码格式--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;defaultEncoding&quot;</span> value=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>配置控制器（add）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span>    </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Book book,MultipartFile imgFile,HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        一、获取图片信息</span></span><br><span class="line"><span class="comment">//        1.获取到图片名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span>imgFile.getOriginalFilename();</span><br><span class="line"><span class="comment">//        2.获取图片后缀（.jpg）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="comment">//       3.防止图片名字重复（如果对高并发有要求还可以加一个随机数）</span></span><br><span class="line">        String imgplus=System.currentTimeMillis()+img;</span><br><span class="line"><span class="comment">//        二.存放路径</span></span><br><span class="line"><span class="comment">//        1.获取服务器上的图片存放路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line"><span class="comment">//        2.拼接上传图片的存放路径</span></span><br><span class="line">        String savaPath=servletPath+<span class="string">&quot;\\&quot;</span>+imgplus;</span><br><span class="line"><span class="comment">//        3.保存图片</span></span><br><span class="line">        imgFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(savaPath));</span><br><span class="line"><span class="comment">//        4。将路径添加到对象中</span></span><br><span class="line">        book.setBookImg(<span class="string">&quot;imgs\\&quot;</span>+savaPath);</span><br><span class="line"><span class="comment">//        5. 调用DAO保存到数据库中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tips&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8、文件下载"><a href="#8、文件下载" class="headerlink" title="8、文件下载"></a>8、文件下载</h3><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Yukino</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">11</span>/<span class="number">29</span></span><br><span class="line">  Time: <span class="number">0</span>:08</span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询&lt;/title&gt;</span><br><span class="line">    &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> integrity=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span> integrity=<span class="string">&quot;sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> integrity=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jQuery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h4&gt;查询书籍&lt;/h4&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;row&quot;</span> id=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.get(<span class="string">&quot;book/list&quot;</span>,function (res)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">let</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;res.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> fn=res[i];</span><br><span class="line">            <span class="keyword">var</span> htmlStr=<span class="string">&quot;&lt;div class=&#x27;col-lg-2 col-md-3 col-sm-4 col-xs-6&#x27;&gt; &lt;div class=&#x27;thumbnail&#x27;&gt; &lt;img src=&#x27;imgs/&quot;</span>+res[i]+<span class="string">&quot;&#x27;alt=&#x27;...&#x27;&gt;&lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;book/download?fname=/&quot;</span>+res[i]+<span class="string">&quot;&#x27; className=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;</span><br><span class="line">            $(<span class="string">&quot;#container&quot;</span>).append(htmlStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;json&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<div class='col-lg-2 col-md-3 col-sm-4 col-xs-6'></p><ul><li><code>col-lg-2</code>: 在大屏幕设备（Large devices，如桌面显示器）上，这个<code>div</code>将占据网格系统中的2个列宽。Bootstrap网格系统通常基于12列，所以这表示该元素将占据1&#x2F;6的宽度（因为12列总宽度中的2列）。</li><li><code>col-md-3</code>: 在中等屏幕设备（Medium devices，如平板电脑）上，这个<code>div</code>将占据3个列宽，即1&#x2F;4的宽度。</li><li><code>col-sm-4</code>: 在小屏幕设备（Small devices，如较大的手机）上，这个<code>div</code>将占据4个列宽，即1&#x2F;3的宽度。</li><li><code>col-xs-6</code>: 在超小屏幕设备（Extra small devices，如小屏手机）上，这个<code>div</code>将占据6个列宽，即半屏的宽度。</li></ul><h4 id="控制器响应给前端页面"><a href="#控制器响应给前端页面" class="headerlink" title="控制器响应给前端页面"></a>控制器响应给前端页面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="comment">//    ResponseBody会将返回的list转为json格式并写入到前端的响应体（res）中</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String[] listImg(HttpServletRequest request)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">imgPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(servletPath);</span><br><span class="line">        String[] list = imgPath.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="comment">//    fname表示传递过来需要下载的图片</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadImg</span><span class="params">(String fname, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        获取图片路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">downPath</span> <span class="operator">=</span> servletPath +<span class="string">&quot;\\&quot;</span>+fname;</span><br><span class="line"><span class="comment">//        通过字节流得到图片文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(downPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*         设置响应给前端（这里类型设置为exe的目的是为了不让浏览器识别）</span></span><br><span class="line"><span class="comment">        因为浏览器会识别图片并显示出来，识别不了就弹出提示*/</span></span><br><span class="line"><span class="comment">//        实测不设置类型为exe也可以</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/exe&quot;</span>);</span><br><span class="line"><span class="comment">/*        添加响应头：文件名通过响应头给客户机，有文件名才能另存为，否则没名</span></span><br><span class="line"><span class="comment">        Content-Disposition通常用于指定浏览器应如何显示接收到的内容</span></span><br><span class="line"><span class="comment">        attachment参数表示浏览器应该提示用户保存文件，而不是尝试打开它。fname是指定的文件名*/</span></span><br><span class="line">        response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+fname);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        下载的原理就是从服务器复制文件响应到客户机上。</span></span><br><span class="line">        IOUtils.copy(fileInputStream,response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9、统一异常处理"><a href="#9、统一异常处理" class="headerlink" title="9、统一异常处理"></a>9、统一异常处理</h3><h4 id="Http异常"><a href="#Http异常" class="headerlink" title="Http异常"></a>Http异常</h4><p>在Web.xml中配置错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;<span class="number">404</span>&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/<span class="number">404.</span>jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;<span class="number">500</span>&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/<span class="number">500.</span>jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><h4 id="Java代码异常"><a href="#Java代码异常" class="headerlink" title="Java代码异常"></a>Java代码异常</h4><h5 id="Servlet-api处理方式"><a href="#Servlet-api处理方式" class="headerlink" title="Servlet-api处理方式"></a>Servlet-api处理方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;exception-type&gt;java.lang.Exception&lt;/exception-type&gt;</span><br><span class="line">    &lt;location&gt;/err.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><h5 id="SpringMVC处理方式"><a href="#SpringMVC处理方式" class="headerlink" title="SpringMVC处理方式"></a>SpringMVC处理方式</h5><p>创建一个异常处理类。</p><p>使用@ControllerAdvice注解声明是Spring扫描对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nullHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/err1.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NumberFormatException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">formatHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/err2.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、拦截器"><a href="#10、拦截器" class="headerlink" title="10、拦截器"></a>10、拦截器</h3><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>拦截器处理控制器方法，过滤器处理页面请求。</p><p><img src="/%5Cimg%5Cimage-20231130143137953.png" alt="image-20231130143137953"></p><h4 id="创建拦截器类"><a href="#创建拦截器类" class="headerlink" title="创建拦截器类"></a>创建拦截器类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor01</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"><span class="comment">//   预处理方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;预处理&quot;</span>);</span><br><span class="line">        Enumeration&lt;String&gt; keys = request.getParameterNames();</span><br><span class="line"><span class="comment">//        遍历每个元素</span></span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;id&quot;</span>.equals(key))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setStatus(<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//    不放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//   后处理方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;tips&quot;</span>,<span class="string">&quot;这是通过拦截器添加的&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;后处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在spring-servlet中配置拦截器"><a href="#在spring-servlet中配置拦截器" class="headerlink" title="在spring-servlet中配置拦截器"></a>在spring-servlet中配置拦截器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!--            代表拦截/book中所有，除了/book/list--&gt;</span><br><span class="line">            &lt;mvc:mapping path=&quot;/book/**&quot;/&gt;</span><br><span class="line">            &lt;mvc:exclude-mapping path=&quot;/book/list&quot;/&gt;</span><br><span class="line">        &lt;!--            拦截器的路径（类所在处）--&gt;</span><br><span class="line">            &lt;bean class=&quot;com.lqh.utils.MyInterceptor01&quot;/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h3 id="11、拦截器链"><a href="#11、拦截器链" class="headerlink" title="11、拦截器链"></a>11、拦截器链</h3><p>将多个拦截器按照一定的顺序构成一个执行链（先入后出）。</p><p><img src="/%5Cimg%5Cimage-20231130165915460.png" alt="image-20231130165915460"></p><p><img src="/%5Cimg%5Cimage-20231130170223238.png" alt="image-20231130170223238"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    &lt;mvc:interceptors&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!--            代表拦截/book中所有，除了/book/list--&gt;</span><br><span class="line">            &lt;mvc:mapping path=<span class="string">&quot;/book/query&quot;</span>/&gt;</span><br><span class="line">&lt;!--            &lt;mvc:exclude-mapping path=<span class="string">&quot;/book/list&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--            拦截器的路径（类所在处）--&gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;com.lqh.utils.MyInterceptor01&quot;</span>/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">            &lt;mvc:mapping path=<span class="string">&quot;/book/query&quot;</span>/&gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;com.lqh.utils.MyInterceptor02&quot;</span>/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h2 id="五、SSM整合"><a href="#五、SSM整合" class="headerlink" title="五、SSM整合"></a>五、SSM整合</h2><h3 id="1、创建Web项目"><a href="#1、创建Web项目" class="headerlink" title="1、创建Web项目"></a>1、创建Web项目</h3><h3 id="2、部署MyBatis、部署Spring、SpringMVC"><a href="#2、部署MyBatis、部署Spring、SpringMVC" class="headerlink" title="2、部署MyBatis、部署Spring、SpringMVC"></a>2、部署MyBatis、部署Spring、SpringMVC</h3><p><img src="/%5Cimg%5Cimage-20231201004909156.png" alt="image-20231201004909156"></p><h3 id="3、整合配置"><a href="#3、整合配置" class="headerlink" title="3、整合配置"></a>3、整合配置</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">      &lt;!--MyBatis的依赖--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">8.0</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">3.5</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">2.0</span>&lt;/version&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!--Spring和SpringMVC的依赖--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!--SpringMVC的部分依赖--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.18</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">2.14</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">2.4</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.4</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!--mybatis和spring建立的桥梁--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">2.0</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!--德鲁伊依赖--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.2</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.18</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">4.13</span>&lt;/version&gt;</span><br><span class="line">          &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="创建spring配置"><a href="#创建spring配置" class="headerlink" title="创建spring配置"></a>创建spring配置</h4><ul><li><p>spring-context.xml 只配置注解声明以及类的管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--    声明使用注解配置    --&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.lqh&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>spring-mvc.xml       进行mvc相关的配置，列如静态资源配置、拦截器配置等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:mvc=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--声明MVC使用注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--    指定静态资源放行--&gt;</span><br><span class="line">    &lt;mvc:resources mapping=<span class="string">&quot;/css/**&quot;</span> location=<span class="string">&quot;/css/&quot;</span>/&gt;</span><br><span class="line">    &lt;mvc:resources mapping=<span class="string">&quot;/imgs/**&quot;</span> location=<span class="string">&quot;/imgs/&quot;</span>/&gt;</span><br><span class="line">    &lt;mvc:resources mapping=<span class="string">&quot;/js/**&quot;</span> location=<span class="string">&quot;/js/&quot;</span>/&gt;</span><br><span class="line">&lt;!--只要配进来，Spring启动时就会加载这个解析器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;multipartResolver&quot;</span> class=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br><span class="line">&lt;!--       设置文件上传大小上限--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxUploadSize&quot;</span> value=<span class="string">&quot;10240000&quot;</span>/&gt;</span><br><span class="line">&lt;!--        设置缓冲大小--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxInMemorySize&quot;</span> value=<span class="string">&quot;102400&quot;</span>/&gt;</span><br><span class="line">&lt;!--        设置编码格式--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;defaultEncoding&quot;</span> value=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--    &lt;mvc:interceptors&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">&amp;lt;!&amp;ndash;            代表拦截/book中所有，除了/book/list&amp;ndash;&amp;gt;</span><br><span class="line">            &lt;mvc:mapping path=<span class="string">&quot;/book/query&quot;</span>/&gt;</span><br><span class="line">&amp;lt;!&amp;ndash;            &lt;mvc:exclude-mapping path=<span class="string">&quot;/book/list&quot;</span>/&gt;&amp;ndash;&amp;gt;</span><br><span class="line">&amp;lt;!&amp;ndash;            拦截器的路径（类所在处）&amp;ndash;&amp;gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;com.lqh.utils.MyInterceptor01&quot;</span>/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">            &lt;mvc:mapping path=<span class="string">&quot;/book/query&quot;</span>/&gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;com.lqh.utils.MyInterceptor02&quot;</span>/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;bean id=<span class="string">&quot;converterFactory&quot;</span> class=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;property name=<span class="string">&quot;converters&quot;</span>&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;set&gt;--&gt;</span><br><span class="line">&lt;!--                &amp;lt;!&amp;ndash;                可以设置多个转换器&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">&lt;!--                &lt;bean class=<span class="string">&quot;com.lqh.utils.MyDateConverter&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;/set&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/property&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;viewResolver&quot;</span> class=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="line">        &lt;!--    前缀--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/&quot;</span>/&gt;</span><br><span class="line">        &lt;!--    后缀--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>spring-mybatis.xml        进行Spring与MyBatis整合的相关的配置（IOC和AOP）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">&lt;!--加载druid属性文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;druid.properties&quot;</span>/&gt;</span><br><span class="line">        &lt;!--    依赖Spring容器完成数据源DataSource的创建--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;driverObject&quot;</span> class=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;druidDataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">&lt;!--        因为driver需要的是对象，所以用上面用bean创建了一个对象driverObject传入driver行--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;driver&quot;</span> ref=<span class="string">&quot;driverObject&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=<span class="string">&quot;initialSize&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;minIdle&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;maxActive&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;maxWait&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;SqlsessionFactory&quot;</span> class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;!--        配置数据源--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="line">&lt;!--        mapper映射文件--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;mapperLocations&quot;</span> value=<span class="string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span><br><span class="line">&lt;!--        配置需要定义别名的包--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;typeAliasesPackage&quot;</span> value=<span class="string">&quot;com.lqh.bean.*&quot;</span>/&gt;</span><br><span class="line">&lt;!--        可选：配置MyBatis的主配置文件--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--    通过扫描器获取会话工厂（<span class="number">30</span>行）里面的会话，然后创建所有DAO接口对象，存储在Spring容器--&gt;</span><br><span class="line">&lt;bean class=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> value=<span class="string">&quot;SqlsessionFactory&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;basePackage&quot;</span> value=<span class="string">&quot;com.lqh.dao&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;!--==================================这个是AOC事务管理============================================--&gt;</span><br><span class="line">    &lt;bean  id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置SpringMVC前端控制器"><a href="#配置SpringMVC前端控制器" class="headerlink" title="配置SpringMVC前端控制器"></a>配置SpringMVC前端控制器</h4><ul><li><p>在web.xml进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--        由MVC提供的前端控制器--&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!--       初始化时加载MVC--&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;!--        设置加载优先级（数值越小越高）--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;<span class="number">1</span>&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">  </span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;!--        --&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--        <span class="comment">/*拦截所有请求,包括jsp的请求，都做为控制器类的请求路径来处理--&gt;</span></span><br><span class="line"><span class="comment">    &lt;!--        /拦截所有的HTTP请求，但不包括.jsp的请求，不会放行静态资源的请求(http/css/js/图片)--&gt;</span></span><br><span class="line"><span class="comment">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/servlet-mapping&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4、整合测试"><a href="#4、整合测试" class="headerlink" title="4、整合测试"></a>4、整合测试</h3><p>完成Book查询 </p><p>整体结构</p><p><img src="/%5Cimg%5Cimage-20231202113117400.png" alt="image-20231202113117400"></p><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><p>index.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;%--    指定绝对路径，上下文的。--%&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;JSP - Hello World&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;%= <span class="string">&quot;Hello World!&quot;</span> %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">$&#123;tips&#125;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;book/query&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    请输入查询的图书ID：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookId&quot;</span> value=<span class="string">&quot;1001&quot;</span>/&gt;</span><br><span class="line">                     &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;%--要获取单独的属性直接.属性名就可以了，不需要get--%&gt;</span><br><span class="line">$&#123;book.bookname&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="控制器层"><a href="#控制器层" class="headerlink" title="控制器层"></a>控制器层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqh.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqh.bean.Book;</span><br><span class="line"><span class="keyword">import</span> com.lqh.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -----类注释信息-----</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @作者：Luo Qi Hang</span></span><br><span class="line"><span class="comment"> * @类名：test</span></span><br><span class="line"><span class="comment"> * @时间：2023/12/1 0:33</span></span><br><span class="line"><span class="comment"> * @注释:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">query</span><span class="params">(String bookId, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(bookId);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.selectByPrimaryKey(i);</span><br><span class="line">        <span class="keyword">if</span> (book == <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;tips&quot;</span>, <span class="string">&quot;ID不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;book&quot;</span>, book);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSpring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端汇总</title>
      <link href="/2023/10/30/FE/"/>
      <url>/2023/10/30/FE/</url>
      
        <content type="html"><![CDATA[<p>总结：</p><p>​HTML：页面布局（毛坯房）</p><p>​CSS：给页面上色（装饰房间）</p><p>​JavaScript：改变布局和用户交互 （开关灯具）</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h3 id="理论（入门）"><a href="#理论（入门）" class="headerlink" title="理论（入门）"></a>理论（入门）</h3><p>HTML ：超文本标记语言</p><p>​用来写网页的</p><p>​只是创建骨骼（样式是css调）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>第一步Hello World</p><p><img src="/%5Cimg%5Cimage-20231003123552713.png" alt="image-20231003123552713"></p><p><img src="/%5Cimg%5Cimage-20231003124347957.png" alt="image-20231003124347957"></p><p>ID是用来表示这个标签的唯一标识符（方便JS使用）</p><p>style：设置内联样式</p><p>class：设置样式</p><h4 id="form标签的常用属性"><a href="#form标签的常用属性" class="headerlink" title="form标签的常用属性:"></a>form标签的常用属性:</h4><p><img src="/%5Cimg%5Cimage-20231003155507072.png" alt="image-20231003155507072"></p><h4 id="input常用属性"><a href="#input常用属性" class="headerlink" title="input常用属性"></a>input常用属性</h4><p>eg：HTML-&gt;属性-&gt;input属性</p><p>格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型  名字 属性</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">max</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231003161023552.png" alt="image-20231003161023552"></p><p>还有很多没有截图。详情请看<a href="https://www.runoob.com/html/html-forms.html">HTML 表单 | 菜鸟教程 (runoob.com)</a></p><h4 id="div盒子"><a href="#div盒子" class="headerlink" title="div盒子"></a>div盒子</h4><p>eg:div盒子模型-&gt;divdemo1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义style样式</span><br><span class="line">solid是实体线1px是宽度aqua是颜色</span><br><span class="line">dashed是虚线</span><br><span class="line">.a&#123;</span><br><span class="line">    border: solid 1px aqua  ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h3 id="理论（入门）-1"><a href="#理论（入门）-1" class="headerlink" title="理论（入门）"></a>理论（入门）</h3><p>用来控制网页中元素样式的，如字体、图片大小、颜色、边框、动画、位置。</p><h4 id="三种使用方式："><a href="#三种使用方式：" class="headerlink" title="三种使用方式："></a>三种使用方式：</h4><p>eg:CSS3-&gt;01</p><p>​外部：</p><p>​rel是固定的，意为样式表  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel = &quot;stylesheet&quot; type = &quot;text/css&quot; href=&quot;mystyle<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p>​内联：标签内style””使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> style=&quot;<span class="attribute">color</span>: crimson<span class="string">&quot;&gt;你好&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure><p>​内部：<style></style>标签内定义样式（前后端分离主流）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id和class选择器"><a href="#id和class选择器" class="headerlink" title="id和class选择器"></a>id和class选择器</h3><p>eg:CSS3-&gt;02</p><p>注：子级选择器和所有层级选择器需要有顺序才有效果</p><p>多层样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多层样式  样式之间空格隔开就行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h2 test&quot;</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="border边框"><a href="#border边框" class="headerlink" title="border边框"></a>border边框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">边框圆角</span><br><span class="line">border-radius: 10px 20px 30px 40px;</span><br><span class="line">四边形，先从左上角开始，顺时针修改 </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">边框阴影</span><br><span class="line">.shadow&#123;</span><br><span class="line">    border:solid 1px aqua;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    box-shadow: 0 0 10px palevioletred;</span><br><span class="line">  &#125;</span><br><span class="line">第一个0表示x的阴影 第二个0代表y的阴影</span><br></pre></td></tr></table></figure><h3 id="background背景"><a href="#background背景" class="headerlink" title="background背景"></a>background背景</h3><p>eg:04</p><p>color :颜色</p><p>image :背景图片</p><p>repeat：平铺</p><p>origin:让背景图出现在3个区域</p><p><img src="/%5Cimg%5Cimage-20231003224539400.png" alt="image-20231003224539400"></p><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p>eg:04</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(方向,颜色<span class="number">1</span>,颜色<span class="number">2</span>,颜色<span class="number">3</span>..);</span><br></pre></td></tr></table></figure><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>边距问题</p><p><img src="/%5Cimg%5Cimage-20231003234331226.png" alt="image-20231003234331226"></p><h4 id="文本text"><a href="#文本text" class="headerlink" title="文本text"></a>文本text</h4><p>eg：05</p><h3 id="宽高"><a href="#宽高" class="headerlink" title="宽高"></a>宽高</h3><p><img src="/%5Cimg%5Cimage-20231004000150588.png" alt="image-20231004000150588"></p><h3 id="flex流式布局"><a href="#flex流式布局" class="headerlink" title="flex流式布局"></a>flex流式布局</h3><p>eg:06-&gt;隐藏</p><p><img src="/%5Cimg%5Cimage-20231004090109195.png" alt="image-20231004090109195"></p><p>总结: display：none隐藏后不占位，visibility：hidden隐藏后占位。</p><h3 id="flex弹性盒子布局"><a href="#flex弹性盒子布局" class="headerlink" title="flex弹性盒子布局"></a>flex弹性盒子布局</h3><p>eg:07-&gt;flex弹性    未学完</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="绝对定位和相对"><a href="#绝对定位和相对" class="headerlink" title="绝对定位和相对"></a>绝对定位和相对</h4><p>用于旗帜广告（随用户拖动而移动）</p><p><img src="/%5Cimg%5Cimage-20231004094742044.png" alt="image-20231004094742044"></p><h4 id="overflow溢出内容"><a href="#overflow溢出内容" class="headerlink" title="overflow溢出内容"></a>overflow溢出内容</h4><p>eg:07</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:200px;height:200px;border:solid 1px red;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">    设置超出内容如何显示()</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>鼠标移动和用户交互</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#id</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>:<span class="string">&#x27;互动&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2D转换</p><p><img src="/%5Cimg%5Cimage-20231004104646459.png" alt="image-20231004104646459"></p><p>3D转换</p><p><img src="/%5Cimg%5Cimage-20231004105012504.png" alt="image-20231004105012504"></p><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p>eg:08</p><p>编写动画效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@keyframes  transCSS&#123;</span><br><span class="line">  开始的模样</span><br><span class="line">  from&#123;</span><br><span class="line">    transform: translateX(0);</span><br><span class="line">  &#125;</span><br><span class="line">  结束的模样</span><br><span class="line">  to &#123;</span><br><span class="line">    transform: translateX(500px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用样式调用动画效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.div&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: aqua;</span><br><span class="line">  animation: transCSS 2s;动画时间</span><br><span class="line">  animation-iteration-count: 10;动画执行次数</span><br><span class="line">  animation-direction: alternate-reverse;反转播放</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多媒体查询"><a href="#多媒体查询" class="headerlink" title="多媒体查询"></a>多媒体查询</h4><p>eg:09</p><p>为了实现不同的设备上出现不同的布局效果或者样式效果而产生的。</p><p>原理就是根据不同设备让哪一种样式生效。</p><p>注：and旁边有空格，否则不生效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*不低于500px是红色*/</span><br><span class="line">@media screen and (min-width: 500px) &#123;</span><br><span class="line">    h1&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*不低于666px是绿黄色*/</span><br><span class="line">@media screen and (min-width: 666px) &#123;</span><br><span class="line">    h1&#123;</span><br><span class="line">        color: greenyellow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*不低于777px是蓝色*/</span><br><span class="line">@media screen and (min-width: 777px) &#123;</span><br><span class="line">    h1&#123;</span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h4><p>eg:10-&gt;第一种flex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    流式布局</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>  1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>  2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>eg:10-&gt;第二种多列</p><p>column-count: 设置X列。</p><p>column-fill: 设置填补。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> style=&quot;<span class="attribute">column-count</span>: <span class="number">2</span>;<span class="attribute">column-fill</span>: balance<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-Web"><a href="#JavaScript-Web" class="headerlink" title="JavaScript Web"></a>JavaScript Web</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>代码版本：ES6</p><p>用于前端写脚本语言；</p><p>编写事件；</p><p><strong>控制H5和CSS用，请求数据。</strong></p><h4 id="三种使用方式"><a href="#三种使用方式" class="headerlink" title="三种使用方式:"></a>三种使用方式:</h4><p>eg:01基础</p><p><strong>外部</strong>、<strong>script标签、普通标签。</strong></p><p>常见代码结构：</p><p>html代码（上）</p><p>script代码（中）</p><p>style样式（下）</p><h4 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h4><p>eg：02显示方式</p><p>重点掌握：console.log和alert（）函数，innerHTML改变某个标签的内容。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>const：常量修饰符</p><h5 id="var是什么："><a href="#var是什么：" class="headerlink" title="var是什么："></a>var是什么：</h5><p>var不是关键字，它相当于是<strong>一种动态类型</strong>；<br>var动态类型是编译器根据变量所赋的值来推断类型；<br>var 没有改变Java的本质，var只是一种简便的写法，<br>就是说在定义局部变量时，任意什么类型都可以用var定义变量的类型会根据所赋的值来判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">独一无二的：Symbol</span><br><span class="line">console.log(Symbol(1)==Symbol(1))</span><br><span class="line">结果是false</span><br></pre></td></tr></table></figure><h4 id="js事件"><a href="#js事件" class="headerlink" title="js事件"></a>js事件</h4><p>eg:05js事件</p><p><img src="/%5Cimg%5Cimage-20231004211738433.png" alt="image-20231004211738433"></p><p>console.log（）：相当于java的sout</p><p>alert（）:弹窗</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="比较运算符："><a href="#比较运算符：" class="headerlink" title="比较运算符："></a>比较运算符：</h4><p>​&#x3D;&#x3D;：  只比较值</p><p>​&#x3D;&#x3D;&#x3D; : 类型和值都一样才返回true</p><p>​!&#x3D;&#x3D;：类型或值不同就返回true</p><h4 id="typeof："><a href="#typeof：" class="headerlink" title="typeof："></a>typeof：</h4><p>判断一个实例属不属于一个类</p><p>相当于java中的 instanceof </p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>浏览器对象模式（Browser Object Model）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">使用方式：</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>132<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1322<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 通过用户自定义ID获取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> h1 = <span class="variable language_">window</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(h1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    h1.<span class="property">innerHTML</span> = <span class="string">&#x27;成功插入HTML页面中&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 通过自带标签名称获取其他标签，这里相当于查找全部使用div标签的。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> h1s= <span class="variable language_">window</span>.<span class="property">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(h1s);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(h1s[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(h1s[<span class="number">1</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231005104240699.png" alt="image-20231005104240699"></p><p><img src="/%5Cimg%5Cimage-20231005103843007.png" alt="image-20231005103843007"></p><p><img src="/%5Cimg%5Cimage-20231005103909755.png" alt="image-20231005103909755"></p><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage:"></a>localStorage:</h4><p>字典</p><p>eg:07里面有详解</p><h4 id="setTimeOut（重点）"><a href="#setTimeOut（重点）" class="headerlink" title="setTimeOut（重点）:"></a>setTimeOut（重点）:</h4><p>时延方法</p><p>eg:07详解</p><h4 id="setInterval："><a href="#setInterval：" class="headerlink" title="setInterval："></a>setInterval：</h4><p>通过时间来循环。</p><p>eg：07</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>文档对象模型（<em><strong>Document Object Model</strong></em>)</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p><img src="/%5Cimg%5Cimage-20231005165603518.png" alt="image-20231005165603518"></p><p>eg:08</p><h4 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h4><p>多出现在网站复制收费上</p><p><img src="/%5Cimg%5Cimage-20231005165638968.png" alt="image-20231005165638968"></p><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><p>JSON对象：最外层一定是花括号</p><p>JSON数组：最外层一定是中括号</p><p>js中重要的两个函数：</p><p>把js对象或js数组变成js字符串。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str=JSON.stringify(arr);</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231005202147574.png" alt="image-20231005202147574"></p><h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
          <category> 前端汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/10/29/Spring/"/>
      <url>/2023/10/29/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="一、Spring简介"><a href="#一、Spring简介" class="headerlink" title="一、Spring简介"></a>一、Spring简介</h2><p>Spring是一个容器，或者叫工厂</p><p>核心思想是Ioc和AOP</p><p><img src="/%5Cimg%5Cimage-20231120095819774.png" alt="image-20231120095819774"></p><h3 id="1、Spring全家桶"><a href="#1、Spring全家桶" class="headerlink" title="1、Spring全家桶"></a>1、Spring全家桶</h3><p><img src="/%5Cimg%5Cimage-20231120101010937.png" alt="image-20231120101010937"></p><h2 id="二、Spring-IoC"><a href="#二、Spring-IoC" class="headerlink" title="二、Spring IoC"></a>二、Spring IoC</h2><p>控制反转</p><h3 id="1、框架部署"><a href="#1、框架部署" class="headerlink" title="1、框架部署"></a>1、框架部署</h3><p>和创建maven一样</p><p>pom.xml中需要添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2、IoC和DI"><a href="#2、IoC和DI" class="headerlink" title="2、IoC和DI"></a>2、IoC和DI</h3><p><img src="/%5Cimg%5Cimage-20231120143441894.png" alt="image-20231120143441894"></p><p><img src="/%5Cimg%5Cimage-20231121154240268.png" alt="image-20231121154240268"></p><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入:"></a>set方法注入:</h4><p><img src="/%5Cimg%5Cimage-20231121205645857.png" alt="image-20231121205645857"></p><p><img src="/%5Cimg%5Cimage-20231121205613227.png" alt="image-20231121205613227"></p><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入:"></a>构造器注入:</h4><p>主要是标签名字记不住</p><p><img src="/%5Cimg%5Cimage-20231121205503430.png" alt="image-20231121205503430"></p><h4 id="接口注入：略"><a href="#接口注入：略" class="headerlink" title="接口注入：略"></a>接口注入：略</h4><h3 id="3、Bean的作用域"><a href="#3、Bean的作用域" class="headerlink" title="3、Bean的作用域"></a>3、Bean的作用域</h3><p><img src="/%5Cimg%5Cimage-20231121211451815.png" alt="image-20231121211451815"></p><h3 id="4、Bean的生命周期"><a href="#4、Bean的生命周期" class="headerlink" title="4、Bean的生命周期"></a>4、Bean的生命周期</h3><p><img src="/%5Cimg%5Cimage-20231121212417802.png" alt="image-20231121212417802"></p><h3 id="5、Bean的自动装配"><a href="#5、Bean的自动装配" class="headerlink" title="5、Bean的自动装配"></a>5、Bean的自动装配</h3><p><img src="/%5Cimg%5Cimage-20231121213649373.png" alt="image-20231121213649373"></p><h3 id="6、IoC工作原理"><a href="#6、IoC工作原理" class="headerlink" title="6、IoC工作原理"></a>6、IoC工作原理</h3><p><img src="/%5Cimg%5Cimage-20231121220955864.png" alt="image-20231121220955864"></p><h3 id="7、常用注解"><a href="#7、常用注解" class="headerlink" title="7、常用注解"></a>7、常用注解</h3><h4 id="（1）声明注解"><a href="#（1）声明注解" class="headerlink" title="（1）声明注解"></a>（1）声明注解</h4><p><img src="/%5Cimg%5Cimage-20231122094426016.png" alt="image-20231122094426016"></p><p><img src="/%5Cimg%5Cimage-20231122110152738.png" alt="image-20231122110152738"></p><p><img src="/%5Cimg%5Cimage-20231122195858827.png" alt="image-20231122195858827"></p><p><img src="/%5Cimg%5Cimage-20231122203239878.png" alt="image-20231122203239878"></p><h3 id="8、代理设计模式"><a href="#8、代理设计模式" class="headerlink" title="8、代理设计模式"></a>8、代理设计模式</h3><h4 id="（1）静态代理"><a href="#（1）静态代理" class="headerlink" title="（1）静态代理"></a>（1）静态代理</h4><p>重点：个人认为可以提高很大的效率</p><p><img src="/%5Cimg%5Cimage-20231123013343182.png" alt="image-20231123013343182"></p><h4 id="（2）动态代理"><a href="#（2）动态代理" class="headerlink" title="（2）动态代理"></a>（2）动态代理</h4><h6 id="JDK动态代理："><a href="#JDK动态代理：" class="headerlink" title="JDK动态代理："></a>JDK动态代理：</h6><p>只能为实现接口的类进行代理</p><p>具体解释在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G:\BE\Spring\Spring_IoC\Test2\src\main\java\com\lqh\test\Test2.java</span><br></pre></td></tr></table></figure><p>路径下</p><h6 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h6><p>没有实现接口也能代理</p><p><img src="/%5Cimg%5Cimage-20231123204503096.png" alt="image-20231123204503096"></p><p>具体解释在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G:\BE\Spring\Spring_IoC\Test2\src\main\java\com\lqh\test\Test3.java</span><br></pre></td></tr></table></figure><p>路径下</p><h2 id="三、Spring-AOP"><a href="#三、Spring-AOP" class="headerlink" title="三、Spring AOP"></a>三、Spring AOP</h2><h3 id="1、AOP概念"><a href="#1、AOP概念" class="headerlink" title="1、AOP概念"></a>1、AOP概念</h3><p><img src="/%5Cimg%5Cimage-20231123212120051.png" alt="image-20231123212120051"></p><h3 id="2、框架部署"><a href="#2、框架部署" class="headerlink" title="2、框架部署"></a>2、框架部署</h3><p>maven配置依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="3、AOP配置–基于XML"><a href="#3、AOP配置–基于XML" class="headerlink" title="3、AOP配置–基于XML"></a>3、AOP配置–基于XML</h3><p>（1）创建一个切面类</p><p>（2）将切面类配置给Spring容器(配置XML文件)</p><p>（3）声明切入点（哪些类需要切入）</p><p>（4）配置AOP的通知策略（就是切面类中的方法）</p><p><img src="/%5Cimg%5Cimage-20231123234416642.png" alt="image-20231123234416642"></p><h3 id="4、切入点声明"><a href="#4、切入点声明" class="headerlink" title="4、切入点声明"></a>4、切入点声明</h3><p>声明可以用*号达到目的</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 声明切入点   第一个*表示任意返回值，第二表示Impl中的类，第三个*表示方法,(..)表示有无参参数--&gt;</span><br><span class="line">&lt;aop:pointcut id=<span class="string">&quot;dao_all&quot;</span> expression=<span class="string">&quot;execution(* com.lqh.dao.Impl.*.*(..))&quot;</span>/&gt;</span><br><span class="line">&lt;aop:pointcut id=<span class="string">&quot;dao_all&quot;</span> expression=<span class="string">&quot;execution(void com.lqh.dao.Impl.Student.*(..))&quot;</span>/&gt;</span><br><span class="line">&lt;aop:pointcut id=<span class="string">&quot;dao_all&quot;</span> expression=<span class="string">&quot;execution(* com.lqh.dao.Impl.*.*(..))&quot;</span>/&gt;</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231124002440810.png" alt="image-20231124002440810"></p><h3 id="5、通知策略"><a href="#5、通知策略" class="headerlink" title="5、通知策略"></a>5、通知策略</h3><p>aop:aspect</p><p><img src="/%5Cimg%5Cimage-20231124011014837.png" alt="image-20231124011014837"></p><h5 id="around-环绕通知"><a href="#around-环绕通知" class="headerlink" title="around:环绕通知"></a>around:环绕通知</h5><p>（方法必须如下定义，否则报错）</p><p><img src="/%5Cimg%5Cimage-20231124010652208.png" alt="image-20231124010652208"></p><h3 id="6、注解配置"><a href="#6、注解配置" class="headerlink" title="6、注解配置"></a>6、注解配置</h3><p>（1）配置applicationContext.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--    声明使用注解配置    --&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.lqh&quot;/&gt;</span><br><span class="line">&lt;!--基于注解配置的AOP代理--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>（2）新建一个切入面（类）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class txManger &#123;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(* com.lqh.dao.*.*(..))&quot;)</span><br><span class="line">    public void  pc1()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;pc1()&quot;)</span><br><span class="line">    public void begin()&#123;</span><br><span class="line">        System.out.println(&quot;开启事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After(&quot;pc1()&quot;)</span><br><span class="line">    public void commit()&#123;</span><br><span class="line">        System.out.println(&quot;提交事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;pc1()&quot;)</span><br><span class="line">    public Object printExecuteTime(ProceedingJoinPoint point) throws Throwable &#123;</span><br><span class="line">        long time=System.currentTimeMillis();</span><br><span class="line">        Object v = point.proceed();</span><br><span class="line">        long time1=System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;消耗时间:&quot;+(time1-time));</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试即可</p><p>注：注解虽然方便了许多，但在拉取jar包时还是需要在xml文件中配置代理（切面）。</p><p>自定义类用注解，第三方类XML。</p><h2 id="四、Spring整合MyBatis"><a href="#四、Spring整合MyBatis" class="headerlink" title="四、Spring整合MyBatis"></a>四、Spring整合MyBatis</h2><h3 id="1、Spring对MyBatis提供的支持"><a href="#1、Spring对MyBatis提供的支持" class="headerlink" title="1、Spring对MyBatis提供的支持"></a>1、Spring对MyBatis提供的支持</h3><p><img src="/%5Cimg%5Cimage-20231124142629009.png" alt="image-20231124142629009"></p><h3 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h3><h4 id="（1）maven中导入依赖"><a href="#（1）maven中导入依赖" class="headerlink" title="（1）maven中导入依赖"></a>（1）maven中导入依赖</h4><p>​(Mybatis和Spring)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">8.0</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.5</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.2</span><span class="number">.13</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.0</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.2</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>（2）创建各自的配置文件</p><p><img src="/%5Cimg%5Cimage-20231124175412146.png" alt="image-20231124175412146"></p><h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><p>因为Spring支持MyBatis（万物皆对象（数据源也是个对象）），所以直接在Spring中配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载druid属性文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;druid.properties&quot;</span>/&gt;</span><br><span class="line">&lt;!--    依赖Spring容器完成数据源DataSource的创建--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;driverObject&quot;</span> class=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;druidDataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">&lt;!--        因为driver（<span class="number">17</span>行）需要的是对象，所以用<span class="number">14</span>行用bean创建了一个对象传入<span class="number">17</span>行--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driver&quot;</span> ref=<span class="string">&quot;driverObject&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">&quot;initialSize&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;minIdle&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxActive&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxWait&quot;</span> value=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;SqlsessionFactory&quot;</span> class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;!--        配置数据源--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="line">&lt;!--        mapper映射文件--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;mapperLocations&quot;</span> value=<span class="string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span><br><span class="line">&lt;!--        配置需要定义别名的包--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;typeAliasesPackage&quot;</span> value=<span class="string">&quot;com.lqh.pojo.*&quot;</span>/&gt;</span><br><span class="line">&lt;!--        可选：配置MyBatis的主配置文件--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    通过扫描器获取会话工厂（<span class="number">30</span>行）里面的会话，然后创建所有DAO接口对象，存储在Spring容器--&gt;</span><br><span class="line">    &lt;bean class=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> value=<span class="string">&quot;SqlsessionFactory&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;basePackage&quot;</span> value=<span class="string">&quot;com.lqh.dao&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h5 id="druid-properties"><a href="#druid-properties" class="headerlink" title="druid.properties"></a>druid.properties</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">druid.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">druid.url=jdbc:mysql:<span class="comment">//localhost:3307/test_spring?characterEncoding=utf-8</span></span><br><span class="line">druid.username=root</span><br><span class="line">druid.password=root</span><br><span class="line"></span><br><span class="line">##连接池参数</span><br><span class="line">druid.pool.init=<span class="number">2</span></span><br><span class="line">druid.pool.minIdle=<span class="number">3</span></span><br><span class="line">druid.pool.maxActive=<span class="number">20</span></span><br><span class="line">druid.pool.timeout=<span class="number">30000</span></span><br></pre></td></tr></table></figure><h5 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=<span class="string">&quot;cacheEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>StudentMapper.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.lqh.dao.StudentDao&quot;</span>&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;student&quot;</span> type=<span class="string">&quot;com.lqh.pojo.Student&quot;</span>&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;studentId&quot;</span> property=<span class="string">&quot;studentId&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;studentName&quot;</span> property=<span class="string">&quot;studentName&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;studentPassword&quot;</span> property=<span class="string">&quot;studentPassword&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;studentRealName&quot;</span> property=<span class="string">&quot;studentRealName&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;studentImg&quot;</span> property=<span class="string">&quot;studentImg&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;listStudent&quot;</span> resultMap=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        select *</span><br><span class="line">        from students</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h3><h4 id="（1）事务隔离级别"><a href="#（1）事务隔离级别" class="headerlink" title="（1）事务隔离级别"></a>（1）事务隔离级别</h4><p>串行化：SERIALIZABLE</p><p>可重复读：REPEATABLE_READ</p><p>读已提交：READ_COMMITTED</p><p>读未提交：READ_UNCOMMITED</p><p>T1和T2表示线程。</p><p>效率高，安全性就差；</p><p>安全性差，效率就高。</p><p><img src="/%5Cimg%5Cimage-20231125143654522.png" alt="image-20231125143654522"></p><h4 id="（2）事务传播机制"><a href="#（2）事务传播机制" class="headerlink" title="（2）事务传播机制"></a>（2）事务传播机制</h4><p><strong>单词要背，面试高概率问这个。</strong></p><p>重点记住required和supports</p><p><img src="/%5Cimg%5Cimage-20231125145536173.png" alt="image-20231125145536173"></p><h4 id="（3）事务管理配置—XML配置"><a href="#（3）事务管理配置—XML配置" class="headerlink" title="（3）事务管理配置—XML配置"></a>（3）事务管理配置—XML配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    <span class="number">0</span>、声明事务管理的命名空间和schema位置。--&gt;</span><br><span class="line">xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">  xsi:schemaLocation=http:<span class="comment">//www.springframework.org/schema/tx</span></span><br><span class="line">   http:<span class="comment">//www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!--    <span class="number">1</span>、将Spring提供的事务管理配置给Spring容器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;!--    <span class="number">2</span>、通过Spring jdbc提供的tx标签，声明事务管理策略--&gt;</span><br><span class="line">    &lt;tx:advice id=<span class="string">&quot;txAdvice&quot;</span> transaction-manager=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;insert*&quot;</span> isolation=<span class="string">&quot;REPEATABLE_READ&quot;</span> propagation=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;delete*&quot;</span> isolation=<span class="string">&quot;REPEATABLE_READ&quot;</span> propagation=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;update*&quot;</span> isolation=<span class="string">&quot;REPEATABLE_READ&quot;</span> propagation=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;query*&quot;</span> isolation=<span class="string">&quot;REPEATABLE_READ&quot;</span> propagation=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line">&lt;!--   <span class="number">3</span>、将事务管理策略以AOP配置，应用于DAO操作方法--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id=<span class="string">&quot;curd&quot;</span> expression=<span class="string">&quot;execution(* com.lqh.service.*.*(..))&quot;</span>/&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=<span class="string">&quot;txAdvice&quot;</span> pointcut-ref=<span class="string">&quot;curd&quot;</span>/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h4 id="（4）事务管理配置—注解配置"><a href="#（4）事务管理配置—注解配置" class="headerlink" title="（4）事务管理配置—注解配置"></a>（4）事务管理配置—注解配置</h4><p><img src="/%5Cimg%5Cimage-20231125161422795.png" alt="image-20231125161422795"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSpring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2023/10/28/Ajax/"/>
      <url>/2023/10/28/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>四种使用方式：原生、jQuery、fetch、axios</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>异步的JS和XML。</p><p>优势：无刷新获取数据。（页面中的侧边栏，一二级菜单）</p><p>向服务器发Ajax异步请求。</p><h3 id="XLM简介"><a href="#XLM简介" class="headerlink" title="XLM简介"></a>XLM简介</h3><p>可扩展标记语言。</p><p>用途：传输和存储数据。</p><p>不同：HTML是预定义标签</p><p>​    XML不是预定义，都是自定义标签。</p><h2 id="Ajax的特点："><a href="#Ajax的特点：" class="headerlink" title="Ajax的特点："></a>Ajax的特点：</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>无需刷新页面即可与服务器端进行通信。</p><p>允许用户事件来更新部分页面内容。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>没有浏览历史</p><p>存在跨越问题（同源）</p><p>SEO不友好</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>协议：超文本传输协议</p><p>就是一种约定，规则</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>重点是格式与规则</p><p>向浏览器发的请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">行POST（方法） /login（路径）HTTP/1.1（协议版本）</span><br><span class="line">头Host: atguigu.com</span><br><span class="line">Cookie:name=guigu</span><br><span class="line">Content-type:application/x-www-form-urlencoded</span><br><span class="line">User-Agent: chrome 83</span><br><span class="line">空行</span><br><span class="line">体username=admin&amp;password=admin</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">行HTTP/1.1 200 ok(404,500,403,200,这些都是响应状态码)</span><br><span class="line">头Content-Type:text/html;charset=utf-8</span><br><span class="line"> Content-length:2048</span><br><span class="line"> Content-encoding:gzip</span><br><span class="line"></span><br><span class="line">空行 </span><br><span class="line">体 &lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>第一个红框是请求头和响应头所在。</p><p>第二个是响应体</p><p><img src="/%5Cimg%5Cimage-20230925152628073.png" alt="image-20230925152628073"></p><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p>eg：vscode.Ajax.express基本使用.js</p>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2023/10/13/Maven/"/>
      <url>/2023/10/13/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Maven是一个项目管理工具，将项目开发和管理过程抽象成一个**项目对象模型(POW)**。</p><p>如果我要做一道菜，需要食材和材料。</p><p>而maven就相当于超市里面的菜品包（只需煮一煮就可以吃了）</p><h3 id="（一）、核心"><a href="#（一）、核心" class="headerlink" title="（一）、核心"></a>（一）、核心</h3><p>Maven的核心为中间框，并分解为两部分。</p><p><img src="/%5Cimg%5Cimage-20231022090301618.png" alt="image-20231022090301618"></p><h3 id="（二）、作用"><a href="#（二）、作用" class="headerlink" title="（二）、作用"></a>（二）、作用</h3><p>项目构建：提供标准的、跨平台的自动化项目构建方式。</p><p>依赖管理：快捷管理项目依赖的资源（jar包），避免资源间版本冲突问题。</p><p>统一开放结构：提供标准的、统一的项目结构。</p><p>无论是传统的瀑布式开发或者流行的敏捷开发，maven都有一席之地</p><h2 id="二、实践"><a href="#二、实践" class="headerlink" title="二、实践"></a>二、实践</h2><h3 id="（一）POM-xml"><a href="#（一）POM-xml" class="headerlink" title="（一）POM.xml"></a>（一）POM.xml</h3><h5 id="1-打包方式"><a href="#1-打包方式" class="headerlink" title="1.打包方式"></a>1.打包方式</h5><p><img src="/%5Cimg%5Cimage-20231028205030830.png" alt="image-20231028205030830"></p><h5 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2.生命周期"></a>2.生命周期</h5><p>管理项目的生命周期以及命令</p><p><img src="/%5Cimg%5Cimage-20231028223644858.png" alt="image-20231028223644858"></p><h5 id="3-xml的配置"><a href="#3-xml的配置" class="headerlink" title="3.xml的配置"></a>3.xml的配置</h5><h6 id="（1）指定jdk版本"><a href="#（1）指定jdk版本" class="headerlink" title="（1）指定jdk版本"></a>（1）指定jdk版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">目录：maven/conf/settings.xml</span><br><span class="line"></span><br><span class="line">&lt;profile&gt;    </span><br><span class="line">&lt;id&gt;jdk-<span class="number">1.8</span>&lt;/id&gt;    </span><br><span class="line">&lt;activation&gt;    </span><br><span class="line">&lt;activeByDefault&gt;<span class="literal">true</span>&lt;/activeByDefault&gt;    </span><br><span class="line">&lt;jdk&gt;<span class="number">1.8</span>&lt;/jdk&gt;    </span><br><span class="line">&lt;/activation&gt;    </span><br><span class="line">&lt;properties&gt;    </span><br><span class="line">&lt;maven.compiler.source&gt;<span class="number">1.8</span>&lt;/maven.compiler.source&gt;    </span><br><span class="line">&lt;maven.compiler.target&gt;<span class="number">1.8</span>&lt;/maven.compiler.target&gt;    </span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;<span class="number">1.8</span>&lt;/maven.compiler.compilerVersion&gt;   </span><br><span class="line">&lt;/properties&gt;    </span><br><span class="line">&lt;/profile&gt; </span><br></pre></td></tr></table></figure><h6 id="（2）pom中添加tomcat"><a href="#（2）pom中添加tomcat" class="headerlink" title="（2）pom中添加tomcat"></a>（2）pom中添加tomcat</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pom.xml的配置</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;port&gt;<span class="number">8080</span>&lt;/port&gt;</span><br><span class="line">          &lt;path&gt;/homework&lt;/path&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure><h6 id="（3）c3p0配置文件"><a href="#（3）c3p0配置文件" class="headerlink" title="（3）c3p0配置文件"></a>（3）c3p0配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">c3p0-config.xml的配置</span><br><span class="line"></span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">    &lt;!--使用默认的配置读取数据库连接池对象 --&gt;</span><br><span class="line">    &lt;<span class="keyword">default</span>-config&gt;</span><br><span class="line">        &lt;!--  连接参数 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClass&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="comment">//localhost:3306/website?serverTimezone=Asia/Shanghai&lt;/property&gt;</span></span><br><span class="line">        &lt;property name=<span class="string">&quot;user&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span>&gt;<span class="number">123456</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 连接池参数 --&gt;</span><br><span class="line">        &lt;!--初始化申请的连接数量--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;initialPoolSize&quot;</span>&gt;<span class="number">5</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--最大的连接数量--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxPoolSize&quot;</span>&gt;<span class="number">10</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--超时时间--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;<span class="number">3000</span>&lt;/property&gt;</span><br><span class="line">    &lt;/<span class="keyword">default</span>-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure><h6 id="lombok的三个注解"><a href="#lombok的三个注解" class="headerlink" title="lombok的三个注解"></a>lombok的三个注解</h6><p>@NoArgsConstructor&#x2F;&#x2F;无参构造<br>@AllArgrsConstrutor&#x2F;&#x2F;有参构造<br>@Data</p><h5 id="4-依赖范围"><a href="#4-依赖范围" class="headerlink" title="4.依赖范围"></a>4.依赖范围</h5><p><scope>compile</scope></p><p><img src="/%5Cimg%5Cimage-20231028231924418.png" alt="image-20231028231924418"></p><h3 id="（二）-实践作业"><a href="#（二）-实践作业" class="headerlink" title="（二） 实践作业"></a>（二） 实践作业</h3><p>目录：G:\BE\maven\Save\Maven_homework</p><p>pojo：实体类（用户表的实体类）</p><p>DAO：对数据库操作（查询用户表的实现代码）</p><p>service：实现业务层（帮客户查询用户表）</p><p>util：工具类（数据库连接）</p><p>web：响应给前端页面的</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSpring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb学习笔记</title>
      <link href="/2023/09/18/JavaWeb/"/>
      <url>/2023/09/18/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h1><h2 id="一、Tomcat"><a href="#一、Tomcat" class="headerlink" title="一、Tomcat"></a>一、Tomcat</h2><h3 id="BS和CS架构"><a href="#BS和CS架构" class="headerlink" title="BS和CS架构"></a>BS和CS架构</h3><p>B&#x2F;S：</p><p>​浏览器&#x2F;服务器模式</p><p><img src="/%5Cimg%5Cimage-20231006211512979.png" alt="image-20231006211512979"></p><p>C&#x2F;S：</p><p>​客户端&#x2F;服务器模式</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><p>​目前很多不是用tomcat来部署war包，</p><p>​前2条主流</p><p><img src="/%5Cimg%5Cimage-20231007113645731.png" alt="image-20231007113645731"></p><p>两种解析XML的方式</p><p>eg：Shuangtixi\javaWeb\XMLanalysis</p><p>​Demo4j解析</p><p>​SAX解析</p><h2 id="二、Servlet"><a href="#二、Servlet" class="headerlink" title="二、Servlet"></a>二、Servlet</h2><h3 id="三种创建方式："><a href="#三种创建方式：" class="headerlink" title="三种创建方式："></a>三种创建方式：</h3><p><img src="/%5Cimg%5Cimage-20231007165130713.png" alt="image-20231007165130713"></p><p>1.继承HttpServlet(主流)，覆写doGet和doPost方法，并用WebServlet（‘声明请求路径’）</p><p>eg：Servlet\src\com\lizuo\MyServlet.java</p><p>2.实现Servlet接口，覆写其抽象方法，主要方法是service（了解）</p><p>eg：Servlet\src\com\lizuo\MyServlet2.java</p><p>3.继承GenericServlet，覆写service方法。</p><p>eg：Servlet\src\com\lizuo\MyServlet3.java</p><p><strong>注：@WebServlet中必须用value&#x3D;来声明路径。而路径必须以“&#x2F;”开头，否则无法匹配。</strong></p><p>value是一个数组，表示可以有多个路径匹配到这个Servlet</p><h3 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h3><p>四个：</p><p>​1.实例化：</p><p>​懒加载、预先加载</p><p>​2.初始化：</p><p>​初始化阶段调用init（），只执行1次，从web.xml文件中获取配置信息。</p><p>​3.就绪、服务阶段：</p><p>​会调用service（）方法，HttpServlet会调用doGet或者doPost完成服务</p><p>​4.销毁：</p><p>​Servlet容器在销毁Servlet对象的时候会调用destory（）方法</p><p>两种配置方式</p><p>​注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span></span><br></pre></td></tr></table></figure><p>​web.xml方式（了解就行）</p><p><img src="/%5Cimg%5Cimage-20231009152129019.png" alt="image-20231009152129019"></p><h3 id="get和post请求："><a href="#get和post请求：" class="headerlink" title="get和post请求："></a>get和post请求：</h3><p>eg：请求方式</p><p><img src="/%5Cimg%5Cimage-20231009153856006.png" alt="image-20231009153856006"></p><h4 id="差别："><a href="#差别：" class="headerlink" title="差别："></a>差别：</h4><p>安全（post）和不安全（get）</p><p>post是存在请求体(body)</p><p>get是在URL之后（浏览器地址栏）</p><p><img src="/%5Cimg%5Cimage-20231009154225034.png" alt="image-20231009154225034"></p><p><img src="/%5Cimg%5Cimage-20231009154150174.png" alt="image-20231009154150174"></p><h3 id="转发和重定向及上下文："><a href="#转发和重定向及上下文：" class="headerlink" title="转发和重定向及上下文："></a>转发和重定向及上下文：</h3><h4 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h4><p>​无法接收到请求参数，所以不能继续传递</p><p>​<img src="/%5Cimg%5Cimage-20231009162842681.png" alt="image-20231009162842681"></p><h4 id="转发："><a href="#转发：" class="headerlink" title="转发："></a>转发：</h4><p>​可以将参数继续传递到后续的Servlet中</p><p><img src="/%5Cimg%5Cimage-20231009162823929.png" alt="image-20231009162823929"></p><h4 id="重定向和转发应用场景："><a href="#重定向和转发应用场景：" class="headerlink" title="重定向和转发应用场景："></a>重定向和转发应用场景：</h4><p>​（一）同一个服务器（应用程序）内部跳转：<strong>用转发</strong></p><p>​1.提高效率</p><p>​2.传参不用手动</p><p>​（二）不同服务器（应用程序），之间跳转：只能用重定向</p><p>比如：第三方登录（微信登录，支付宝登录）必须重定向。</p><h4 id="上下文："><a href="#上下文：" class="headerlink" title="上下文："></a>上下文：</h4><h5 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext<img src="/%5Cimg%5Cimage-20231009173319043.png" alt="image-20231009173319043"></h5><h5 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h5><p><img src="/%5Cimg%5Cimage-20231009173638209.png" alt="image-20231009173638209"></p><p><img src="/%5Cimg%5Cimage-20231009173741562.png" alt="image-20231009173741562"></p><h2 id="三、Request和Response"><a href="#三、Request和Response" class="headerlink" title="三、Request和Response"></a>三、Request和Response</h2><p><a href="https://blog.csdn.net/qq1808814025/article/details/106199159">request和response的区别!!!-CSDN博客</a></p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><h4 id="request请求："><a href="#request请求：" class="headerlink" title="request请求："></a>request请求：</h4><p>代表HTTP请求信息的对象</p><p>把客户端的请求信息封装到了request对象中</p><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><p>eg：shuangti\RequestAndResponse\src\request\Servlet1.java</p><h5 id="请求地址的东西"><a href="#请求地址的东西" class="headerlink" title="请求地址的东西"></a>请求地址的东西</h5><p><img src="/%5Cimg%5Cimage-20231010084703911.png" alt="image-20231010084703911"></p><h5 id="获取请求正文参数"><a href="#获取请求正文参数" class="headerlink" title="获取请求正文参数"></a>获取请求正文参数</h5><p><img src="/%5Cimg%5Cimage-20231010090636627.png" alt="image-20231010090636627"></p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>遍历输出请求头文件里的属性</p><p><img src="/%5Cimg%5Cimage-20231010090131466.png" alt="image-20231010090131466"></p><p>获取请求正文参数</p><p><img src="/%5Cimg%5Cimage-20231010091023887.png" alt="image-20231010091023887"></p><h3 id="ReSponse"><a href="#ReSponse" class="headerlink" title="ReSponse"></a>ReSponse</h3><p>eg: reSponse.Servlet1</p><p>代表HTTP请求信息的对象</p><p>resp 就相当于给客户端产生一个响应</p><h4 id="1-向客户端发送响应头的相关方法："><a href="#1-向客户端发送响应头的相关方法：" class="headerlink" title="1.向客户端发送响应头的相关方法："></a>1.向客户端发送响应头的相关方法：</h4><p><img src="/%5Cimg%5Cimage-20231011184338608.png" alt="image-20231011184338608"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的响应内容的格式：text/html;charset=utf-8</span></span><br><span class="line"><span class="comment">//application/json;charset=utf-8（前后端分离主流）</span></span><br><span class="line"><span class="comment">//这个方法很重要     设置媒体格式html    编码设置为utf-8</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//这个也是设置编码</span></span><br><span class="line">resp.getWriter().write(<span class="string">&quot;这是服务器返回的响应&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="常见的媒体格式类型"><a href="#常见的媒体格式类型" class="headerlink" title="常见的媒体格式类型"></a>常见的媒体格式类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">常见的媒体格式类型如下：</span><br><span class="line">text/html ： HTML格式</span><br><span class="line">text/plain ：纯文本格式</span><br><span class="line">text/xml ： XML格式</span><br><span class="line">image/gif ：gif图片格式</span><br><span class="line">image/jpeg ：jpg图片格式</span><br><span class="line">image/png：png图片格式</span><br><span class="line">以application开头的媒体格式类型：</span><br><span class="line">application/xhtml+xml ：XHTML格式</span><br><span class="line">application/xml： XML数据格式</span><br><span class="line">application/atom+xml ：Atom XML聚合格式</span><br><span class="line">application/json： JSON数据格式</span><br><span class="line">application/pdf：pdf格式</span><br><span class="line">application/msword ： Word文档格式</span><br><span class="line">application/octet-stream ： 二进制流数据（如常见的文件下载）</span><br><span class="line">application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><h4 id="json包中重要的方法："><a href="#json包中重要的方法：" class="headerlink" title="json包中重要的方法："></a>json包中重要的方法：</h4><p>​1.把java对象(user)变为JSON字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br></pre></td></tr></table></figure><p>​2.JSON字符串转为Java对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将字符串s解析为对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(s,User.class);</span><br><span class="line"><span class="comment">// 将数组转为list（集合）</span></span><br><span class="line">List&lt;User&gt; users = Arrays.asList(user1);</span><br><span class="line"><span class="comment">// 将list转为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> JSON.toJSONString(users);</span><br><span class="line"><span class="comment">//将JSON集合的字符串变成集合对象</span></span><br><span class="line">List&lt;User&gt; users1 = JSON.parseArray(s1, User.class);</span><br><span class="line">System.out.println(users1);</span><br></pre></td></tr></table></figure><h2 id="四、Cookie和HttpSession"><a href="#四、Cookie和HttpSession" class="headerlink" title="四、Cookie和HttpSession"></a>四、Cookie和HttpSession</h2><p>eg：E:\hc\Studyshuangti\CookieAndHttpSession\src\cookie</p><h3 id="（一）、Cookie"><a href="#（一）、Cookie" class="headerlink" title="（一）、Cookie"></a>（一）、Cookie</h3><h4 id="1、状态管理Cookie"><a href="#1、状态管理Cookie" class="headerlink" title="1、状态管理Cookie"></a>1、状态管理Cookie</h4><p> <img src="/%5Cimg%5Cimage-20231011214707127.png" alt="image-20231011214707127"></p><h5 id="状态管理的两种常见模式："><a href="#状态管理的两种常见模式：" class="headerlink" title="状态管理的两种常见模式："></a>状态管理的两种常见模式：</h5><p>1.客户端状态管理：Cookie</p><p>2.服务端状态管理：Session</p><h4 id="2、Cookie的优缺点"><a href="#2、Cookie的优缺点" class="headerlink" title="2、Cookie的优缺点"></a>2、Cookie的优缺点</h4><p><img src="/%5Cimg%5Cimage-20231012154938691.png" alt="image-20231012154938691"></p><h4 id="3、cookie的应用"><a href="#3、cookie的应用" class="headerlink" title="3、cookie的应用"></a>3、cookie的应用</h4><p>代码使用：</p><h5 id="（1）-创建Cookie对象"><a href="#（1）-创建Cookie对象" class="headerlink" title="（1）.创建Cookie对象"></a>（1）.创建Cookie对象</h5><p>服务器端创建Cookie并且传递到客户端浏览器的过程↓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Cookie</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;ticket&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">//利用Response把Cookie传回客户端。</span></span><br><span class="line">resp.addCookie(ticket);</span><br></pre></td></tr></table></figure><h5 id="（2）-获取cookie的值"><a href="#（2）-获取cookie的值" class="headerlink" title="（2）.获取cookie的值"></a>（2）.获取cookie的值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> cookie.getName();<span class="comment">//名字</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();<span class="comment">//值</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> cookie.getPath();<span class="comment">//路径</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">maxAge</span> <span class="operator">=</span> cookie.getMaxAge();<span class="comment">//存活时间</span></span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231011221023640.png" alt="image-20231011221023640"></p><h5 id="（3）-修改Cookie"><a href="#（3）-修改Cookie" class="headerlink" title="（3）.修改Cookie"></a>（3）.修改Cookie</h5><p>只需覆盖即可</p><p>注：需要在同一路径下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;ticket&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">ticket1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;ticket&quot;</span>, <span class="string">&quot;12321&quot;</span>);</span><br><span class="line">resp.addCookie(ticket);</span><br><span class="line">resp.addCookie(ticket1);</span><br><span class="line">ticket.setPath(<span class="string">&quot;/CookieServlet1&quot;</span>);<span class="comment">//指定Cookie路径在/CookieServlet1</span></span><br></pre></td></tr></table></figure><h5 id="（4）Cookie存活时间"><a href="#（4）Cookie存活时间" class="headerlink" title="（4）Cookie存活时间"></a>（4）Cookie存活时间</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">maxAge</span> <span class="operator">=</span> cookie.getMaxAge();<span class="comment">//获取存活时间</span></span><br><span class="line"></span><br><span class="line">ticket1.setMaxAge(-<span class="number">1</span>);<span class="comment">//设置cookie（-1为永不过期，0为删除）</span></span><br></pre></td></tr></table></figure><h5 id="（5）-编码和解码"><a href="#（5）-编码和解码" class="headerlink" title="（5）.编码和解码"></a>（5）.编码和解码</h5><p>需用相同字符编码（UTF-8）的解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//encode是指定编码</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">ticket2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(URLEncoder.encode(<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>),URLEncoder.encode(<span class="string">&quot;哈&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="comment">//decode是解码</span></span><br><span class="line">String s=URLDecoder.decode(<span class="string">&quot;%E5%93%88%E5%93%88&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><h5 id="（6）-路径"><a href="#（6）-路径" class="headerlink" title="（6）.路径"></a>（6）.路径</h5><p>如果想在任何路径下使用Cookie，那么就在根目录下创建（“&#x2F;”）。</p><h3 id="二、Session"><a href="#二、Session" class="headerlink" title="二、Session"></a>二、Session</h3><h4 id="一-、Session的概念"><a href="#一-、Session的概念" class="headerlink" title="(一)、Session的概念"></a>(一)、Session的概念</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/%5Cimg%5Cimage-20231012160626737.png" alt="image-20231012160626737"></h4><h5 id="1-session的运行方式"><a href="#1-session的运行方式" class="headerlink" title="1.session的运行方式"></a>1.session的运行方式</h5><p>第一次访问时，客户端是没Session的，服务器会给客户端创建一个，然后以cookie形式将SessionID返回</p><p>第二次客户端就会验证这个ID是否有效（1.是否是真实的ID，2.是否还在有效期内）</p><p>有效：刷新有效期继续使用该ID。 无效：重新给客户端一个新ID</p><h4 id="（二）、代码块："><a href="#（二）、代码块：" class="headerlink" title="（二）、代码块："></a>（二）、代码块：</h4><h5 id="1-创建sesssion对象"><a href="#1-创建sesssion对象" class="headerlink" title="1.创建sesssion对象"></a>1.创建sesssion对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">//括号：传入true表示如果没有session对象，就创建一个，传入false就反之。</span></span><br></pre></td></tr></table></figure><h5 id="2-设置session对象值"><a href="#2-设置session对象值" class="headerlink" title="2.设置session对象值"></a>2.设置session对象值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cookie方式存储（键值对）</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Yao&quot;</span>);</span><br><span class="line"><span class="comment">//读取name中的值</span></span><br><span class="line">session.getAttribute(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.删除（销毁）session对象值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除session对象1.主动删除 2.被动（设置死亡时间）</span></span><br><span class="line"><span class="comment">//1.直接让Session失效</span></span><br><span class="line">session.invalidate();</span><br><span class="line"><span class="comment">//2.设值超时时间（死亡时间）</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//默认30分钟（没有任何操作的情况下），这里设置的是1h</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><h4 id="（一）、区别"><a href="#（一）、区别" class="headerlink" title="（一）、区别"></a>（一）、区别</h4><p><img src="/%5Cimg%5Cimage-20231018093957397.png" alt="image-20231018093957397"></p><p><img src="/%5Cimg%5Cimage-20231013185748120.png" alt="image-20231013185748120"></p><h1 id="五、Filter和Listener"><a href="#五、Filter和Listener" class="headerlink" title="五、Filter和Listener"></a>五、Filter和Listener</h1><h2 id="Filter（过滤器）"><a href="#Filter（过滤器）" class="headerlink" title="Filter（过滤器）"></a>Filter（过滤器）</h2><h2 id="（一）、运行原理"><a href="#（一）、运行原理" class="headerlink" title="（一）、运行原理"></a>（一）、运行原理</h2><h3 id="1-流程："><a href="#1-流程：" class="headerlink" title="1.流程："></a>1.流程：</h3><p>​客户端向Servlet发送请求，请求经过N个Filter过滤器验证，满足条件才通过。</p><p>​通过之后Servlet做出响应返回给Filter过滤器，Filter过滤器又返回给客户端。</p><p><img src="/%5Cimg%5Cimage-20231013194755318.png" alt="image-20231013194755318"></p><h3 id="2-应用场景-面试可能问"><a href="#2-应用场景-面试可能问" class="headerlink" title="2.应用场景(面试可能问)"></a>2.应用场景(面试可能问)</h3><p><img src="/%5Cimg%5Cimage-20231013195210854.png" alt="image-20231013195210854"></p><h3 id="3-两种初始化"><a href="#3-两种初始化" class="headerlink" title="3.两种初始化"></a>3.两种初始化</h3><h4 id="1-XML文件初始化"><a href="#1-XML文件初始化" class="headerlink" title="(1).XML文件初始化"></a>(1).XML文件初始化</h4><p><img src="/%5Cimg%5Cimage-20231013222004649.png" alt="image-20231013222004649"></p><h4 id="2-注解初始化"><a href="#2-注解初始化" class="headerlink" title="(2).注解初始化"></a>(2).注解初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(value = &quot;/MyServletC&quot;,initParams = &#123;@WebInitParam(name=&quot;key&quot;,value=&quot;值&quot;)&#125;)</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/Servlet1&quot;)</span><span class="comment">//这的路径是需要过滤的Servlet</span></span><br></pre></td></tr></table></figure><h3 id="4-过滤链"><a href="#4-过滤链" class="headerlink" title="4.过滤链"></a>4.过滤链</h3><p>过滤链的执行顺序：</p><h4 id="（1）注解配置："><a href="#（1）注解配置：" class="headerlink" title="（1）注解配置："></a>（1）注解配置：</h4><p>​和类名自然顺序（ABCDEF）有关</p><h4 id="（2）XML配置："><a href="#（2）XML配置：" class="headerlink" title="（2）XML配置："></a>（2）XML配置：</h4><p>​和配置顺序有关</p><h2 id="（二）代码块"><a href="#（二）代码块" class="headerlink" title="（二）代码块"></a>（二）代码块</h2><p>eg:E:\hc\Studyshuangti\javaWeb\FilterAndListener\src</p><p>​servlet &#x2F; MyServlet1、MyServlet2</p><p>​filter</p><p>\ABCFilter是测试过滤器的功能</p><p>\DEFFilter是过滤链</p><p>filter有三个方法：init(初始化)，destroy（销毁）, doFilter（过滤）</p><p>编写过滤器的流程：</p><p>​1.实现Filter接口</p><p>​2.重写doFilter方法</p><p>​3.写入判定条件（放行哪些需求）</p><h3 id="1-doFilter放行"><a href="#1-doFilter放行" class="headerlink" title="1.doFilter放行"></a>1.doFilter放行</h3><p>注：doFilter是用来过滤（请求和响应）的唯一方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果没有放行，默认是拒绝</span></span><br><span class="line">System.out.println(<span class="string">&quot;这是请求过滤器&quot;</span>);</span><br><span class="line">        <span class="comment">//以代码为边界，上是请求过滤</span></span><br><span class="line">filterChain.doFilter(req,reqs);</span><br><span class="line">        <span class="comment">//下是响应过滤</span></span><br><span class="line">        System.out.println(<span class="string">&quot;这是响应过滤器&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-判断放行条件"><a href="#2-判断放行条件" class="headerlink" title="2.判断放行条件"></a>2.判断放行条件</h3><p>eg：CFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">servletResponse.setCharacterEncoding(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//设置编码为gbk</span></span><br><span class="line">      Map&lt;String, String[]&gt; parameterMap = servletRequest.getParameterMap();</span><br><span class="line">      System.out.println(<span class="string">&quot;这是请求过滤&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (parameterMap.containsKey(<span class="string">&quot;name&quot;</span>))&#123;<span class="comment">//caotainsKey方法是直接判定map集合中有没有指定的值</span></span><br><span class="line">          filterChain.doFilter(servletRequest,servletResponse);   <span class="comment">//放行的方法</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          servletResponse.getWriter().write(<span class="string">&quot;没有找到name，返回&quot;</span>);<span class="comment">//给客户端用IO流输出信息，没有找到目标值</span></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是响应过滤&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Listener（监听器）"><a href="#Listener（监听器）" class="headerlink" title="Listener（监听器）"></a>Listener（监听器）</h2><h2 id="（一）、概念"><a href="#（一）、概念" class="headerlink" title="（一）、概念"></a>（一）、概念</h2><p>监听Web中的某些对象、信息的创建、销毁、增加、修改、删除的发生。然后做出对应的相应处理。</p><h2 id="（二）、代码块"><a href="#（二）、代码块" class="headerlink" title="（二）、代码块"></a>（二）、代码块</h2><p>eg：</p><p>​servlet &#x2F; MyServlet3、MyServlet4</p><p>​和listener</p><p>四种接口：</p><p>​监听属性变化</p><p>​1.HttpSessionAttributeListener</p><p>​2.ServletContextAttributeListener</p><p>​监听生命周期</p><p>​3.ServletContextListener</p><p>​4.HttpSessionListener</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p><img src="/%5Cimg%5Cimage-20231014123653060.png" alt="image-20231014123653060"></p><h1 id="六、Druid数据库连接池"><a href="#六、Druid数据库连接池" class="headerlink" title="六、Druid数据库连接池"></a>六、Druid数据库连接池</h1><h2 id="一-、原理及其作用"><a href="#一-、原理及其作用" class="headerlink" title="(一)、原理及其作用"></a>(一)、原理及其作用</h2><h3 id="1-概念图"><a href="#1-概念图" class="headerlink" title="1.概念图"></a>1.概念图<img src="/%5Cimg%5Cimage-20231014160300605.png" alt="image-20231014160300605"></h3><h3 id="2-参数的解释"><a href="#2-参数的解释" class="headerlink" title="2.参数的解释"></a>2.参数的解释</h3><p><img src="/%5Cimg%5Cimage-20231015095720297.png" alt="image-20231015095720297"></p><p><img src="/%5Cimg%5Cimage-20231015095819433.png" alt="image-20231015095819433"></p><h3 id="3-创建一个Druid"><a href="#3-创建一个Druid" class="headerlink" title="3.创建一个Druid"></a>3.创建一个Druid</h3><p>eg：E:\hc\Studyshuangti\javaWeb\Druid\src\com\bean\DateSourceBean.java</p><p>1.导入druid包</p><p>2.配置数据源（DateSourceBean.java）</p><p>3.创建DruidDataSource实例，设置相关属性即可。</p><h3 id="4-各包的作用"><a href="#4-各包的作用" class="headerlink" title="4.各包的作用"></a>4.各包的作用</h3><p><img src="/%5Cimg%5Cimage-20231015132340995.png" alt="image-20231015132340995"></p><p>bean：初始化配置文件（德鲁伊的连接池）</p><p>pojo-&gt;entity：实体类</p><p>pojo-&gt;vo：实现序列化的接口</p><p>pool：普通连接池</p><p>Servlet：主要的文件包</p><p>Util：工具类</p><h2 id="（二）、代码块-1"><a href="#（二）、代码块-1" class="headerlink" title="（二）、代码块"></a>（二）、代码块</h2><h3 id="1-查询表中数据"><a href="#1-查询表中数据" class="headerlink" title="1.查询表中数据"></a>1.查询表中数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DruidPooledConnection</span> <span class="variable">connection1</span> <span class="operator">=</span> DateSourceBean.dataSource.getConnection();<span class="comment">//创建连接初始化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from city limit 0,10&quot;</span>;<span class="comment">//sql语句</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//JDBC操作流程</span></span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection1.prepareStatement(sql);<span class="comment">//预编译sql语句</span></span><br><span class="line">            System.out.println(statement);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery();<span class="comment">//执行sql语句</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;<span class="comment">//判断有没有到最后一个</span></span><br><span class="line">                <span class="comment">//打印表中数据</span></span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            connection1.recycle();<span class="comment">//回收连接对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5Cimage-20231015150036443.png" alt="image-20231015150036443"></p><p>实体类通过表逆向生成实体包</p><p>dao是接口</p><h3 id="2-反射和封装vo对象"><a href="#2-反射和封装vo对象" class="headerlink" title="2.反射和封装vo对象"></a>2.反射和封装vo对象</h3><h4 id="（1）创建一个Druid实例"><a href="#（1）创建一个Druid实例" class="headerlink" title="（1）创建一个Druid实例"></a>（1）创建一个Druid实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateSourceBean</span> &#123;</span><br><span class="line">    <span class="comment">//1.设置德鲁伊对象一出生就有的属性（初始化配置）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3307/user?serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        <span class="comment">//2.设置最大连接池数量</span></span><br><span class="line">        dataSource.setMaxActive(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//3.设置最小连接池空闲数量</span></span><br><span class="line">        dataSource.setMinIdle(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//4.设置超时机制（超过时间没获取到就报错）</span></span><br><span class="line">        dataSource.setMaxWait(<span class="number">5000L</span>);<span class="comment">//5000毫秒，就是5秒</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（2）实现序列化接口"><a href="#（2）实现序列化接口" class="headerlink" title="（2）实现序列化接口"></a>（2）实现序列化接口</h4><p>​实体类Goods是：用来接收数据库的表中的数据？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    get方法..</span><br><span class="line">    set方法..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）创建VO类"><a href="#（3）创建VO类" class="headerlink" title="（3）创建VO类"></a>（3）创建VO类</h4><p>​继承自Goods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsVO</span> <span class="keyword">extends</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）创建工具类VO"><a href="#（4）创建工具类VO" class="headerlink" title="（4）创建工具类VO"></a>（4）创建工具类VO</h4><p>注：第12行是：如果已经是实体类了，那么父类对象一定是object类，所以这样判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VOUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">autoServalueObject</span><span class="params">(Class&lt;T&gt; cls, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.第一步获取实例对象</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">vo</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">            <span class="comment">//2.第二步获取所有成员变量</span></span><br><span class="line"><span class="comment">//            Field[] field = cls.getDeclaredFields();</span></span><br><span class="line">            Class&lt;? <span class="built_in">super</span> T&gt; superclass = cls.getSuperclass();  <span class="comment">//直接获取行不通，需要先获取父类</span></span><br><span class="line">            Field[] field=<span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//先判断用的是实体类还是VO类，如果是实体类，就直接用实体方法</span></span><br><span class="line">            <span class="keyword">if</span> (superclass.isAssignableFrom(Object.class))&#123;</span><br><span class="line">                field = cls.getDeclaredFields();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                field = superclass.getDeclaredFields();     <span class="comment">//不是实体类就从父类中获取成员变量</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Field field1 : field) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> field1.getName();<span class="comment">//3.获取字段名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">labelName</span> <span class="operator">=</span> StrUtil.toUnderlineCase(name);<span class="comment">//4.将字段名称中下划线转换为小驼峰</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">ojb</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//5.获取字段名对应的对象</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ojb = resultSet.getObject(labelName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;       <span class="comment">//没有获取到就直接跳过而不是抛出</span></span><br><span class="line">                &#125;</span><br><span class="line">                field1.setAccessible(<span class="literal">true</span>); <span class="comment">//6.可能有私有的保险起见解封一下</span></span><br><span class="line">                <span class="comment">//遇到日期类型的，这里的是java.sql.Date 而Vo中是Java.util.Date</span></span><br><span class="line">                <span class="keyword">if</span> (field1.getType().isAssignableFrom(Date.class)) &#123;</span><br><span class="line">                    <span class="comment">//解决方案：只需把sql.date转换为util.date就可以</span></span><br><span class="line">                    java.sql.Date date=<span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        date = resultSet.getDate(labelName);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;       <span class="comment">//没有获取到就直接跳过而不是抛出；</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    field1.set(vo, <span class="keyword">new</span> <span class="title class_">Date</span>(date.getTime()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    field1.set(vo, ojb);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> vo;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（5）测试"><a href="#（5）测试" class="headerlink" title="（5）测试"></a>（5）测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/goods/list4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodServlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DruidPooledConnection</span> <span class="variable">connection1</span> <span class="operator">=</span> DateSourceBean.dataSource.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from goods limit 0,10&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection1.prepareStatement(sql);<span class="comment">//预编译</span></span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line">                List&lt;GoodsVO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                    GoodsVO goodsVO= VOUtil.autoServalueObject(GoodsVO.class,resultSet);</span><br><span class="line">                    list.add(goodsVO);<span class="comment">//利用debug查看VO是否接收到了对象值</span></span><br><span class="line">                &#125;</span><br><span class="line">                connection1.recycle();<span class="comment">//回收连接对象</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="七、Ajax"><a href="#七、Ajax" class="headerlink" title="七、Ajax"></a>七、Ajax</h1><p>连接德鲁伊</p><p>创建执行对象</p><p>接收SQL语句</p><p>接收执行结果&#x3D;执行语句</p><p>打印执行结果（可以封装成一个类）</p><p>将结果返回给前端</p><h2 id="（一）、代码块"><a href="#（一）、代码块" class="headerlink" title="（一）、代码块"></a>（一）、代码块</h2><h3 id="1、创建Ajax"><a href="#1、创建Ajax" class="headerlink" title="1、创建Ajax"></a>1、创建Ajax</h3><h4 id="（1）、前端页面"><a href="#（1）、前端页面" class="headerlink" title="（1）、前端页面"></a>（1）、前端页面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">主体</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;商品页面&lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input id=<span class="string">&quot;goodName&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;屠龙宝刀点击就送&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;goodsdiv&quot;</span> style=<span class="string">&quot;display: flex;flex-wrap:wrap&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">Ajax请求</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//准备使用Ajax请求向服务器Servlet程序 发送请求，传递参数：</span></span><br><span class="line">    <span class="comment">// 原生的Ajax 固定写法：</span></span><br><span class="line">    <span class="comment">// 创建Ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> ajaxHttp;</span><br><span class="line">    <span class="comment">// //判断浏览器类型</span></span><br><span class="line">    <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">// IE7+，Firefox,Chrome,Opera,Safari 浏览器执行代码</span></span><br><span class="line">        ajaxHttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// IE6 IE5 浏览器的执行代码</span></span><br><span class="line">        ajaxHttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用查找ID为btn的全部标签套用格式，点击事件</span></span><br><span class="line">    document.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = function () &#123;</span><br><span class="line">        <span class="comment">//获取文本框输入的值</span></span><br><span class="line">        <span class="type">let</span> <span class="variable">goodsName</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;goodName&#x27;</span>).value;</span><br><span class="line">        <span class="comment">//打开一个连接准备请求</span></span><br><span class="line">        ajaxHttp.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:8888/Ajax/goods/findGoodByName?name=&#x27;</span> + goodsName)</span><br><span class="line">        ajaxHttp.setRequestHeader(<span class="string">&#x27;myToken&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">        ajaxHttp.send();<span class="comment">//请求发到服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//监听服务器返回的数据</span></span><br><span class="line">        ajaxHttp.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="comment">// readyState：4种状态</span></span><br><span class="line">            <span class="keyword">if</span> (ajaxHttp.readyState == <span class="number">4</span> &amp;&amp; ajaxHttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// document.getElementById(&quot;div&quot;).innerHTML = ajaxHttp.responseText;</span></span><br><span class="line">                console.log(<span class="string">&#x27;服务器返回数据后&#x27;</span>, ajaxHttp);</span><br><span class="line">                <span class="type">let</span> <span class="variable">goodList</span> <span class="operator">=</span> JSON.parse(ajaxHttp.responseText);</span><br><span class="line">                let httpHTML=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="comment">//得到list中的值</span></span><br><span class="line">                goodList.forEach(i=&gt;&#123;</span><br><span class="line">                    console.log(i);</span><br><span class="line">                    httpHTML+=<span class="string">&quot; &lt;div style=\&quot;margin:10px\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &lt;img src=&#x27;&quot;</span>+i.mainPic+<span class="string">&quot;&#x27; style = width:100px&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &lt;div style=\&quot;color: red\&quot;&gt;&quot;</span>+i.currentPrice+<span class="string">&quot;&lt;/div&gt;\n&quot;</span> +                        <span class="string">&quot;        &lt;div&gt;&quot;</span>+i.name+<span class="string">&quot;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &lt;/div&gt;&quot;</span></span><br><span class="line">                &#125;);</span><br><span class="line">                document.getElementById(<span class="string">&quot;goodsdiv&quot;</span>).innerHTML=httpHTML;</span><br><span class="line">                <span class="comment">// console.log(goodList);</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="（2）、后端"><a href="#（2）、后端" class="headerlink" title="（2）、后端"></a>（2）、后端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ajax是否到达此Servlet&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//根据参数名称获取参数值</span></span><br><span class="line">        System.out.println(goodsName);</span><br><span class="line"><span class="comment">//        String mt = req.getHeader(&quot;myToken&quot;);// 获取响应头</span></span><br><span class="line"><span class="comment">//        System.out.println(mt);</span></span><br><span class="line">        <span class="comment">//对数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3307/user&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from goods where name like &#x27;&quot;</span>+<span class="string">&quot;%&quot;</span> + goodsName + <span class="string">&quot;%&quot;</span>+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//创建list对象接收二维表</span></span><br><span class="line">            List&lt;GoodsVO&gt; goodsVOS = VOUtil.autoServalueObjectlist(GoodsVO.class, resultSet);</span><br><span class="line">            System.out.println(goodsVOS);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(goodsVOS);<span class="comment">//转为JSON字符串</span></span><br><span class="line"></span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            resp.getWriter().write(s);  <span class="comment">//返回JSON字符串到前端</span></span><br><span class="line"></span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="八、jQuery"><a href="#八、jQuery" class="headerlink" title="八、jQuery"></a>八、jQuery</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客</title>
      <link href="/2023/07/08/hexo%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
      <url>/2023/07/08/hexo%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
      
        <content type="html"><![CDATA[<h1 id="官方帮助文档"><a href="#官方帮助文档" class="headerlink" title="官方帮助文档"></a>官方帮助文档</h1><p><a href="https://markdown.com.cn/basic-syntax/">Markdown语法</a>。<br><a href="https://fontawesome.com/icons?from=io">社交图标</a>。<br><a href="https://smms.app/">免费图床</a><br><a href="https://blog.csdn.net/liudonglovehemin/article/details/131094362?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169442259016800226533257%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169442259016800226533257&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131094362-null-null.142%5Ev93%5EchatsearchT3_1&utm_term=hexo%20butterfly&spm=1018.2226.3001.4187">更改主题</a></p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>在搭建分类页面时没有内容<br><img src="https://s2.loli.net/2023/04/11/P6auXibjVfeSzGZ.png" alt="error1"><br>原因在于没有在categories页面中指定类型和自建页面中指定分类<br><img src="https://s2.loli.net/2023/04/11/bInB2AmJyeRw8LE.png" alt="True1"><br><img src="https://s2.loli.net/2023/04/11/293cuKr8NfBnJ1W.png" alt="True2"></p><h3 id="浏览器获取不到相应文件（重要）"><a href="#浏览器获取不到相应文件（重要）" class="headerlink" title="浏览器获取不到相应文件（重要）"></a>浏览器获取不到相应文件（重要）</h3><p><strong>以后遇到这种问题都先改下路径先</strong></p><p>报错显示的是传输的数据类型错误</p><p>把JS声明类型，主题的配置文件，默认的配置文件都强行改为JS相应的，还是报错。</p><p>然后试了试hexo generate，生成的文件默认会被放置在 <code>public</code> 目录中。 在public中有js文件，浏览器中也有JS文件。但就是报错</p><p><img src="/%5Cimg%5Cimage-20231213020238866.png" alt="image-20231213020238866"></p><p>原因：</p><p>排查了半天发现其实是路径问题，这个地方需要使用相对路径</p><p>（报错信息害人不浅。）</p><p><img src="/%5Cimg%5Cimage-20231213020918583.png" alt="image-20231213020918583"></p>]]></content>
      
      
      <categories>
          
          <category> 问题汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/05/03/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/05/03/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><p>5种数据类型:元组(tuple),列表(list),字符串(str),字典(dict),集合(set)</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表的概念："><a href="#列表的概念：" class="headerlink" title="列表的概念："></a>列表的概念：</h4><p>列表是一种可变的、有序的数据结构，可以随时添加和删除其中的元素。<br>List（列表）是 Python 中使用最频繁的数据类型，在其他语言中通常叫做数组<br>专门用于存储一串信息<br>列表用[]定义，数据之间使用 , 分隔<br>列表的索引 从 0 开始</p><h4 id="列表定义方法："><a href="#列表定义方法：" class="headerlink" title="列表定义方法："></a>列表定义方法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class 方法名字()：</span><br><span class="line">    def sum():</span><br><span class="line">        return x+y</span><br><span class="line"> </span><br><span class="line">#### 调用方法:</span><br><span class="line"></span><br><span class="line">a=方法名字()</span><br><span class="line">x=a.sum(1,5)</span><br><span class="line">print(f&quot;和为&#123;x&#125;&quot;)</span><br></pre></td></tr></table></figure><p>函数与方法的差别就在于定义和调用不同</p><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法:"></a>常用的方法:</h4><details><summary>列表</summary><p><strong>插入元素</strong><br><code>列表名.insert(下标值,元素)</code></p><p><strong>追加元素</strong><br><code>列表名.append(元素)</code></p><p><strong>追加批量元素</strong><br><code>列表名.extend(容器名)</code></p><p><strong>删除元素</strong><br><code>del 列表名[下标值]</code></p><p><strong>删除指定元素</strong><br><code>列表名.remove(元素)</code></p><p><strong>剪切元素(不设定接收值就只是删除元素)</strong><br><code>列表名.pop(下标值)</code></p><p><strong>清空列表</strong><br><code>列表名.clear()</code></p><p><strong>统计列表特定的元素</strong><br><code>列表名.count(元素)</code></p><p><strong>查找指定元素所在的下标,找不到就报错ValueError</strong><br><code>列表.index(元素)</code></p><p><strong>统计列表有多少元素(查看列表长度)</strong><br><code>Listlen=len(列表名) </code></p></details><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="元组的概念"><a href="#元组的概念" class="headerlink" title="元组的概念:"></a>元组的概念:</h4><p>一旦定义完成就不可修改。<br>可以存储任意类型。<br>定义用()，使用,隔开各个数据。<br>注：如果元组中只有单个元素，需要在元素后面加一个逗号<br><code>tuple_1=(&quot;hello&quot;,)</code></p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><details><summary>元组</summary><p><strong>查找指定元素的下标</strong><br><code>元组名.index(&quot;指定元素&quot;)</code></p><p><strong>统计指定元素有几个</strong><br><code>元组名.count(&quot;指定元素&quot;)</code></p><p><strong>统计元素个数</strong><br><code>tuplelen=len(元组名)</code></p></details><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串的概念"><a href="#字符串的概念" class="headerlink" title="字符串的概念:"></a>字符串的概念:</h4><p>一旦定义完成就不可修改。<br>只能存储字符串。<br>允许重复字符串存在。<br>定义用””。</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><details><summary>字符串</summary><p><strong>查找指定元素的下标</strong><br><code>字符串.index(&quot;指定元素&quot;)</code></p><p><strong>替换字符串</strong><br><code>新字符串=字符串.replace(&quot;替换前&quot;,&quot;替换后&quot;)</code></p><p><strong>字符串的分割</strong><br><code>newlist=字符串.split(&quot;分割符&quot;)</code><br>得到是一个列表</p><p><strong>字符串的规整</strong><br><code>字符串.strip()</code>默认删除首尾空格<br><code>字符串.strip(&quot;参数&quot;)</code>删除参数的值</p><p><strong>统计字符串中某字符串出现次数</strong><br><code>字符串.count(&quot;参数&quot;)</code></p><p><strong>统计字符串的长度</strong><br><code>strlen=len(字符串)</code></p></details>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>错误汇总</title>
      <link href="/2023/04/08/two/"/>
      <url>/2023/04/08/two/</url>
      
        <content type="html"><![CDATA[<h2 id="1-在美化页面时，标题前面加上小图标，会使背景图片识别不出来"><a href="#1-在美化页面时，标题前面加上小图标，会使背景图片识别不出来" class="headerlink" title="1.在美化页面时，标题前面加上小图标，会使背景图片识别不出来"></a>1.在美化页面时，标题前面加上小图标，会使背景图片识别不出来</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/07/hello-world/"/>
      <url>/2023/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="呀哈喽"><a href="#呀哈喽" class="headerlink" title="呀哈喽"></a>呀哈喽</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE笔记</title>
      <link href="/2023/03/15/Java/"/>
      <url>/2023/03/15/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h2 id="java的项目结构"><a href="#java的项目结构" class="headerlink" title="java的项目结构"></a>java的项目结构</h2><p>1.project(项目)<br>    2.module（模块）<br>        3.package（包）<br>            4.class(类)</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Alt+INSERT生成方法</p><p>Ctrl+R替换</p><p>Ctrl+N      搜索类库</p><p>Ctrl+F12    搜索方法</p><p>Ctrl+O      重写OBJ方法</p><p>Ctrl+E      打开最近文件</p><p>Ctrl+D      复制选定的这行</p><p>Alt+Enter 错误提示</p><p>Ctrl+Alt+U看继承结构</p><p>Ctrl+Alt+T包围</p><p>Ctrl+Alt+L格式化代码</p><p>Ctrl+Alt+B上级接口</p><p>Ctrl + Shift + 方向键移动代码位置</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><h3 id="0-构造方法、重载、继承"><a href="#0-构造方法、重载、继承" class="headerlink" title="0.构造方法、重载、继承"></a>0.构造方法、重载、继承</h3><p>Java只有单继承，和多层继承(子类A继承父类B，父类B又继承父类C)<br>eg: public class 子类 extends 父类{</p><p>}</p><p><strong>构造方法的名称跟类名完全一致，没有返回值。</strong><br>继承中的  super.的作用是到父类调用<br>          this的作用有3个：<br>            1、区分成员变量和局部变量<br>            2、this表示正在创建的对象本身或者正在执行方法的对象本身。<br>            3、在构造方法中可以调用别的构造方法，需要注意的是如果调用其他的构造方法，this只能写在第一行</p><p>重载是在同一类中更改方法的参数、个数不同（同一件事情不同方法）。<br>子类出现了和父类中一模一样的方法声明，我们就称子类的这个方法是父类方法的重写（@Override → 效验重写是否正确）。</p><p>子类初始化之前，一定要调用父类构造方法先完成父类数据空间的初始化。</p><h3 id="1-递归"><a href="#1-递归" class="headerlink" title="1.递归"></a>1.递归</h3><p><strong>方法递归，需要有结束条件</strong></p><p>eg:day3_Demo。</p><p>封装是为了数据安全，想要使用数据需要按照正确的渠道（set和get方法）</p><p>静态代码块(又叫类方法)：在使用这个类的时候会发出唯一一次调用，常用于类的初始化（只要代码块中有静态代码（static）就会执行）</p><p>静态和类相关 （每个对象都有的属性）</p><p>非静态是和对象相关子继承父，父不能继承子（子可以用父的方法，父不能用子的方法）</p><p>final  修饰符:一旦获得初始值就不能改变（常量）,修饰方法就不可重写</p><h3 id="2-Object"><a href="#2-Object" class="headerlink" title="2.Object"></a>2.Object</h3><p>Java中除了 基本数据类型（8种,如:int,String）就是 引用数据类型<br>而 数据类型 &#x3D;&#x3D;比较的是值，引用数据类型 &#x3D;&#x3D;比较的是内存地址。<br>    除了一些特殊的类之外，主要看equals方法有没有被覆写<br>    equals的3个特性<br>        1.对称性<br>        2.自反性<br>        3.传递性</p><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3.多态"></a>3.多态</h3><p>​    1.是继承关系（父子关系）<br>​    2.子类覆写父类的方法<br>​    3.父类引用，指向子类实例对象<br>​    4.调用的方法必须是父类被覆写的方法<br>虽然是同一种引用（父类），做同一样事情，但是出现了不同的结果。（这就是多态）<br>​    向上转型安全，向下转型需要借助 ( A（父类） instanceof B（子类） ) 可以判断左边<strong><strong><strong><strong>父类对象A</strong></strong></strong></strong>是否属于右边<strong>B类</strong>或者子类的一个实例</p><h3 id="4-抽象类（修饰符-abstract）"><a href="#4-抽象类（修饰符-abstract）" class="headerlink" title="4.抽象类（修饰符 abstract）"></a>4.抽象类（修饰符 abstract）</h3><p>​    意义：抽象类是为了定义抽象方法，而抽象方法是为了强制子类覆写父类的抽象方法<br>​    抽象方法只能定义在接口和抽象类中。<br>​    1.实现多态更容易<br>​    2.不可调用构造函数创建实例对象<br>​    3.注：子类实例化过程中，首先要 调用 父类的构造函数（这里只是调用而没有创建实例对象）<br>​    </p><h3 id="5-接口类"><a href="#5-接口类" class="headerlink" title="5.接口类"></a>5.接口类</h3><p>eg：Study_5_Jiekou</p><p>​    </p><p>​    <strong>接口继承的话会继承父类所有方法，所以子类继承的话需要覆写所有方法</strong><br><strong>​    接口不能直接有实例对象，必须先有类实现之后，才能创建这个实现类实例对象</strong>。<br>​    </p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><h6 id="类继承-接口多实现"><a href="#类继承-接口多实现" class="headerlink" title="类继承+接口多实现"></a>类继承+接口多实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子接口<span class="number">3</span> extends 类<span class="number">1</span> implements 父接口<span class="number">1</span>，父接口<span class="number">2</span></span><br></pre></td></tr></table></figure><h6 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 子接口 extends 父接口</span><br></pre></td></tr></table></figure><h6 id="成员变量（常量）"><a href="#成员变量（常量）" class="headerlink" title="成员变量（常量）"></a>成员变量（常量）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] [<span class="keyword">static</span>] [<span class="keyword">final</span>] <span class="type">int</span> CONST=<span class="number">12</span>;</span><br></pre></td></tr></table></figure><h6 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] [<span class="keyword">abstract</span>] <span class="keyword">void</span> <span class="title function_">methodAbs1</span><span class="params">()</span>; </span><br></pre></td></tr></table></figure><h6 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodDefult1</span><span class="params">()</span>&#123; <span class="comment">//默认方法  不需要实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;这是Jiekou2中的默认方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h6><p>注：使用方法是：接口名.静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是第&quot;</span>+(i++)+<span class="string">&quot;次调用接口3中的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h6><p>注：只能在java9及以上版本使用</p><p>private方法只有接口本身能调用，不能被实现类或者别人使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">methodprivate</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;name:&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="接口小结"><a href="#接口小结" class="headerlink" title="接口小结"></a>接口小结</h5><p><img src="/%5Cimg%5Cimage-20231009111917787.png" alt="image-20231009111917787"></p><h4 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a><a href="https://www.runoob.com/w3cnote/java-annotation.html">注解详解</a></h4><p>注解（Annotation）：一种约束。</p><p>常见的注解：</p><p>​Override  ：重写的注解</p><p>​Deprecated :不推荐使用，但可以用，或者存在更好的方式</p><p>​SuppressWarnings（“all”）:镇压警告</p><p>4个元注解：</p><p>​eg:Study_3</p><h3 id="6-枚举类"><a href="#6-枚举类" class="headerlink" title="6.枚举类"></a>6.枚举类</h3><p>​    1.根据步骤定义实例对象个数<br>​    2.定义所需成员变量<br>​    3.定义对应有参构造，赋值给成员变量<br>​    4.为成员提供get方法</p><h3 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组"></a>7.数组</h3><p>​    1.数组的定义、<br>​    2.Arrays类<br>​    3.查找算法<br>​    4.可变数组（可选）<br>​    5.二维数组</p><h3 id="8-异常"><a href="#8-异常" class="headerlink" title="8.异常"></a>8.异常</h3><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p>​    1.栈溢出(Stack overflow）</p><h4 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h4><p>​    1.空指针异常(NPE)<br>​    2.下标越界异常（AIOOB）<br>​    3.转换异常（CCEC）<br>​    4.数字格式化异常（NFE）<br>​    5.算术异常（AE）</p><h4 id="非运行时异常（预期异常）"><a href="#非运行时异常（预期异常）" class="headerlink" title="非运行时异常（预期异常）"></a>非运行时异常（预期异常）</h4><p>​    1.文件异常，通常是文件在磁盘中没有被发现（FNFE）<br>​    2.文件异常，通常是class文件找不到了（CNFE）<br>​    3.SQL异常,(SQLException)<br>​    4.类中没有成员异常(NSFE)，类中没有方法异常(NSME)<br>​    5.解析异常,通常是日期字符串转换解析为Date日期类。(PE)</p><h3 id="9-处理异常"><a href="#9-处理异常" class="headerlink" title="9.处理异常"></a>9.处理异常</h3><p>​    1.try catch来捕获<br>​    2. 继续往调用这个方法的方法上抛出去，自己不处理，交给调用这个方法的地方处理（甩锅）<br>throws: 声明在方法上，表示这个方法需要处理异常<br>throw:  表示在代码中，主动抛出异常。</p><h3 id="10-内部类"><a href="#10-内部类" class="headerlink" title="10.内部类"></a>10.内部类</h3><p>静态：只能定义在外部类属性和方法同级的位置<br>非静态：定义在外部类属性和方法同级的位置，同时还能定义在方法内部。</p><h4 id="内部类创建实例对象与使用"><a href="#内部类创建实例对象与使用" class="headerlink" title="内部类创建实例对象与使用"></a>内部类创建实例对象与使用</h4><p>​    1.静态类:外部类名称.内部类名称<br>​    2.非静态类：必须得有外部类的实例对象，通过外部对象实现内部对象<br>​    3.方法：只能在该方法中使用定义的内部类。</p><h3 id="11-设计模式"><a href="#11-设计模式" class="headerlink" title="11.设计模式"></a>11.设计模式</h3><h4 id="单例模式（一个类只有一个实例）"><a href="#单例模式（一个类只有一个实例）" class="headerlink" title="单例模式（一个类只有一个实例）"></a>单例模式（一个类只有一个实例）</h4><p>1.构造函数私有化<br>2.暴露一个静态方法给外部来获取唯一的实例对象<br>3.只能有唯一一个实例。<br>常见的2种模式：<br>    1、饿汉式（开始就创建实例对象。特点是：线程安全，易浪费内存，执行效率高）<br>    2、懒汉式（要使用时，再创建实例对象。特点是：线程不安全，内存不易浪费，执行效率是：加上安全方法低）<br>    还有，枚举（函数体只有一个对象）,</p><h4 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h4><p>eg：Study_8</p><p>根据需求返回需要的对象，而不是new。这样是为了减少代码的耦合度。</p><h2 id="二、基本类型的包装类和String"><a href="#二、基本类型的包装类和String" class="headerlink" title="二、基本类型的包装类和String"></a>二、基本类型的包装类和String</h2><h3 id="1-包装类"><a href="#1-包装类" class="headerlink" title="1.包装类"></a>1.包装类</h3><p>eg：study_9</p><p>​    1.int和char的包装类是Integer和Character,其余都是改为首字母大写<br>​    2.包装类可以调用方法。<br>​    3.包装整数型的值可以为null<br>String不能直接转为char，需要调用charAt方法<br>String中存在不能表示的数值字符时会 NFE异常,<br>字符串转布尔型时；只有true结果才为true，其余都是false。</p><h3 id="2-String"><a href="#2-String" class="headerlink" title="2.String"></a>2.String</h3><p>eg：study_10.Demo</p><p>​    出现过的字符就会被加入常量池<br>​    intern方法：先在常量池中引用，没有就堆中引用，并且把堆的内容添加到常量池。</p><p>​    </p><h3 id="3-StringBuffer和StringBuilder"><a href="#3-StringBuffer和StringBuilder" class="headerlink" title="3.StringBuffer和StringBuilder"></a>3.StringBuffer和StringBuilder</h3><p>eg: Study_11</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>​容器类</p><p>​作为成员变量使用</p><p>​线程安全，但性能第二。          </p><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>​作为局部变量使用</p><p>​线程不安全，但性能最高<br>性能：  String&lt;StringBuffer&lt;StringBuilder</p><h3 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4.正则表达式"></a>4.正则表达式</h3><p>​    Pattern:返回字符串形式<br>​    Matcher:匹配表达式（验证表达式）</p><h2 id="三、开发常用类"><a href="#三、开发常用类" class="headerlink" title="三、开发常用类"></a>三、开发常用类</h2><p>​    1.Date类<br>​    2.Calendar类<br>​    3.SimpleDateFormat类<br>​    4.Math数学类<br>​    5.Random类<br>​    6.Runtime和System类<br>​    7.BigDecimal类<br>​            setScale<br>​            ROUND_UP            最后一位大于0就进一位   3.1-&gt;4<br>​            ROUND_DOWN          去掉超出0的部分         3.0-&gt;3<br>​            ROUND_HALF_UP       四舍五入                3.5-&gt;4<br>​            ROUND_HALF_DOWN     &lt;&#x3D;0.5就舍去，大于0.5进1  3.5-&gt;3<br>eg：study_class</p><h2 id="四、集合和集合框架"><a href="#四、集合和集合框架" class="headerlink" title="四、集合和集合框架"></a>四、集合和集合框架</h2><h3 id="1-集合"><a href="#1-集合" class="headerlink" title="1.集合"></a>1.集合</h3><p>集合是个容器，和数组一样，区别在于集合长度不定</p><h4 id="集合的框架结构图"><a href="#集合的框架结构图" class="headerlink" title="集合的框架结构图"></a>集合的框架结构图</h4><p><img src="/%5Cimg%5Cimage-20230913081946096.png" alt="image-20230913081946096"></p><p><img src="/%5Cimg%5Cimage-20230913172039102.png" alt="image-20230913172039102"></p><h3 id="2-泛型"><a href="#2-泛型" class="headerlink" title="2.泛型"></a>2.泛型</h3><p>​声明方式 :class Demo <T>{}</p><p>​注：尖括号内用大写字母</p><h4 id="1-泛型的3个声明方式"><a href="#1-泛型的3个声明方式" class="headerlink" title="1.泛型的3个声明方式"></a>1.泛型的3个声明方式</h4><p>​eg:Study_13</p><p>​1.接口泛型</p><p>​2.方法泛型</p><p>​3.类泛型</p><h4 id="2-受限泛型"><a href="#2-受限泛型" class="headerlink" title="2.受限泛型"></a>2.受限泛型</h4><p>​eg:Study_13_FanXing_ShouXian</p><h4 id="3-Arraylist"><a href="#3-Arraylist" class="headerlink" title="3.Arraylist"></a>3.Arraylist</h4><p>​ArrayList底层数据结构采用数组结构</p><p>​主要用于查询！！！</p><p>​数组特点：删除（插入）数据时会移动内存中的位置，如果数据很大，会影响程序的性能。</p><ul><li>​        <strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)<ul><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul></li></ul><h4 id="4-LinkedList"><a href="#4-LinkedList" class="headerlink" title="4.LinkedList"></a>4.LinkedList</h4><p>eg：Study_14.Demo3</p><p>​LinkedList底层数据接口采用链表结构</p><p>​主要用于删除插入数据！！！</p><p>​链表特点：删除（插入）时只需修改上（prev）下（next）指针，不需要移动数据</p><h5 id="1-队列和栈"><a href="#1-队列和栈" class="headerlink" title="1.队列和栈"></a>1.队列和栈</h5><p>​队列：先入先出</p><p>​栈：先入后出</p><p>​1.调用方法叫入栈，调用完毕叫出栈，栈里面叫栈帧，</p><p>LinkedList和ArrayList都是常用的接口实现类</p><h2 id="五、Map和Set接口及其实现类"><a href="#五、Map和Set接口及其实现类" class="headerlink" title="五、Map和Set接口及其实现类"></a>五、Map和Set接口及其实现类</h2><h3 id="1-Map接口和其实现类"><a href="#1-Map接口和其实现类" class="headerlink" title="1.Map接口和其实现类"></a>1.Map接口和其实现类</h3><p>eg:Study_15</p><p>​1.hashMap：键值对(key:value),线程不安全。</p><p>​2.hashTable: 与hashMap唯一的区别是线程安全</p><p>​3.LinkHashMap: 按照存储的顺序将数据有序的存入Map中</p><p>​4.TreeMap: 按照key 的自然排序来顺序存储</p><h3 id="2-Set接口和实现类"><a href="#2-Set接口和实现类" class="headerlink" title="2.Set接口和实现类"></a>2.Set接口和实现类</h3><p>eg:Study_15_Set_jiekou</p><h4 id="1-LinkHashSet"><a href="#1-LinkHashSet" class="headerlink" title="1.LinkHashSet"></a>1.LinkHashSet</h4><p>​Set利用Map的特性，存入相同元素的值，值不会重复。(集合)</p><p>​应用场景:不需要存储相同的元素。 </p><h4 id="2-TrreSet"><a href="#2-TrreSet" class="headerlink" title="2.TrreSet"></a>2.TrreSet</h4><p>​自然顺序存储 </p><p>​是SortedSet的实现类 </p><h3 id="3-Conllections工具类-不是Conllection接口！！"><a href="#3-Conllections工具类-不是Conllection接口！！" class="headerlink" title="3.Conllections工具类(不是Conllection接口！！)"></a>3.Conllections工具类(不是Conllection接口！！)</h3><p>eg:Study_15_Set_jiekou_Conllections</p><p>​主要功能：</p><p>​1.排序操作(sort)</p><p>​2.反转（reverse）</p><p>​3.快速创建单个元素的Set\List、Map等</p><p>​4.添加(addAll)</p><p>​4.将不安全的集合变为安全的。</p><h2 id="六、文件和字符字节流"><a href="#六、文件和字符字节流" class="headerlink" title="六、文件和字符字节流"></a>六、文件和字符字节流</h2><p>eg:Study_16_IO</p><h3 id="1-IO-InputStream"><a href="#1-IO-InputStream" class="headerlink" title="1.IO(InputStream)"></a>1.IO(InputStream)</h3><p><img src="/%5Cimg%5Cimage-20230916150838551.png" alt="image-20230916150838551"></p><p>​2.文件方法</p><p><img src="/%5Cimg%5Cimage-20230916205309004.png" alt="image-20230916205309004"></p><h4 id="1-字节输入-出-流"><a href="#1-字节输入-出-流" class="headerlink" title="1.字节输入(出)流"></a>1.字节输入(出)流</h4><p>eg: Input和Output</p><p>字节<em>输入流</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOutputStream = new FileOutputStream(路径)</span><br></pre></td></tr></table></figure><p>字节<em>输出流</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fileInputStream = new FileInputStream(路径);</span><br></pre></td></tr></table></figure><h4 id="2-字符输入-出-流"><a href="#2-字符输入-出-流" class="headerlink" title="2.字符输入(出)流"></a>2.字符输入(出)流</h4><p>eg: Writer和Read</p><p>因为是字符，所以只能处理文本，<strong>不能处理图像音频</strong></p><p>字符输入流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileWriter file = new FileWriter</span><br></pre></td></tr></table></figure><p>字符输出流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader reader = new FileReader</span><br></pre></td></tr></table></figure><h3 id="2-转换流和缓存流和对象流（IO流框架底层原理）重要"><a href="#2-转换流和缓存流和对象流（IO流框架底层原理）重要" class="headerlink" title="2.转换流和缓存流和对象流（IO流框架底层原理）重要"></a>2.转换流和缓存流和对象流（IO流框架底层原理）重要</h3><p>eg:Study_16_IO_Tanrsfrom</p><h3 id="1-缓存流"><a href="#1-缓存流" class="headerlink" title="1.缓存流"></a>1.缓存流</h3><p>eg：BufferedInputStream</p><p>通过缓冲区书写，减少内存跟磁盘的IO次数提升性能</p><h4 id="1-字节缓存输入（出）流"><a href="#1-字节缓存输入（出）流" class="headerlink" title="1.字节缓存输入（出）流"></a>1.字节缓存输入（出）流</h4><p>​eg：Demo1和Demo2</p><p>​输入</p><p>​BufferedInputStream bufferedInputStream &#x3D; new BufferedInputStream(Files.newInputStream(Paths.get(路径)));</p><p>​输出</p><p>​BufferedOutputStream bufferedOutputStream &#x3D; new BufferedOutputStream(new FileOutputStream(路径));</p><h4 id="2-字符缓存输入（出）流"><a href="#2-字符缓存输入（出）流" class="headerlink" title="2.字符缓存输入（出）流"></a>2.字符缓存输入（出）流</h4><p>​eg:Demo3和Demo4</p><p>​只读</p><p>​BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(路径))</p><p>​写入</p><p>​BufferedWriter bufferedWriter &#x3D; new BufferedWriter(new FileWriter（路径）)</p><h3 id="2-内存流"><a href="#2-内存流" class="headerlink" title="2.内存流"></a>2.内存流</h3><p>​ByteArrayInputStream</p><p>​temp; &#x2F;&#x2F;字符变大写</p><p>​.toLowerCase(); &#x2F;&#x2F;字符变成小写</p><h3 id="3-Scanner扫描工具和打印流（重要）"><a href="#3-Scanner扫描工具和打印流（重要）" class="headerlink" title="3.Scanner扫描工具和打印流（重要）"></a>3.Scanner扫描工具和打印流（重要）</h3><p>eg:L4_Scaner</p><p>​eg:Demo1</p><p>​Scanner(Readable source):所有Reader的实现类都可以传进来</p><p>​public Scanner(InputStream source)：所有输入流都可以传进来构造</p><p>​public Scanner (File source): 直接读取文件。</p><p>​结论:</p><p>​读取操作可以用Scanner来做，处理I流特别方便</p><p>​创建:</p><p>​Scanner scanner &#x3D; new Scanner(new File(路径));</p><h3 id="4-对象流"><a href="#4-对象流" class="headerlink" title="4.对象流"></a>4.对象流</h3><p>eg:objectStream</p><p>把对象保存到磁盘的过程，就叫做序列化过程。</p><h5 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1.序列化"></a>1.序列化</h5><p>序列化最终的目的是为了对象可以<strong>跨平台存储，和进行网络传输</strong>。</p><p>只把对象转成字节数组还不行，因为没有规则的字节数组我们是没办法把对象的本来面目还原回来的，所以我们必须在把对象转成字节数组的时候就制定一种规则<strong>（序列化）</strong>，那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来<strong>（反序列化）。</strong></p><p>如果我们要把一栋房子从一个地方运输到另一个地方去，<strong>序列化</strong>就是我把房子拆成一个个的砖块放到车子里，然后留下一张房子原来结构的图纸，<strong>反序列化</strong>就是我们把房子运输到了目的地以后，根据图纸把一块块砖头还原成房子原来面目的过程</p><p>结论：以后简单java类如果需要再网络上传输，存储到磁盘，都需要实现序列化（Serializable）接口。</p><h3 id="5-RandoRandomAccessFile-了解断点续传"><a href="#5-RandoRandomAccessFile-了解断点续传" class="headerlink" title="5.RandoRandomAccessFile(了解断点续传)"></a>5.RandoRandomAccessFile(了解断点续传)</h3><p>略</p><h3 id="6-Properties设计模式"><a href="#6-Properties设计模式" class="headerlink" title="6.Properties设计模式"></a>6.Properties设计模式</h3><p>略</p><h2 id="七、多线程基础"><a href="#七、多线程基础" class="headerlink" title="七、多线程基础"></a>七、多线程基础</h2><p>eg：Study_17_DuoXxianCheng</p><h3 id="1-进程与线程"><a href="#1-进程与线程" class="headerlink" title="1.进程与线程"></a>1.进程与线程</h3><h4 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h4><p>​<strong>进程特点</strong>：</p><p>​1.独立性：不同的进程之间是独立的，相互的资源不共享</p><p>​2.动态性：进程在系统中不是静止不动的，而是在系统中一直活动</p><p>​3.并发性：多个进程可以在单个处理器上同时进行，且互不影响</p><h4 id="2-线程"><a href="#2-线程" class="headerlink" title="2.线程"></a>2.线程</h4><p>​多并发：其实就是CPU快速的在不同线程之间切换</p><p>​<strong>区别</strong>：</p><p>​程序运行后至少有一个进程</p><p>​一个进程至少要有一个线程，否则这个线程没有意义</p><p>​进程之间不能共享资源，但线程可以</p><p>​系统创建进程需要为该进程重新分配系统资源，而创建线程容易的多，因此使用线程实现多任务并发比多进程的效率高</p><p>​start()启动；</p><h4 id="3-创建线程的4种方式"><a href="#3-创建线程的4种方式" class="headerlink" title="3.创建线程的4种方式"></a>3.创建线程的4种方式</h4><p>​1.创建一个类继承Thread类，覆写run方法，调用start方法</p><p>​2.直接new 一个Thread类，传入Runnable接口的实例对象，覆写run方法，调用Thread类的start方法（常用）</p><p>​3.利用FutureTask与Callable搭配创建。这种方法创建的支持返回值 （要返回值的时候用）</p><p>​4.线程池（严格上说不算）</p><p>启动线程之后至少有2个线程：Main线程(主线程)和后台线程（后台线程）</p><h4 id="4-线程的中断"><a href="#4-线程的中断" class="headerlink" title="4.线程的中断"></a>4.线程的中断</h4><p>中断标记的位置一定要设置在线程启动之后</p><p>中断方法不是真中断，只是设置一个中断的标记为true ，遇到wait&#x2F;sleep&#x2F;join就会抛出中断异常</p><p>抛出异常后，自行使用return结束线程，以达到中断效果。</p><h4 id="面试的考点："><a href="#面试的考点：" class="headerlink" title="面试的考点："></a>面试的考点：</h4><p>（Thread.State;这个内部枚举中，列举了6个生命状态）</p><p><img src="/%5Cimg%5Cimage-20230918210642506.png" alt="image-20230918210642506"></p><p>1.需要清楚进程与线程的区别。</p><p>2.需要清楚的知道创建多线程的三种方式和区别。。后面再详细深入的学习线程池</p><p>3.需要掌握线程中的常用方法。</p><p>4.需要记下线程的6个生命周期状态。</p><h3 id="2-多线程同步"><a href="#2-多线程同步" class="headerlink" title="2.多线程同步"></a>2.多线程同步</h3><h2 id="八、反射"><a href="#八、反射" class="headerlink" title="八、反射"></a>八、反射</h2><p>eg：Study_18_FanShe</p><h4 id="语言的两种形态"><a href="#语言的两种形态" class="headerlink" title="语言的两种形态"></a>语言的两种形态</h4><p>​1.动态语言（运行时可以改变）</p><p>​2.静态语言（运行时不能改变）</p><p>Reflection（反射）是java被视为动态语言的关键</p><p>​优点：实现动态创建对象和编译，灵活性大大提升</p><p>​缺点：对性能有影响，反射基本上是一种解释操作，我们告诉JVM做什么并且满足我们要求。</p><p>​    这类操作总是慢于直接执行相同的操作。</p><h4 id="类与反射："><a href="#类与反射：" class="headerlink" title="类与反射："></a>类与反射：</h4><p>一个类在内存中只有一个Class对象</p><p>一个类被加载之后，类的整个结构都会被封装在Class对象中。</p><p>反射就是通过对象来逆出一个类</p><p><img src="/%5Cimg%5Cimage-20230921121820687.png" alt="image-20230921121820687"></p><p>加载，链接，初始化</p><h4 id="代码使用："><a href="#代码使用：" class="headerlink" title="代码使用："></a>代码使用：</h4><h5 id="反射的三种创建方式"><a href="#反射的三种创建方式" class="headerlink" title="反射的三种创建方式"></a>反射的三种创建方式</h5><p>eg：Study_18_FanShe\HeiMaPro\FanShe\FanShe1.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class字节码的对象</span></span><br><span class="line"><span class="comment">//通过包名+类名</span></span><br><span class="line"><span class="comment">//最为常用的方式</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;Study_18_FanShe.HeiMaPro.DaiLi.ProxyUtil&quot;</span>);</span><br><span class="line">System.out.println(aClass);</span><br><span class="line"><span class="comment">//通过类名</span></span><br><span class="line"><span class="comment">//常用于：当做参数传递</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">bClass</span> <span class="operator">=</span> ProxyUtil.class;</span><br><span class="line">System.out.println(bClass);</span><br><span class="line"><span class="comment">//通过对象</span></span><br><span class="line"><span class="comment">//当已经有这个类对象时，才可以用</span></span><br><span class="line"><span class="type">ProxyUtil</span> <span class="variable">proxyUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyUtil</span>();</span><br><span class="line">System.out.println(proxyUtil.getClass());</span><br></pre></td></tr></table></figure><h5 id="获取构造方法的访问修饰符方式："><a href="#获取构造方法的访问修饰符方式：" class="headerlink" title="获取构造方法的访问修饰符方式："></a>获取构造方法的访问修饰符方式：</h5><p>eg：Study_18_FanShe\HeiMaPro\FanShe\FanShe2.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getDeclaredConstructors获取多个构造方法</span></span><br><span class="line">    </span><br><span class="line">      Constructor[] conmax = fs.getDeclaredConstructors();</span><br><span class="line">      <span class="keyword">for</span> (Constructor constructor : conmax) &#123;</span><br><span class="line">          System.out.println(constructor);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//getDeclaredConstructor获取单个构造方法</span></span><br><span class="line">      <span class="type">Constructor</span> <span class="variable">con1</span> <span class="operator">=</span> fs.getDeclaredConstructor();</span><br><span class="line">      System.out.println(con1);</span><br><span class="line"><span class="comment">//getConstructor只能获取公共类</span></span><br><span class="line">      <span class="type">Constructor</span> <span class="variable">con2</span> <span class="operator">=</span> fs.getDeclaredConstructor(String.class);</span><br><span class="line">      System.out.println(con2);</span><br></pre></td></tr></table></figure><p>通过反射设置文件</p><p>eg：Study_18_FanShe.HeiMaPro.FanShe.Savainfo.ReflectDemo</p><h4 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h4><p><img src="/%5Cimg%5Cimage-20231011141525556.png" alt="image-20231011141525556"></p><p>反射的四大类 :Class类，Field(成员、属性)变量，Method(方法)类、Constructor(构造器)类。</p><p>Field类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Field 是描述  成员的，可以获取成员的名称、类型、权限修饰符、和取成员的值，和设置成员的值，也可以暴力解封。</span><br><span class="line">2. 对private 修饰的方法（Method） 如果调用，也需要解封。setAccessible</span><br><span class="line">3. 判断一个class类是否属于某个类：isAssignableFrom(判断类型.class)</span><br></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>eg: Studyshuangti\MyJava\day1\src\Study_18_FanShe\HeiMaPro\DaiLi</p><p><img src="/%5Cimg%5Cimage-20231010140041939.png" alt="image-20231010140041939"></p><h5 id="Proxy类："><a href="#Proxy类：" class="headerlink" title="Proxy类："></a>Proxy类：</h5><p>java.lang.reflect.Proxy</p><p>为对象产生代理对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一个参数是：指定类加载器</span><br><span class="line">第二个是：指定接口</span><br><span class="line">第三个是：指定代理要干什么</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span><br></pre></td></tr></table></figure><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>是JVM管理的内存中<strong>最大的一块</strong>。</p><p><strong>被所有线程共享</strong>的一片内存区域。</p><p>所有的对象实例以及数组都要在这分配。</p><p>因为是垃圾收集器的主要管理区域，所以也叫做“GC堆”。</p><p>从垃圾回收的角度来看分为：新生代和老生代。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xmx用于设置堆的最大大小，-Xms用于设置堆的初始大小。</span><br><span class="line">如果堆中没有内存可以完成实例分配，也不能扩展的时候；会抛出OutOfMemoryError异常</span><br></pre></td></tr></table></figure><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>也叫做线程计数器。</p><p>是JVM中唯一没有规定outofMemoryError的区域。</p><p>个人理解是：保证线程在切换后能够恢复到正确的执行位置，从而实现线程之间的并发执行。</p><h3 id="Java栈"><a href="#Java栈" class="headerlink" title="Java栈"></a>Java栈</h3><p>JVM是线程私有的，生命周期与线程相同。</p><p><strong>栈帧</strong>出现在方法执行的时候。</p><p>栈帧（Stack Frame）:存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong></p><ul><li>局部变量表：存地址的。</li><li>操作数栈：对代码进行计算后，放入局部变量表。</li><li>动态链接：存储链接的。</li><li>方法出口：正常是return，错误就抛出异常。</li></ul><p>注：还有一个<strong>本地方法栈</strong>，与栈的区别就是方法上带了native关键字的栈</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>个人理解就是电脑系统内存</p><p>与堆内存的差别在于：申请空间耗费很高的性能，IO读写性能优于堆内存。</p><h2 id="垃圾回收机制（GC）"><a href="#垃圾回收机制（GC）" class="headerlink" title="垃圾回收机制（GC）"></a>垃圾回收机制（GC）</h2><p>内存垃圾：指没有引用指向的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.gc()   //手动回收垃圾</span><br><span class="line"></span><br><span class="line">finalize()//GC前必要的清理操作，避免资源泄漏或其他问题</span><br><span class="line">//是由垃圾回收器在回收对象前自动调用的</span><br></pre></td></tr></table></figure><h3 id="新生代、老年代"><a href="#新生代、老年代" class="headerlink" title="新生代、老年代"></a>新生代、老年代</h3><table><thead><tr><th>新生代(Young)</th><th>老年代(Old)</th><th>备注</th></tr></thead><tbody><tr><td>三个区</td><td>一个区</td><td>新生代:Eden、From Survivor、To Survivor</td></tr><tr><td>占用1&#x2F;3的堆空间</td><td>占用2&#x2F;3的堆空间</td><td>可以通过**-XX:NewRatio** 指定占用比例，默认1:2</td></tr><tr><td>三个区的占用空间为 8(Eden):1:1</td><td></td><td>可以通过**-XX：SurvivorRatio**指定</td></tr></tbody></table><p><strong>新生代</strong>为三个区：</p><ul><li><p>Eden区（伊甸园区）</p></li><li><p>Survivor区（幸存者区）：分为From区和To区</p><p>当一次Minor GC发生后，Eden区中存活的对象会被移动到其中一个Survivor区，同时另一个Survivor区是空的。当下一次Minor GC发生时，存活的对象会从非空的Survivor区移动到空的Survivor区，同时会清理掉非空Survivor区中的无用对象。这样反复循环，存活的对象会在From区和To区之间移动，直到达到一定的阈值后，会晋升到老年代。</p></li></ul><h3 id="永久代（方法区）"><a href="#永久代（方法区）" class="headerlink" title="永久代（方法区）"></a>永久代（方法区）</h3><p>存储被JVM加载的<strong>类信息</strong>、<strong>静态变量</strong>、<strong>常量</strong>，比上面两个区的更不易回收。</p><h3 id="回收区别以及触发条件"><a href="#回收区别以及触发条件" class="headerlink" title="回收区别以及触发条件"></a>回收区别以及触发条件</h3><table><thead><tr><th></th><th>回收速度</th><th>回收对象</th><th>触发条件</th></tr></thead><tbody><tr><td>Minor GC</td><td>快</td><td>新生代</td><td>Eden区空间不足时</td></tr><tr><td>Major GC</td><td>较慢</td><td>老生代<br />一般会连着Minor GC一起执行</td><td>永久代空间不足<br />执行System.gc（）<br />MinorGC后存活对象超过老年代剩余空间<br />CMS GC 异常<br />堆内存分配很大的对象</td></tr><tr><td>Full GC</td><td>慢</td><td>整个堆空间</td><td>通常与Major GC等价</td></tr></tbody></table><h3 id="判断对象存活"><a href="#判断对象存活" class="headerlink" title="判断对象存活"></a>判断对象存活</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><ul><li><p>概念：如果一个对象没有被任何引用指向，那就可视为垃圾。</p></li><li><p>优点：实现简单，判定效率高。</p></li><li><p>缺点：不能检测到<em>环</em>的存在，难以解决循环引用。</p><p><em>环指的是一种数据结构，通常用于表示一系列按照特定顺序排列的元素，其中最后一个元素链接到第一个元素，形成一个闭合的循环。环可以是线性的，也可以是非线性的。</em></p></li><li><p>实现：每有一个引用指向该对象的时候，计数器加一，反之减一，为0代表该对象死亡。</p></li></ul><p>注：目前主流的JVM中都没有选用本方法管理内存。</p><h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4><ul><li><p>概念：从GC Roots开始向下搜索，搜索路径为引用链。当某一个对象到GC Roots<strong>没有任何引用链</strong>时，此对象<strong>可以回收</strong>。</p></li><li><p>优点：解决了环（循环引用）的问题。</p></li><li><p>缺点：<strong>性能开销高</strong>：需要遍历整个对象图来确定对象之间的引用关系，这个过程需要消耗大量的时间和内存资源。</p><p><strong>暂停应用程序</strong>：在执行垃圾回收时，可达性分析算法需要遍历对象引用关系图，导致应用程序的暂停。</p><p><strong>空间效率低</strong>：可达性分析算法可能导致一些存活对象被错误地判定为不可达对象，从而导致内存泄漏。</p></li><li><p>可以作为根节点的对象：虚拟机栈中的对象、方法区静态引用的对象、常量引用的对象、本地方法栈中JNI引用的对象。</p></li></ul><h3 id="GC的算法"><a href="#GC的算法" class="headerlink" title="GC的算法"></a>GC的算法</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>与判断对象存活的方法一致</p><h4 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h4><ul><li><p>概念：为对象存储一个标记位，记录是否存活。有两个阶段：</p><p><em>标记：为每个对象更新标记位，检查是否存活。</em></p><p><em>清除：对每个死亡的对象进行清除，执行GC操作。</em></p></li><li><p>优点：可以解决循环引用的问题，</p><p>​    必要时才回收（内存不足时）。</p></li><li><p>缺点：回收时会进入<em>STW</em>（stop the world）。</p><p><em>在STW 状态下，JAVA的所有线程都是停⽌执⾏的 -&gt; GC线程除外</em>。<br><em>一旦Stop-the-world发生，除了GC所需的线程外，其他线程都将停止工作，中断了的线程直到GC任务结束才继续它们的任务。</em><br><em>STW是不可避免的,垃圾回收算法执⾏一定会出现STW,我们要做的只是减少停顿的时间</em>。<br><em>GC各种算法优化的重点，就是减少STW(暂停)，同时这也是JVM调优的重点。</em></p><p>标记和清除的效率不高，当对象较多时比较明显。</p><p>会造成内存碎片（内存不连续，无法申请大对象）。</p></li><li><p>应用场景：一般用于老年代，因为老年代生命周期较长。</p></li></ul><h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p>又称”标记压缩算法“</p><ul><li>概念：大致与<strong>清除算法</strong>相同，不过<strong>整理算法</strong>在第二阶段时，会将所有存活对象整理，放到另一处空间，然后清除剩下所有对象。</li><li>优点：解决了内存碎片化。</li><li>缺点：由于移动了可用对象，需要更新引用。</li><li>应用场景：也是老年代。</li></ul><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><ul><li><p>概念：将内存平均分成两部分，每次只使用其中一部分，当这部分内存满时，将存活对象复制到另一个内存中，然后将之前的内存清空。循环执行。</p><p>咋一看与<strong>标记整理算法</strong>类似，但该算法会浪费一半的内存空间，<strong>标记整理算法</strong>虽然不会浪费，但会产生内存碎片。</p></li><li><p>优点：存活对象不多的情况下，<strong>性能高</strong>、<strong>解决内存碎片</strong>及<strong>更新引用</strong>的问题。</p></li><li><p>缺点：浪费一部分内存空间，但可以将内存块（通过-XX:SurvivorRatio调整）比例适当调整；如果存活对象数量大，性能会变得很差。</p></li><li><p>应用场景：新生代中。因为新生代更新迭代太快了，存活的数量少。</p><p>还用于新生代的Eden区：Survivor From区：Survivor To区(比例8:1:1),因为这样有90%可以用来创建对象，10%用来存放回收后存活的对象。</p></li></ul><h4 id="分代算法"><a href="#分代算法" class="headerlink" title="分代算法"></a>分代算法</h4><p>根据对象的生命周期，将内存划分为几块。这样就可以根据各个年代采取最适当的收集算法。</p><ul><li><p>新生代：因为死去的对象＞存活的对象，所以采用复制算法。</p><p>这种算法的优势在于，只需付出少量存活对象的复制成本即可。</p></li><li><p>老年代：因为存活率高，没有额外的存储空间分配担保，采用标记-清除或者标记-整理算法回收。</p></li></ul><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p>是垃圾回收算法的实现。</p><h4 id="JDK8概括表"><a href="#JDK8概括表" class="headerlink" title="JDK8概括表"></a>JDK8概括表</h4><p>在JDK8中有7种垃圾回收器，而不同的垃圾收集器、不同版本的JVM所提供的收集器，可能会有差别。</p><table><thead><tr><th>收集器</th><th>工作区域</th><th>算法</th><th>线程</th><th>用户线程并行</th><th>备注</th></tr></thead><tbody><tr><td>Serial</td><td>新生代</td><td>复制</td><td>单线程</td><td>否</td><td>Client模式下默认的收集器。简单高效</td></tr><tr><td>ParNew</td><td>新生代</td><td>复制</td><td>多线程</td><td>否</td><td>Serial多线程版本，Server模式下的首选。<br />可与CMS搭配。</td></tr><tr><td>Parallel Scavenge</td><td>新生代</td><td>复制</td><td>多线程</td><td>否</td><td>目的是可控制吞吐量</td></tr><tr><td>CMS</td><td>老年代</td><td>标记清除</td><td>多线程</td><td>是</td><td>追求回收停顿时间</td></tr><tr><td>Serial Old</td><td>老年代</td><td>标记整理</td><td>单线程</td><td>否</td><td>老年版本，Client模式下使用</td></tr><tr><td>Parallel Old</td><td>老年代</td><td>标记整理</td><td>多线程</td><td>否</td><td>Parallel Scavenge老年版本，吞吐量优先</td></tr><tr><td>G1</td><td>全部（新+老）</td><td>标记整理+复制</td><td>多线程</td><td>是</td><td>JDK1.9默认收集器，JDK1.7出现</td></tr></tbody></table><h5 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h5><ul><li><p>概念：单线程收集器，只会使用一个CPU或线程完成收集工作，他进行工作前，需要<strong>暂停其他所有</strong>工作线程，直到收集结束。</p></li><li><p>特点：</p><ol><li>新生代收集器，使用复制算法。</li><li>单线程，工作时，其他线程都要停止工作。</li><li>简单高效，因为是单线程没有线程交互的开销，所以有<strong>最高的收集效率</strong>（单线程）。</li></ol></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC//显式使用收集器。</span><br></pre></td></tr></table></figure></li></ul><h5 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h5><ul><li><p>概念：Serial的多线程版本。</p></li><li><p>特点：</p><ol><li>新生代，复制算法。</li><li>Serial多线程版本。</li><li>能<strong>与CMS收集器配合</strong>使用。</li><li>单CPU环境时性能不如Serial。</li></ol></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC//强制使用ParNew。</span><br><span class="line">-XX:+UseConcMarkSweepGC//指定CMS后，会默认用ParNew作为新生代收集器。</span><br><span class="line">-XX:ParallelGCThreads //指定线程数量，默认开启的收集线程数量和CPU相同。</span><br></pre></td></tr></table></figure></li></ul><h5 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h5><ul><li><p>概念：新生代，该收集器更注重吞吐量。</p></li><li><p>特点：</p><ol><li>新生代，复制算法。</li><li>多线程</li><li>高吞吐量优先（减少垃圾回收时间，节省用户代码等待时间）</li></ol></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelGC  //使用该回收器</span><br><span class="line">-XX:MaxGCPauseMillis  //控制垃圾回收时最大的停顿时间(单位ms)</span><br><span class="line">-XX:GCTimeRatio  //控制程序运行的吞吐量大小吞吐量大小=代码执行时间/(代码执行时间+gc回收的时间)</span><br><span class="line">-XX:UseAdaptiveSizePolicy  //内存调优交给虚拟机管理</span><br></pre></td></tr></table></figure></li></ul><h5 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h5><ul><li><p>概念：Serial 的老年代版本，使用标记整理算法。</p></li><li><p>特点：单线程、老年代收集器，使用标记整理算法。</p></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在JDK1.5及之前，与Parallel Scavenge收集器搭配使用，</span><br><span class="line">在JDK1.6后有Parallel Old收集器可搭配。</span><br><span class="line">现在的作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用</span><br><span class="line">-XX:+UseSerialOldGC//使用该收集器</span><br></pre></td></tr></table></figure></li></ul><h5 id="Parallnel-old"><a href="#Parallnel-old" class="headerlink" title="Parallnel old"></a>Parallnel old</h5><ul><li><p>概念：Parallel Scavenge的老年代版本，使用标记整理算法</p></li><li><p>特点：</p><ol><li>老年代、多线程、标记整理算法。</li><li>单CPU环境时性能不如Serial Old。</li></ol></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelOldGC//使用该收集器</span><br></pre></td></tr></table></figure></li></ul><h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><ul><li><p>概念：老年代。是一种以获取最短回收停顿时间为目标的收集器，适用于互联网站或者 B&#x2F;S 系统的服务端上。</p></li><li><p>优点：</p><ol><li>老年代，标记清除算法。</li><li>最短回收停顿时间为目标。</li><li><strong>并发收集、低停顿</strong>。</li><li>垃圾收集线程与用户线程（基本上）可以同时工作。</li></ol></li><li><p>缺点：</p><ol><li>对CPU资源非常敏感。</li><li>法处理浮动垃圾，可能出现”Concurrent Mode Failure”失败。</li><li>因为是标记清除算法，所以会产生大量内存碎片。</li></ol></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC//指定使用CMS收集器。</span><br></pre></td></tr></table></figure></li></ul><h5 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h5><ul><li><p>概念：分代收集器，面向服务端应用，解决了CMS内存碎片、更多的内存空间等问题。虽然流程与CMS比较相似，但底层的原理已是完全不同。</p></li><li><p>特点：</p><ol><li><p>充分利用<strong>多CPU、多核环境</strong>下的硬件优势。</p></li><li><p>并行来<strong>缩短(STW)停顿时间</strong>。</p></li><li><p>并发让<strong>垃圾收集</strong>与<strong>用户程序</strong>同时进行****。</p></li><li><p>收集范围包括<strong>新生代</strong>和<strong>老年代。</strong></p></li><li><p>独立管理整个GC堆（新生代和老年代）。</p></li><li><p>采用不同方式处理不同时期的对象。</p><p><em>G1垃圾收集器将Java堆划分为多个相同大小的区域，每个区域称为一个”Region”。这些Region可以是新生代的Eden空间、Survivor空间，也可以是老年代空间。G1通过划分为Region来实现不同区域的独立回收，从而提高了垃圾回收的效率和灵活性。</em></p></li><li><p>面向服务端应用，针对具有大内存、多处理器的机器。</p></li><li><p>使用<strong>标记-整理</strong> + <strong>复制算法</strong>来回收垃圾。</p></li></ol></li><li><p>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC//指定使用该收集器。</span><br><span class="line">-XX:InitiatingHeapOccupancyPercent//当整个Java堆的占用率达到参数值时，开始并发标记阶段；默认为45。</span><br><span class="line">-XX:MaxGCPauseMillis//为G1设置暂停时间目标，默认值为200毫秒。</span><br><span class="line">-XX:G1HeapRegionSize//设置每个Region大小，范围1MB到32MB，目标是在最小Java堆时可以拥有约2048个Region。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h2><h4 id="内存参数"><a href="#内存参数" class="headerlink" title="内存参数"></a>内存参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#常用的设置</span><br><span class="line">-Xms：初始堆大小，JVM 启动的时候，给定堆空间大小。 </span><br><span class="line"></span><br><span class="line">-Xmx：最大堆大小，JVM 运行过程中，如果初始堆空间不足的时候，最大可以扩展到多少。 </span><br><span class="line"></span><br><span class="line">-Xmn：设置堆中年轻代大小。整个堆大小=年轻代大小+年老代大小+持久代大小。 </span><br><span class="line"></span><br><span class="line">-XX:NewSize=n 设置年轻代初始化大小大小 </span><br><span class="line"></span><br><span class="line">-XX:MaxNewSize=n 设置年轻代最大值</span><br><span class="line"></span><br><span class="line">-XX:NewRatio=n 设置年轻代和年老代的比值。如: -XX:NewRatio=3，表示年轻代与年老代比值为 1：3，年轻代占整个年轻代+年老代和的 1/4 </span><br><span class="line"></span><br><span class="line">-XX:SurvivorRatio=n 年轻代中 Eden 区与两个 Survivor 区的比值。注意 Survivor 区有两个。8表示两个Survivor :eden=2:8 ,即一个Survivor占年轻代的1/10，默认就为8</span><br><span class="line"></span><br><span class="line">-Xss：设置每个线程的堆栈大小。JDK5后每个线程 Java 栈大小为 1M，以前每个线程堆栈大小为 256K。</span><br><span class="line"></span><br><span class="line">-XX:ThreadStackSize=n 线程堆栈大小</span><br><span class="line"></span><br><span class="line">-XX:PermSize=n 设置持久代初始值</span><br><span class="line"></span><br><span class="line">-XX:MaxPermSize=n 设置持久代大小</span><br><span class="line"> </span><br><span class="line">-XX:MaxTenuringThreshold=n 设置年轻带垃圾对象最大年龄。如果设置为 0 的话，则年轻代对象不经过 Survivor 区，直接进入年老代。</span><br><span class="line"></span><br><span class="line">//下面是一些不常用的</span><br><span class="line"></span><br><span class="line">-XX:LargePageSizeInBytes=n 设置堆内存的内存页大小</span><br><span class="line"></span><br><span class="line">-XX:+UseFastAccessorMethods 优化原始类型的getter方法性能</span><br><span class="line"></span><br><span class="line">-XX:+DisableExplicitGC 禁止在运行期显式地调用System.gc()，默认启用</span><br><span class="line"></span><br><span class="line">-XX:+AggressiveOpts 是否启用JVM开发团队最新的调优成果。例如编译优化，偏向锁，并行年老代收集等，jdk6纸之后默认启动</span><br><span class="line"></span><br><span class="line">-XX:+UseBiasedLocking 是否启用偏向锁，JDK6默认启用</span><br><span class="line"></span><br><span class="line">-Xnoclassgc 是否禁用垃圾回收</span><br><span class="line"></span><br><span class="line">-XX:+UseThreadPriorities 使用本地线程的优先级，默认启用</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="GC参数"><a href="#GC参数" class="headerlink" title="GC参数"></a>GC参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC:设置串行收集器，年轻带收集器 </span><br><span class="line"></span><br><span class="line"> -XX:+UseParNewGC:设置年轻代为并行收集。可与 CMS 收集同时使用。JDK5.0 以上，JVM 会根据系统配置自行设置，所以无需再设置此值。</span><br><span class="line"></span><br><span class="line">-XX:+UseParallelGC:设置并行收集器，目标是目标是达到可控制的吞吐量</span><br><span class="line"></span><br><span class="line">-XX:+UseParallelOldGC:设置并行年老代收集器，JDK6.0 支持对年老代并行收集。 </span><br><span class="line"></span><br><span class="line">-XX:+UseConcMarkSweepGC:设置年老代并发收集器</span><br><span class="line"></span><br><span class="line">-XX:+UseG1GC:设置 G1 收集器，JDK1.9默认垃圾收集器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编辑JVM"><a href="#编辑JVM" class="headerlink" title="编辑JVM"></a>编辑JVM</h4><h5 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h5><ul><li>全局配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在IDEA的安装目录中找到idea.exe.vmoptions文件。</span><br><span class="line">E:\Idea\ideaIU-2023.2.1\bin\idea64.exe.vmoptions</span><br></pre></td></tr></table></figure><img src="\img\\image-20240308202658595.png" alt="image-20240308202658595" style="zoom:80%;" /><ul><li>局部配置</li></ul><p>shift双击→搜索VM，也是一种方法。</p><img src="\img\\image-20240308202830141.png" alt="image-20240308202830141" style="zoom:25%;" /><h5 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h5><p>直接在启动项目的时候设定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms1024m -Xmx1024m .... -jar springboot_app.jar</span><br></pre></td></tr></table></figure><h4 id="调优总结"><a href="#调优总结" class="headerlink" title="调优总结"></a>调优总结</h4><h5 id="常用调优参数"><a href="#常用调优参数" class="headerlink" title="常用调优参数"></a>常用调优参数</h5><ul><li><strong>堆内存设置</strong>：**-Xms** 和 <strong>-Xmx</strong> 设置堆的起始大小和最大大小。</li><li><strong>垃圾收集器选择</strong>：**-XX:+UseG1GC** 使用G1垃圾收集器。</li><li><strong>性能监控</strong>：**-XX:+PrintGCDetails** 打印垃圾收集细节。</li><li><strong>-XX:MaxGCPauseMillis&#x3D;200</strong>：设置期望的最大GC暂停时间（毫秒），以便于优化延迟。</li><li><strong>-XX:ParallelGCThreads&#x3D;8</strong>：设置并行垃圾收集线程数。一般设置为可用CPU核心数。</li><li><strong>-XX:ConcGCThreads&#x3D;4</strong>：设置G1的并发标记线程数，一般为ParallelGCThreads的一半。</li></ul><h5 id="常见办法"><a href="#常见办法" class="headerlink" title="常见办法"></a>常见办法</h5><ol><li>直接将<strong>初始堆大小</strong>和<strong>最大堆大小</strong>相等，<strong>减少GC次数</strong>来提高效率。</li><li>初始堆和最大堆内存越大，吞吐量越高。</li><li>尽量使用并行收集器，并行收集器的速度高于串行，吞吐量也大于串行。</li><li>新生代和老年代的比例最好为1:2或者1:3（默认1：2）</li><li>减少GC对老年代的回收。设置新生代最大年龄。</li><li>尽量不要有大量的大对象（连续内存空间）。因为大对象会直接到老年代，老年代内存不足就会GC。</li></ol><p>注：</p><ul><li><p>硬件配置＞软件。</p></li><li><p>老年代的GC速度＞新生代，所以尽量减少老年代GC。</p></li><li><p>默认的JVM堆大小是电脑内存的4分之一左右。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;最大内存&quot;</span>);</span><br><span class="line">        System.out.println(Runtime.getRuntime().maxMemory() / <span class="number">1024.0</span> / <span class="number">1024</span> + <span class="string">&quot;M&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="机制及过程"><a href="#机制及过程" class="headerlink" title="机制及过程"></a>机制及过程</h3><ul><li><p>概念：当程序主动使用某个类时，如果该类还未被加载到内存中，则JVM会通过<strong>加载、连接、初始化</strong>3个步骤来对该类进行初始化。</p><p>如果没有意外情况，JVM是连续完成这3个任务的，所以这3个步骤有时统称为<strong>类加载</strong>或<strong>类初始化</strong>。</p></li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ol><li>加载指的是<strong>将类的class文件读入到内存</strong>，并将这些静态数据转换成方法区中的运行时数据结构，并在<strong>堆中生成</strong>一个代表这个类的<strong>java.lang.Class对象</strong>，作为方法区类数据的访问入口，这个过程需要类加载器参与。</li><li>默认是由JVM提供的系统类加载器；用户可以通过继承<strong>ClassLoader</strong>基类创建自己的类加载器。</li><li>可以加载不同来源的二进制数据；如：本地Class文件、Jar包Class文件、网络Class文件等。</li><li>最终就产生了位于堆中的Class对象。该对象就是实现反射的接口。</li></ol><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>类加载完成后，会进入连接阶段。这个阶段会将类的二进制数据合并到Jre中（将java类的二进制代码合到JVM的运行状态中）。</p><ol><li><p>验证：验证是否符合JVM规范，是否符合Class文件格式规范，能否被当前的JVM加载处理。</p></li><li><p>准备：在内存的<strong>方法区</strong>中为<strong>static变量</strong>（类变量）分配内存。</p></li><li><p>解析：JVM常量池的<em>符号引用</em>替换为<em>字节引用</em>。</p><ul><li><p>符号引用：用一组符号来表示要引用的目标，符号可以是任何形式的<em>字面量</em>，只要能够无歧义的定位到目标即可。</p><p><em>字面量：字符串、final定义的常量值</em>。</p></li><li><p>字节引用：不清楚，但我猜和符号引用差不多。</p></li></ul></li></ol><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。<code>&lt;clinit&gt;()</code>方法是由编译器自动收藏类中的所有类变量的赋值动作和静态语句块(static块)中的语句合并产生，代码从上往下执行。</p><ol><li>需要遵守顺序，父初始化完成才能子初始化。</li><li>JVM会保证一个类的<clinit>()方法在多线程中被正确加锁和同步。</li></ol><p>总结：类初始化就是将<strong>静态变量赋予正确的初始值</strong>。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="引导类加载器"><a href="#引导类加载器" class="headerlink" title="引导类加载器"></a>引导类加载器</h4><p>（bootstrap class loader）</p><ul><li>用于加载 Java 的核心类，是用原生代码来实现的，不继承自 java.lang.ClassLoader（负责加载$JAVA_HOME中jre&#x2F;lib&#x2F;rt.jar里所有的class，由C++实现，不是ClassLoader子类）。由于引导类加载器涉及到虚拟机本地实现细节，开发者<strong>无法直接获取到引导类加载器</strong>的引用，所以<strong>不允许直接通过引用</strong>进行操作。</li></ul><h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><p>（extensions class loader）</p><ul><li>扩展类加载器是指Sun公司(已被Oracle收购)实现的sun.misc.Launcher$<strong>ExtClassLoader类</strong>，由Java语言实现的，父类是引导类加载器。是Launcher的静态内部类，它负责加载<JAVA_HOME>&#x2F;lib&#x2F;ext目录下或者由系统变量-Djava.ext.dir指定位路径中的类库，开发者<strong>可以直接使用</strong>标准扩展类加载器。</li></ul><h4 id="系统类加载器"><a href="#系统类加载器" class="headerlink" title="系统类加载器"></a>系统类加载器</h4><p>（system class loader）</p><ul><li><p>被称为系统（也称为应用）类加载器，它负责在JVM启动时加载来自Java命令的-classpath选项、java.class.path系统属性，或者CLASSPATH换将变量所指定的JAR包和类路径。程序可以通过ClassLoader的静态方法<strong>getSystemClassLoader()<strong>来</strong>获取系统类加载器</strong>。如果没有特别指定，则用户自定义的类加载器都以此类加载器作为父加载器。由Java语言实现，父类加载器为ExtClassLoader。（Java虚拟机采用的是双亲委派模式即把请求交由父类处理）</p><p>类加载器加载Class大致要经过如下8个步骤：</p><ol><li>检测此Class是否载入过，即在缓冲区中是否有此Class，如果有直接进入第8步，否则进入第2步。</li><li>如果没有父类加载器，则要么Parent是引导类加载器，要么本身就是引导类加载器，则跳到第4步，如果父类加载器存在，则进入第3步。</li><li>请求使用父类加载器去载入目标类，如果载入成功则跳至第8步，否则接着执行第5步。</li><li>请求使用引导类加载器去载入目标类，如果载入成功则跳至第8步，否则跳至第7步。</li><li>当前类加载器尝试寻找Class文件，如果找到则执行第6步，如果找不到则执行第7步。</li><li>从文件中载入Class，成功后跳至第8步。</li><li>抛出ClassNotFountException异常。</li><li>返回对应的java.lang.Class对象</li></ol></li></ul><p>总结：需要使用<strong>引导类加载器</strong>加载，否则抛出异常。</p><h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><ul><li><p>其工作原理的是，如果一个类加载器收到了类加载请求，它并不<strong>会自己先去加载</strong>，而是把这个请求<strong>委托给父类的加载器去执行</strong>，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的引导类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即每个儿子都很懒，每次有活就丢给父亲去干，直到父亲说这件事我也干不了时，儿子自己才想办法去完成。</span><br></pre></td></tr></table></figure></li><li><p>优势：采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子类加载器再加载一次。其次是考虑到安全因素，java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过Integer.class，这样便可以防止核心API库被随意篡改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：避免类的重复加载，防止核心API被随意修改。（个人理解：子不能修改父的属性）</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h4><ul><li>由用户自定义。</li></ul><p>注：从上至下的顺序加载，如果父类加载失败，由子类自行处理。</p><h2 id="JVM可视化工具"><a href="#JVM可视化工具" class="headerlink" title="JVM可视化工具"></a>JVM可视化工具</h2><h4 id="visualVm"><a href="#visualVm" class="headerlink" title="visualVm"></a>visualVm</h4><ul><li>位于 JDK 根目录的 bin 文件夹下的jvisualvm.exe</li></ul><h4 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h4><ul><li>位于jdk&#x2F;bin 目录下面的jconsole.exe</li></ul><p>JVM部分参考：<a href="https://blog.csdn.net/weixin_43122090/article/details/105093777">一篇文章掌握整个JVM，JVM超详细解析！！！-CSDN博客</a></p><h2 id="面试可能会问的："><a href="#面试可能会问的：" class="headerlink" title="面试可能会问的："></a>面试可能会问的：</h2><h3 id="为什么要分代？"><a href="#为什么要分代？" class="headerlink" title="为什么要分代？"></a>为什么要分代？</h3><p>因为可以根据各个年代的特点进行分区存储，更便于垃圾回收，采用最适当的收集算法。</p><ol><li>新生代中，每次垃圾收集时都发现大批对象死去，只有少量对象存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</li><li>老年代中因为对象存活率高，没有额外空间对它进行分配担保，就要采用“标记-清理”或“标记-整理”算法。</li></ol><p>数据默认先到Eden区中（大对象会直接到老年代中），然后当Eden没有内存空间时会通过JVM触发一次<strong>MinorGC</strong>，如果对象还存活且能被<strong>Survivor区</strong>接受，就移至Survivor区中并且年龄设为1，每次进行MinorGC年龄就+1，当年龄超过15（默认15，可以通过**-XX:MaxTenuringThreshold<strong>修改）时，就会移至</strong>老年代区**。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
